<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Autodetection" xml:space="preserve">
    <value>Auto-detection</value>
  </data>
  <data name="AutoDetectWarning" xml:space="preserve">
    <value>Warning: Run Auto-Detection may have impact to SUT's states (PTM may create directories or files, may establish connections with SUT and send packets, etc).
Do you want to continue?</value>
  </data>
  <data name="AutoDetectWarningTitle" xml:space="preserve">
    <value>Configure test suite using auto-detection</value>
  </data>
  <data name="ChooseConfigMethod" xml:space="preserve">
    <value>Choose configuration method</value>
  </data>
  <data name="ConfigureAdapters" xml:space="preserve">
    <value>Configure adapters</value>
  </data>
  <data name="ConfigureTestCase" xml:space="preserve">
    <value>Configure test case properties</value>
  </data>
  <data name="DetectButton" xml:space="preserve">
    <value>_Detect</value>
  </data>
  <data name="DetectionResult" xml:space="preserve">
    <value>Detection result</value>
  </data>
  <data name="FilterTestCases" xml:space="preserve">
    <value>Filter test cases</value>
  </data>
  <data name="NextButton" xml:space="preserve">
    <value>_Next &gt;</value>
  </data>
  <data name="RunningTestCases" xml:space="preserve">
    <value>Running test cases...</value>
  </data>
  <data name="RunSelectedTestCases" xml:space="preserve">
    <value>Run selected test cases</value>
  </data>
  <data name="SelectTestSuite" xml:space="preserve">
    <value>Select a test suite to launch</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="SummaryFormat" xml:space="preserve">
    <value>{0} test cases are selected.
{1} ptfconfig items are changed.</value>
  </data>
  <data name="TestCasesFinished" xml:space="preserve">
    <value>Finished running test cases.</value>
  </data>
  <data name="TestProfileFilter" xml:space="preserve">
    <value>Test profile (*.ptm)|*.ptm</value>
  </data>
  <data name="TestProfileFolder" xml:space="preserve">
    <value>Profiles</value>
  </data>
  <data name="TestSuiteIntroduction" xml:space="preserve">
    <value>Test suite introduction</value>
  </data>
  <data name="VSFileName" xml:space="preserve">
    <value>devenv.exe</value>
  </data>
  <data name="DetectionError" xml:space="preserve">
    <value>Auto-detect error</value>
  </data>
  <data name="InvalidValue" xml:space="preserve">
    <value>Invalid value</value>
  </data>
  <data name="TestResultsFilter" xml:space="preserve">
    <value>PTM Test Result (*.result)|*.result</value>
  </data>
  <data name="TestResultsFolder" xml:space="preserve">
    <value>Results</value>
  </data>
  <data name="NotFoundCaseMessage" xml:space="preserve">
    <value>{0} test cases in the play list are not found.</value>
  </data>
  <data name="PlaylistFilter" xml:space="preserve">
    <value>Play List (*.playlist)|*.playlist</value>
  </data>
  <data name="NoTestCaseSelected" xml:space="preserve">
    <value>No test case selected.</value>
  </data>
  <data name="TextFilter" xml:space="preserve">
    <value>Text File (*.txt)|*.txt</value>
  </data>
  <data name="AbortWarning" xml:space="preserve">
    <value>Abort test execution may result in incomplete test log.
Do you want to abort the execution?</value>
  </data>
  <data name="TitleFormat" xml:space="preserve">
    <value>Protocol Test Manager - {0} {1}</value>
  </data>
  <data name="ConfigureWizard" xml:space="preserve">
    <value>Configure Wizard</value>
  </data>
  <data name="Run" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="RunToolTip" xml:space="preserve">
    <value>Run this test suite using the settings of last run.</value>
  </data>
  <data name="FeatureNotSupported" xml:space="preserve">
    <value>This feature is detected not supported.</value>
  </data>
  <data name="DefaultValue" xml:space="preserve">
    <value>Apply default value</value>
  </data>
</root>