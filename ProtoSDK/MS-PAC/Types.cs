// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestTools.StackSdk.Security.Pac
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using Microsoft.Protocols.TestTools.StackSdk.Dtyp;
    using Microsoft.Protocols.TestTools.StackSdk.Messages.Marshaling;


    /// <summary>
    ///  The PACTYPE structure is the topmost structure of the
    ///  PAC and specifies the number of elements in the PAC_INFO_BUFFER
    ///  array. The PACTYPE structure serves as the header
    ///  for the complete PAC data.The PACTYPE structure is
    ///  defined as follows:
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pactype.xml
    //  </remarks>
    public partial struct PACTYPE
    {

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  defines the number of entries in the Buffers array.
        ///  
        /// </summary>
        public uint cBuffers;

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  defines the PAC version; MUST be 0x00000000. 
        /// </summary>
        public PACTYPE_Version_Values Version;

        /// <summary>
        ///  An array of PAC_INFO_BUFFER structures.
        /// </summary>
        [Size("cBuffers")]
        public PAC_INFO_BUFFER[] Buffers;
    }

    /// <summary>
    /// PACTYPE_Version_Values
    /// </summary>
    public enum PACTYPE_Version_Values : uint
    {

        /// <summary>
        ///  Possible value.
        /// </summary>
        V1 = 0x00000000,
    }

    /// <summary>
    ///  The PAC_CLIENT_INFO structure is a variable length buffer
    ///  of the PAC that contains the client's name and authentication
    ///  time. It is used to verify that the PAC corresponds
    ///  to the client of the ticket. The PAC_CLIENT_INFO structure
    ///  is placed directly after the Buffers array of the topmost
    ///  PACTYPE structure (section ), at the offset specified
    ///  in the Offset field of the corresponding PAC_INFO_BUFFER
    ///  structure (section) in the Buffers array. The ulType
    ///  field of the corresponding PAC_INFO_BUFFER is set to
    ///  0x0000000A.  
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pac_client_info.xml
    //  </remarks>
    public partial struct PAC_CLIENT_INFO
    {

        /// <summary>
        ///  A _FILETIME structure in little-endian format that contains
        ///  the Kerberos  initial ticket-granting ticket TGT authentication
        ///  time, as specified in [RFC4120] section 5.3.
        /// </summary>
        public _FILETIME ClientId;

        /// <summary>
        ///  An unsigned 16-bit integer in little-endian format that
        ///  specifies the length, in bytes, of the Name field.
        /// </summary>
        public ushort NameLength;

        /// <summary>
        ///  An array of 16-bit Unicode characters in little-endian
        ///  format that contains the client's account name.The
        ///  Name field contains the client's account name. This
        ///  is the samAccountName attribute value of the client
        ///  account object.  If the Service for User to Self (S4U2self)
        ///  extension [MS-SFU] is used, the Name field has the
        ///  following variations:   									In the referral TGT
        ///  returned in a S4U request, the Name field in the PAC_CLIENT_INFO
        ///  buffer contains the name form user name@user realm.
        ///   This is the syntax of the single-string representation
        ///  ([RFC1964] section 2.1.1) where the user name and user
        ///  realm values are taken from the PA-FOR-USER pre-authentication
        ///  data.  In the S4U2self service ticket, the Name field
        ///  in the PAC_CLIENT_INFO buffer contains the name form
        ///  username. It does not signify the realm. This is
        ///  also the syntax of the single-string representation
        ///  (as specified in  [RFC1964] section 2.1.1) where the
        ///  user name value is taken from the PA-FOR-USER pre-authentication
        ///  data.In the service returned using the S4U2proxy extension
        ///  [MS-SFU] the Name field is copied from the additional
        ///  evidence ticket in the request that contains the user's
        ///  authorization data. 					
        /// </summary>
        [Size("NameLength/2")]
        public char[] Name;
    }

    /// <summary>
    ///  The PAC_CREDENTIAL_INFO structure serves as the header
    ///  for the credential information. The PAC_CREDENTIAL_INFO
    ///  header indicates the encryption algorithm that was
    ///  used to encrypt the data that follows it. The data
    ///  that follows is an encrypted, IDL-serialized PAC_CREDENTIAL_DATA
    ///  structure that contains the user's actual credentials.
    ///  Note that this structure cannot be used by protocols
    ///  other than the Kerberos protocol; the encryption method
    ///  relies on the encryption key currently in use by the
    ///  Kerberos AS-REQ ([RFC4120] section 3.1 and [MS-KILE])
    ///  message.This buffer is inserted into the PAC only when
    ///  initial authentication is done through the PKINIT protocol
    ///  (as specified in [RFC4556]) and is inserted only during
    ///  initial logon; it is not included when the ticket-granting
    ///  ticket (TGT) is used for further authentication.A PAC_CREDENTIAL_INFO
    ///  structure contains the encrypted user's credentials.
    ///   The encryption key usage number [RFC4120] used in
    ///  the encryption is KERB_NON_KERB_SALT (16). The encryption
    ///  key used is the AS reply key. The PAC credentials buffer
    ///  SHOULD be included only when PKINIT [RFC4556] is used.
    ///  Therefore, the AS reply key is derived based on PKINIT.The
    ///  byte array of encrypted data  is computed per the procedures
    ///  specified in [RFC3961].
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pac_credential_info.xml
    //  </remarks>
    public partial struct PAC_CREDENTIAL_INFO
    {

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  defines the version. MUST be 0x00000000.
        /// </summary>
        public PAC_CREDENTIAL_INFO_Version_Values Version;

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  indicates the Kerberos encryption Type used to encode
        ///  the SerializedData array. This value MUST be one of
        ///  the following encryption types, which are a subset
        ///  of the possible encryption types supported in Kerberos
        ///  authentication (as specified in [RFC4120], [RFC4757],
        ///  and [RFC4556]). Note that the encryption key usage
        ///  number ([RFC4120] sections 4 and 7.5.1) is 16.RC4 with
        ///  Hash Message Authentication Code (HMAC) is preferred
        ///  and is most often seen, except when the principal has
        ///  been configured to require a Data Encryption Standard
        ///  (DES) encryption Type.
        /// </summary>
        public EncryptionType_Values EncryptionType;

        /// <summary>
        ///  A variable length PAC_CREDENTIAL_DATA structure that
        ///  contains  credentials encrypted   using the mechanism
        ///  specified by the EncryptionType field. 
        /// </summary>
        [StaticSize(1, StaticSizeMode.Elements)]
        public byte[] SerializedData;
    }

    /// <summary>
    /// PAC_CREDENTIAL_INFO_Version_Values
    /// </summary>
    public enum PAC_CREDENTIAL_INFO_Version_Values : uint
    {

        /// <summary>
        ///  Possible value.
        /// </summary>
        V1 = 0x00000000,
    }

    /// <summary>
    /// EncryptionType_Values
    /// </summary>
    public enum EncryptionType_Values : uint
    {

        /// <summary>
        ///  Data encryption standard (DES) in cipher block chaining
        ///  (CBC) mode with cyclic redundancy check (CRC).
        /// </summary>
        DES_CBC_CRC = 0x00000001,

        /// <summary>
        ///  DES in CBC mode with MD5.
        /// </summary>
        DES_CBC_MD5 = 0x00000003,

        /// <summary>
        ///  AES128_CTS_HMAC_SHA1_96 (128-bit encryption key in clear
        ///  to send (CTS) encryption mode with integrity check
        ///  algorithm HMAC_SHA1_96).AES128_CTS_HMAC_SHA1_96 is
        ///  used only in  and .
        /// </summary>
        AES128_CTS_HMAC_SHA1_96 = 0x00000011,

        /// <summary>
        ///  AES256_CTS_HMAC_SHA1_96 (256-bit encryption key in CTS
        ///  encryption mode with integrity check algorithm HMAC_SHA1_96).AES256_CTS_HMAC_SHA1_96
        ///  is used only in  and .
        /// </summary>
        AES256_CTS_HMAC_SHA1_96 = 0x00000012,

        /// <summary>
        ///  RC4 with hashed message authentication code (HMAC) key.
        /// </summary>
        RC4_HMAC = 0x00000017,
    }

    /// <summary>
    ///  Following the PACTYPE structure is an array of PAC_INFO_BUFFER
    ///  structures that each define the Type and byte offset
    ///  to a buffer of the PAC. The PAC_INFO_BUFFER array
    ///  has no defined ordering.  Therefore, the order of the
    ///  PAC_INFO_BUFFER buffers has no significance.  However,
    ///  once the Key Distribution Center (KDC) and server signatures
    ///  are generated, the ordering of the buffers MUST NOT
    ///  change, or signature verification of the PAC contents
    ///  will fail. 
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pac_info_buffer.xml
    //  </remarks>
    public partial struct PAC_INFO_BUFFER
    {

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  describes the Type of data present in the buffer contained
        ///  at Offset.  
        /// </summary>
        public PAC_INFO_BUFFER_Type_Values ulType;

        /// <summary>
        ///  A 32-bit unsigned integer in little-endian format that
        ///  contains the totalLength, in bytes, of the buffer in the PAC
        ///  located at Offset.
        /// </summary>
        public uint cbBufferSize;

        /// <summary>
        ///  A 64-bit unsigned integer in little-endian format that
        ///  contains the offset to the beginning of the buffer,
        ///  in bytes, from the beginning of the PACTYPE structure
        ///  (section ). The data offset MUST be a multiple of
        ///  eight. The following sections specify the format of
        ///  each Type of element.
        /// </summary>
        public ulong Offset;
    }

    /// <summary>
    /// PAC_INFO_BUFFER_Type_Values
    /// </summary>
    public enum PAC_INFO_BUFFER_Type_Values : uint
    {

        /// <summary>
        ///  Logon information (section ). PAC structures MUST contain
        ///  one buffer of this Type. Additional logon information
        ///  buffers MUST be ignored.
        /// </summary>
        LogonInformation = 0x00000001,

        /// <summary>
        ///  Credentials information (section ). PAC structures SHOULD
        ///  NOT contain more than one buffer of this Type, based
        ///  on constraints specified in section. Second or subsequent
        ///  credentials information buffers MUST be ignored on
        ///  receipt.
        /// </summary>
        CredentialsInformation = 0x00000002,

        /// <summary>
        ///  Server checksum (section ). PAC structures MUST contain
        ///  one buffer of this Type. Additional logon server checksum
        ///  buffers MUST be ignored.
        /// </summary>
        ServerChecksum = 0x00000006,

        /// <summary>
        ///  KDC (privilege server) checksum (section ). 							PAC
        ///  structures MUST contain one buffer of this Type. Additional
        ///  KDC checksum buffers MUST be ignored.
        /// </summary>
        KdcChecksum = 0x00000007,

        /// <summary>
        ///  Client name and ticket information (section ). PAC structures
        ///  MUST contain one buffer of this Type. Additional client
        ///  and ticket information buffers MUST be ignored.
        /// </summary>
        ClientNameAndTicketInformation = 0x0000000A,

        /// <summary>
        ///  Constrained delegation information (section ). PAC structures
        ///  MUST contain one buffer of this Type for Service for
        ///  User to Proxy (S4U2proxy) [MS-SFU] requests and none
        ///  otherwise. Additional constrained delegation information
        ///  buffers MUST be ignored.
        /// </summary>
        ConstrainedDelegationInformation = 0x0000000B,

        /// <summary>
        ///  User principal name (UPN) and Domain Name System (DNS)
        ///  information (section ). PAC structures SHOULD NOT contain
        ///  more than one buffer of this Type. Second or subsequent
        ///  UPN and DNS information buffers MUST be ignored on
        ///  receipt , and    support UPN and DNS information..
        /// </summary>
        UpnAndDnsInformation = 0x0000000C,

        /// <summary>
        /// Client claims information. PAC structures SHOULD NOT 
        /// contain more than one buffer of this type. Additional 
        /// client claims information buffers MUST be ignored.
        /// </summary>
        ClientClaimsInformation = 0x0000000D,

        PacDeviceInfo = 0x0000000E,

        DeviceClaimsInformation = 0x0000000F
    }

    /// <summary>
    ///  Two PAC_SIGNATURE_DATA structures are appended to the
    ///  PAC that stores the server and KDC signatures.  These
    ///  structures are placed after the Buffers array of the
    ///  topmost PACTYPE structure (section ), at the offsets
    ///  specified in the Offset fields in each of the corresponding
    ///  PAC_INFO_BUFFER structures (section) in the Buffers
    ///  array. The  ulType field of the PAC_INFO_BUFFER corresponding
    ///  to the server signature contains the value 0x00000006
    ///  and the ulType field of the PAC_INFO_BUFFER corresponding
    ///  to the KDC signature contains the value 0x00000007.
    ///   PAC signatures can be generated only when the PAC
    ///  is used by the Kerberos protocol because the keys used
    ///  to create and verify the signatures are the keys known
    ///  to the KDC.  No other protocol can use these PAC signatures.
    ///  The format of the PAC_SIGNATURE_DATA structures is
    ///  defined as follows: 
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pac_signature_data.xml
    //  </remarks>
    public partial struct PAC_SIGNATURE_DATA
    {

        /// <summary>
        ///  A 32-bit unsigned integer value in little-endian format
        ///  that defines the cryptographic system used to calculate
        ///  the checksum. This MUST be one of the values defined
        ///  in the following table. The corresponding sizes of
        ///  the signatures are also given. The key used with the
        ///  cryptographic system corresponds to the value of the
        ///  ulType field of the outer PAC_INFO_BUFFER structure.
        ///  The value 0x00000006 specifies the server's key, and
        ///  the value 0x00000007 specifies the KDC's key.
        /// </summary>
        public PAC_SIGNATURE_DATA_SignatureType_Values SignatureType;

        /// <summary>
        ///  An array of 8-bit unsigned characters that contains
        ///  the checksum. The KERB_CHECKSUM_HMAC_MD5 checksum
        ///  (defined in the preceding table) is 16 bytes in length.
        ///  The totalLength of the signature is determined by the value
        ///  of the SignatureType field, as indicated in the preceding
        ///  table.
        /// </summary>
        [Size("@CalculateSignatureLength")]
        public byte[] Signature;
    }

    /// <summary>
    /// SignatureType_Values
    /// </summary>
    public enum PAC_SIGNATURE_DATA_SignatureType_Values : uint
    {

        /// <summary>
        ///  As specified in [RFC4120] and [RFC4757] section 4. Signature
        ///  totalLength is 16 bytes. Decimal value is -138.
        /// </summary>
        KERB_CHECKSUM_HMAC_MD5 = 0xFFFFFF76,

        /// <summary>
        ///  As specified in [RFC3962] section 7. Signature totalLength
        ///  is 12 bytes. Decimal value is 15.
        /// </summary>
        HMAC_SHA1_96_AES128 = 0x0000000F,

        /// <summary>
        ///  As specified in [RFC3962] section 7. Signature totalLength
        ///  is 12 bytes. Decimal value is 16.
        /// </summary>
        HMAC_SHA1_96_AES256 = 0x00000010,
    }

    /// <summary>
    ///  The UPN_DNS_INFO structure contains the client's UPN
    ///  and DNS name. It is used to provide the UPN and DNS
    ///  name that corresponds to the client of the ticket.
    ///  The UPN_DNS_INFO structure is placed directly after
    ///  the Buffers array of the topmost PACTYPE structure
    ///  (section ), at the offset specified in the Offset field
    ///  of the corresponding PAC_INFO_BUFFER structure (section
    ///  ) in the Buffers array. The ulType field of the corresponding
    ///  PAC_INFO_BUFFER is set to 0x0000000C , and    support
    ///  UPN and DNS information..
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_upn_dns_info.xml
    //  </remarks>
    public partial struct UPN_DNS_INFO
    {

        /// <summary>
        ///  An unsigned 16-bit integer in little-endian format that
        ///  specifies the length, in bytes, of the UPN field.
        /// </summary>
        public ushort UpnLength;

        /// <summary>
        ///  An unsigned 16-bit integer in little-endian format that
        ///  contains the offset to the beginning of the buffer,
        ///  in bytes, from the beginning of the UPN_DNS_INFO structure.
        /// </summary>
        public ushort UpnOffset;

        /// <summary>
        ///  An unsigned 16-bit integer in little-endian format that
        ///  specifies the length, in bytes, of the DnsDomainName
        ///  field.
        /// </summary>
        public ushort DnsDomainNameLength;

        /// <summary>
        ///  An unsigned 16-bit integer in little-endian format that
        ///  contains the offset to the beginning of the buffer,
        ///  in bytes, from the beginning of the UPN_DNS_INFO structure.
        /// </summary>
        public ushort DnsDomainNameOffset;

        /// <summary>
        ///  A set of bit flags in little-endian format. A flag is
        ///  TRUE (or set) if its value is equal to 1. The value
        ///  is constructed from zero or more bit flags from the
        ///  following table:
        /// </summary>
        public UPN_DNS_INFO_Flags_Values Flags;
    }

    /// <summary>
    /// The UPN_DNS_INFO structure contains the client's UPN and DNS name. It is used to 
    /// provide the UPN and DNS name that corresponds to the client of the ticket.
    /// </summary>
    [Flags()]
    public enum UPN_DNS_INFO_Flags_Values : uint
    {
        /// <summary>
        /// The user account object has the userPrincipalName
        /// attribute ([MS-ADA3] section 2.348) set.
        /// </summary>
        None = 0x00000000,

        /// <summary>
        ///  The user account object does not have the userPrincipalName
        ///  attribute ([MS-ADA3] section 2.348) set.
        ///  A UPN constructed by concatenating the user name with the DNS
        ///  domain name of the account domain is provided.
        /// </summary>
        NoUpnAttribute = 0x00000001,
    }

    /// <summary>
    ///  The GROUP_MEMBERSHIP structure identifies a group to
    ///  which an account belongs. It is sent within the KERB_VALIDATION_INFO
    ///  structure.The format of the GROUP_MEMBERSHIP structure
    ///  is defined as follows:
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_group_membership.xml
    //  </remarks>
    public partial struct _GROUP_MEMBERSHIP
    {

        /// <summary>
        ///  A 32-bit unsigned integer that contains the RID of a
        ///  particular group. 
        /// </summary>
        public uint RelativeId;

        /// <summary>
        ///  A 32-bit unsigned integer value that contains the group
        ///  membership attributes set for the RID  contained in
        ///  RelativeId. The possible values for the Attributes
        ///  flags are identical to those specified in KERB_SID_AND_ATTRIBUTES.
        /// </summary>
        public Attributes_Values Attributes;
    }

    /// <summary>
    ///  The NTLM_SUPPLEMENTAL_CREDENTIAL structure is used to
    ///  encode the credentials that the NTLM security protocol
    ///  uses, specifically the LAN Manager hash (LM OWF) and
    ///  the NT hash (NT OWF).  Generating the hashes encoded
    ///  in this structure is not addressed in the PAC Data
    ///  Structure specification.  Details on how the hashes
    ///  are created are as specified in [MS-NLMP]. The PAC
    ///  buffer Type is included only when PKINIT [MS-PKCA]
    ///  is used to authenticate the user. The NTLM_SUPPLEMENTAL_CREDENTIAL
    ///  structure is marshaled by RPC [MS-RPCE].
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_msv1_0_supplemental_credential_.xml
    //  </remarks>
    public partial struct _NTLM_SUPPLEMENTAL_CREDENTIAL
    {

        /// <summary>
        ///  A 32-bit unsigned integer that defines the credential
        ///  version. This field MUST be 0x00000000.
        /// </summary>
        public _NTLM_SUPPLEMENTAL_CREDENTIAL_Version_Values Version;

        /// <summary>
        ///  A 32-bit unsigned integer containing flags that define
        ///  the credential options. Flags MUST contain one of the
        ///  following values.
        /// </summary>
        public _NTLM_SUPPLEMENTAL_CREDENTIAL_Flags_Values Flags;

        /// <summary>
        ///  A 16-element array of unsigned 8-bit integers that define
        ///  the LM OWF. The LmPassword  member MUST be ignored
        ///  if the L flag is not set in the Flags  member.
        /// </summary>
        [Inline()]
        [StaticSize(16, StaticSizeMode.Elements)]
        public byte[] LmPassword;

        /// <summary>
        ///  A 16-element array of unsigned 8-bit integers that define
        ///  the NT OWF. The NtPassword  member MUST be ignored
        ///  if the N flag is not set in the Flags  member. 
        /// </summary>
        [Inline()]
        [StaticSize(16, StaticSizeMode.Elements)]
        public byte[] NtPassword;
    }

    /// <summary>
    /// _NTLM supplemental credential version values
    /// </summary>
    public enum _NTLM_SUPPLEMENTAL_CREDENTIAL_Version_Values : uint
    {

        /// <summary>
        ///  Possible value.
        /// </summary>
        V1 = 0x00000000,
    }

    /// <summary>
    /// NTLM supplemental credential flags values
    /// </summary>
    [Flags()]
    public enum _NTLM_SUPPLEMENTAL_CREDENTIAL_Flags_Values : uint
    {
        /// <summary>
        /// Indicates that neither LM nor NT OWF member is present and valid.
        /// </summary>
        None = 0x00000000,

        /// <summary>
        ///  Indicates that the LM OWF member is present and valid.
        /// </summary>
        L = 0x00000001,

        /// <summary>
        ///  Indicates that the NT OWF member is present and valid.
        /// </summary>
        N = 0x00000002,
    }

    /// <summary>
    ///  The S4U_DELEGATION_INFO structure  lists the services
    ///  that have been delegated through this Kerberos client
    ///  and subsequent services or servers. The list is used
    ///  only in a  Service for User to Proxy (S4U2proxy) [MS-SFU]
    ///  request . 				This feature could be used multiple times
    ///  in succession from service to service, which is useful
    ///  for auditing purposes Constrained delegation support
    ///  is present in , , and .. 			The S4U_DELEGATION_INFO
    ///  structure is marshaled by RPC [MS-RPCE]. 
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_constrained_delegation_information.xml
    //  </remarks>
    public partial struct _S4U_DELEGATION_INFO
    {

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that MUST contain the
        ///  name of the principal to whom the application can forward
        ///  the ticket.
        /// </summary>
        public _RPC_UNICODE_STRING S4U2proxyTarget;

        /// <summary>
        ///  MUST be the number of elements in the S4UTransitedServices
        ///  array.
        /// </summary>
        public uint TransitedListSize;

        /// <summary>
        ///  MUST contain the list of all services that have been
        ///  delegated through by this client and subsequent services
        ///  or servers.
        /// </summary>
        [Size("TransitedListSize")]
        public _RPC_UNICODE_STRING[] S4UTransitedServices;
    }

    /// <summary>
    ///  The KERB_SID_AND_ATTRIBUTES structure represents a SID
    ///  and its attributes for use in Kerberos authentication.
    ///   It is sent within the KERB_VALIDATION_INFO structure
    ///  and used to include additional information about the
    ///  group that the SID references.The format of the KERB_SID_AND_ATTRIBUTES
    ///  structure is defined as follows:
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_kerb_sid_and_attributes.xml
    //  </remarks>
    public partial struct KERB_SID_AND_ATTRIBUTES
    {

        /// <summary>
        ///  A ptr to a SID structure.
        /// </summary>
        [StaticSize(1, StaticSizeMode.Elements)]
        public _RPC_SID[] SID;

        /// <summary>
        ///  A set of bit flags that describe attributes of the SID.
        /// </summary>
        public Attributes_Values Attributes;
    }

    /// <summary>
    /// A set of bit flags that describe attributes of the SID
    /// </summary>
    [Flags()]
    public enum Attributes_Values : uint
    {

        /// <summary>
        ///  This setting means that the group is mandatory for the
        ///  user and cannot be disabled.  Corresponds to SE_GROUP_MANDATORY.
        ///  For more information, see [SIDATT].
        /// </summary>
        Mandatory = 0x00000001,

        /// <summary>
        ///  This setting means that the group should be marked as
        ///  enabled by default.  Corresponds to SE_GROUP_ENABLED_BY_DEFAULT.
        ///  For more information, see [SIDATT].
        /// </summary>
        EnabledByDefault = 0x00000002,

        /// <summary>
        ///  This setting means that the group is enabled for use.
        ///   Corresponds to SE_GROUP_ENABLED. For more information,
        ///  see  [SIDATT].
        /// </summary>
        Enabled = 0x00000004,

        /// <summary>
        ///  This setting means that the group can be assigned as
        ///  an owner of a resource.  Corresponds to SE_GROUP_OWNER.
        ///  For more information, see  [SIDATT].
        /// </summary>
        Owner = 0x00000008,

        /// <summary>
        ///  This setting means that the group is a domain-local
        ///  or resource group.  Corresponds to SE_GROUP_RESOURCE.
        ///  For more information, see [SIDATT].
        /// </summary>
        Resource = 0x20000000,
    }

    /// <summary>
    ///  The KERB_VALIDATION_INFO structure defines the user's
    ///  logon and authorization information provided by the
    ///  DC. A ptr to the KERB_VALIDATION_INFO structure
    ///  is serialized into an array of bytes and then placed
    ///  after the Buffers array of the topmost PACTYPE structure
    ///  (section ), at the offset specified in the Offset field
    ///  of the corresponding PAC_INFO_BUFFER structure (section
    ///  ) in the Buffers array. The ulType field of the corresponding
    ///  PAC_INFO_BUFFER structure is set to 0x00000001.The
    ///  KERB_VALIDATION_INFO structure is a subset of the NETLOGON_VALIDATION_SAM_INFO4
    ///  structure ([MS-NRPC] section ). It is a subset due
    ///  to historical reasons and to the use of the common
    ///  Active Directory to generate this information. NTLM
    ///  uses the NETLOGON_VALIDATION_SAM_INFO4 structure in
    ///  the context of the server to domain controller exchange,
    ///  as described in [MS-APDS] section. Consequently,
    ///  the  KERB_VALIDATION_INFO structure includes NTLM-specific
    ///  fields. Fields that are common to the  KERB_VALIDATION_INFO
    ///  and the NETLOGON_VALIDATION_SAM_INFO4 structures, and
    ///  which are specific to the NTLM authentication operation,
    ///  are not used with Kerberos authentication.	The KERB_VALIDATION_INFO
    ///  structure is marshaled by RPC [MS-RPCE].The KERB_VALIDATION_INFO
    ///  structure is defined as follows:
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_kerb_validation_info.xml
    //  </remarks>
    public partial struct KERB_VALIDATION_INFO
    {

        /// <summary>
        ///  A _FILETIME structure that contains the user account's
        ///  lastLogonTimestamp attribute ([MS-ADA1] section) value
        ///  for interactive logon and SHOULD be 0 for network logon.
        /// </summary>
        public _FILETIME LogonTime;

        /// <summary>
        ///  A _FILETIME structure that contains the time the client's
        ///  logon session should expire. If the session should
        ///  not expire, this structure SHOULD have the dwHighDateTime
        ///  member set to 0x7FFFFFFF and the dwLowDateTime member
        ///  set to 0xFFFFFFFF. A recipient of the PAC SHOULD enforces
        ///  the LogoffTime value for SMB connections only. Use
        ///  this value as an indicator of when to warn the user
        ///  that the allowed time is due to expire.
        /// </summary>
        public _FILETIME LogoffTime;

        /// <summary>
        ///  A _FILETIME structure that contains LogoffTime minus
        ///  the user account's forceLogoff attribute ([MS-ADA1]
        ///  section) value.  If the client should not be logged
        ///  off, this structure SHOULD have the dwHighDateTime
        ///  member set to 0x7FFFFFFF and the dwLowDateTime member
        ///  set to 0xFFFFFFFF. The Kerberos service ticket end
        ///  time is a replacement for KickOffTime. The service
        ///  ticket lifetime SHOULD NOT be set longer than the KickOffTime
        ///  of an account. A recipient of the PAC SHOULD enforces
        ///  the KickoffTime value for SMB connections only.  use
        ///  this value as the indicator of when the client should
        ///  be forcibly disconnected.
        /// </summary>
        public _FILETIME KickOffTime;

        /// <summary>
        ///  A _FILETIME structure that contains the user account's
        ///  pwdLastSet attribute ([MS-ADA3] section) value for
        ///  interactive logon and SHOULD be 0 for network logon
        ///  .  If the password was never set, this structure MUST
        ///  have the dwHighDateTime member set to 0x00000000 and
        ///  the dwLowDateTime member set to 0x00000000.
        /// </summary>
        public _FILETIME PasswordLastSet;

        /// <summary>
        ///  A _FILETIME structure that contains the time at which
        ///  the client's password is allowed to change for interactive
        ///  logon and SHOULD be 0 for network logon.  If there
        ///  is no restriction on when the client may change the
        ///  password, this member MUST be set to the time of log
        ///  on.
        /// </summary>
        public _FILETIME PasswordCanChange;

        /// <summary>
        ///  A _FILETIME structure that contains the time at which
        ///  the client's password expires for interactive logon
        ///  and SHOULD be 0 for network logon.  If the password
        ///  will not expire, this structure MUST have the dwHighDateTime
        ///  member set to 0x7FFFFFFF and the dwLowDateTime member
        ///  set to 0xFFFFFFFF. 
        /// </summary>
        public _FILETIME PasswordMustChange;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's samAccountName attribute ([MS-ADA3] section
        ///  ) value for interactive logon and SHOULD be 0 for network
        ///  logon.
        /// </summary>
        public _RPC_UNICODE_STRING EffectiveName;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's full name for interactive logon and SHOULD
        ///  be 0 for network logon. If FullName is omitted, this
        ///  member MUST contain a RPC_UNICODE_STRING structure
        ///  with the Length member set to zero.
        /// </summary>
        public _RPC_UNICODE_STRING FullName;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's scriptPath attribute ([MS-ADA3] section )
        ///  value for interactive logon and SHOULD be 0 for network
        ///  logon.  If no LogonScript is configured for the user,
        ///  this member MUST contain a RPC_UNICODE_STRING structure
        ///  with the Length member set to zero.
        /// </summary>
        public _RPC_UNICODE_STRING LogonScript;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's profilePath attribute ([MS-ADA3] section
        ///  ) value for interactive logon and SHOULD be 0 for network
        ///  logon.  If no ProfilePath is configured for the user,
        ///  this member MUST contain a RPC_UNICODE_STRING structure
        ///  with the Length member set to zero.
        /// </summary>
        public _RPC_UNICODE_STRING ProfilePath;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's homeDirectory attribute ([MS-ADA1] section
        ///  ) value for interactive logon and SHOULD be 0 for network
        ///  logon.  If no HomeDirectory is configured for the user,
        ///  this member MUST contain a RPC_UNICODE_STRING structure
        ///  with the Length member set to zero.
        /// </summary>
        public _RPC_UNICODE_STRING HomeDirectory;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the user
        ///  account's homeDrive attribute ([MS-ADA1] section )
        ///  value for interactive logon and SHOULD be 0 for network
        ///  logon . This member MUST be populated if HomeDirectory
        ///  contains a UNC path.  If no HomeDirectoryDrive is configured
        ///  for the user, this member MUST contain a RPC_UNICODE_STRING
        ///  structure with the Length member set to zero.
        /// </summary>
        public _RPC_UNICODE_STRING HomeDirectoryDrive;

        /// <summary>
        ///  A 16-bit unsigned integer that SHOULD be zero.
        /// </summary>
        public ushort LogonCount;

        /// <summary>
        ///  A 16-bit unsigned integer that contains the user account's
        ///  badPwdCount attribute ([MS-ADA1] section) value for
        ///  interactive logon and SHOULD be 0 for network logon
        ///  t. 
        /// </summary>
        public ushort BadPasswordCount;

        /// <summary>
        ///  A 32-bit unsigned integer that contains the RID of the
        ///  account. If the UserId member equals 0x00000000, the
        ///  first group SID in this member is the SID for this
        ///  account
        /// </summary>
        public uint UserId;

        /// <summary>
        ///  A 32-bit unsigned integer that contains the RID for
        ///  the primary group to which this account belongs.
        /// </summary>
        public uint PrimaryGroupId;

        /// <summary>
        ///  A 32-bit unsigned integer that contains the number of
        ///  groups within the account domain to which the account
        ///  belongs. 
        /// </summary>
        public uint GroupCount;

        /// <summary>
        ///  A ptr to a list of GROUP_MEMBERSHIP structures that
        ///  contains the groups  to which the account belongs in
        ///  the account domain. The number of groups in this list
        ///  MUST be equal to GroupCount.
        /// </summary>
        [Size("GroupCount")]
        public _GROUP_MEMBERSHIP[] GroupIds;

        /// <summary>
        ///  A 32-bit unsigned integer that contains a set of bit
        ///  flags that describe the valid members in this structure.
        ///  
        /// </summary>
        public UserFlags_Values UserFlags;

        /// <summary>
        ///  A session key that is used for cryptographic operations
        ///  on a session. This field is valid only when authentication
        ///  is performed using NTLM.  For any other protocol, this
        ///  field MUST be 0.
        /// </summary>
        [Inline()]
        [StaticSize(16, StaticSizeMode.Elements)]
        public byte[] UserSessionKey;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the NetBIOS
        ///  name of the Kerberos KDC that performed the authentication
        ///  server (AS) ticket request. 
        /// </summary>
        public _RPC_UNICODE_STRING LogonServer;

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that contains the NetBIOS
        ///  name of the domain to which this account belongs. 
        /// </summary>
        public _RPC_UNICODE_STRING LogonDomainName;

        /// <summary>
        ///  A SID structure that contains the SID for the domain
        ///  specified in LogonDomainName. This member is used
        ///  in conjunction with the UserId, PrimaryGroupId, and
        ///  GroupIds members to create the user and group SIDs
        ///  for the client. 
        /// </summary>
        [StaticSize(1, StaticSizeMode.Elements)]
        public _RPC_SID[] LogonDomainId;

        /// <summary>
        ///  A two-element array of unsigned 32-bit integers. This
        ///  member is reserved, and each element of the array MUST
        ///  be equal to 0x00000000 and MUST be ignored on receipt.
        /// </summary>
        [Inline()]
        [StaticSize(2, StaticSizeMode.Elements)]
        public KERB_VALIDATION_INFO_Reserved1_Values[] Reserved1;

        /// <summary>
        ///  A 32-bit unsigned integer that contains a set of bit
        ///  flags that represent information about this account.
        ///   This field carries the UserAccountControl information
        ///  from the corresponding Security Account Manager field,
        ///  as specified in [MS-SAMR].
        /// </summary>
        public uint UserAccountControl;

        /// <summary>
        ///  A seven-element array of unsigned 32-bit integers. 
        ///  This member is reserved, and each element of the array
        ///  MUST be equal to 0x00000000 and MUST be ignored on
        ///  receipt. 
        /// </summary>
        [Inline()]
        [StaticSize(7, StaticSizeMode.Elements)]
        public KERB_VALIDATION_INFO_Reserved3_Values[] Reserved3;

        /// <summary>
        ///  A 32-bit unsigned integer that contains the total number
        ///  of SIDs present in the ExtraSids member.  If this member
        ///  is not zero then the corresponding flag MUST be set
        ///  in the UserFlags member. 
        /// </summary>
        public uint SidCount;

        /// <summary>
        ///  A ptr to a list of KERB_SID_AND_ATTRIBUTES  structures
        ///  that contain a list of SIDs corresponding to additional
        ///  groups to which the principal belongs. This member
        ///  is not NULL  only if the corresponding flag has been
        ///  set in the UserFlags member.  If the UserId member
        ///  equals 0x00000000, the first group SID in this member
        ///  is the SID for this account. 
        /// </summary>
        [Size("SidCount")]
        public KERB_SID_AND_ATTRIBUTES[] ExtraSids;

        /// <summary>
        ///  A SID structure that contains the SID of the domain
        ///  for the server whose resources the client is authenticating
        ///  to. This member is used in conjunction with the ResourceGroupIds
        ///  member to create the group SIDs for the user.  If this
        ///  member is populated then the corresponding flag MUST
        ///  be set in the UserFlags member.
        /// </summary>
        [StaticSize(1, StaticSizeMode.Elements)]
        public _RPC_SID[] ResourceGroupDomainSid;

        /// <summary>
        ///  A 32-bit unsigned integer that contains the number of
        ///  resource group identifiers stored in ResourceGroupIds.
        ///   If this member is not zero then the corresponding
        ///  flag MUST be set in the UserFlags member. 
        /// </summary>
        public uint ResourceGroupCount;

        /// <summary>
        ///  A ptr to a list of GROUP_MEMBERSHIP structures that
        ///  contain the RIDs and attributes of the account's groups
        ///  in the resource domain. If this member is not NULL
        ///  then the corresponding flag MUST be set in the UserFlags
        ///  member.
        /// </summary>
        [Size("ResourceGroupCount")]
        public _GROUP_MEMBERSHIP[] ResourceGroupIds;
    }

    /// <summary>
    /// A 32-bit unsigned integer that contains a set of bit flags 
    /// that describe the valid members in this structure.
    /// </summary>
    [Flags()]
    public enum UserFlags_Values : uint
    {

        /// <summary>
        ///  Authentication was done via the GUEST account; no password
        ///  was used.
        /// </summary>
        UseGuestAccount = 0x00000001,

        /// <summary>
        ///  No encryption is available.
        /// </summary>
        NoEncryption = 0x00000002,

        /// <summary>
        ///  Cached account used for logon; no domain controller
        ///  was contacted.
        /// </summary>
        UseCachedAccount = 0x00000004,

        /// <summary>
        ///  LAN Manager key was used for authentication.
        /// </summary>
        UseLanManagerKey = 0x00000008,

        /// <summary>
        ///  Sub-authentication used; session key came from the sub-authentication
        ///  package.
        /// </summary>
        UseSubAuthentication = 0x00000040,

        /// <summary>
        ///  Indicates that the account is a machine account.
        /// </summary>
        MachineAccount = 0x00000080,

        /// <summary>
        ///  Indicates that the domain controller understands NTLMv2.
        /// </summary>
        NTLMv2 = 0x00000100,

        /// <summary>
        ///  Indicates that a profile path was returned.
        /// </summary>
        ProfilePath = 0x00000400,

        /// <summary>
        ///  Indicates that the ExtraSids field is populated and
        ///  contains additional SIDs.
        /// </summary>
        ExtraSids = 0x00000020,

        /// <summary>
        ///  Indicates that the ResourceGroupIds field is populated.
        /// </summary>
        ResourceGroupIds = 0x00000200,

        /// <summary>
        ///  Indicates that a PKINIT (as specified in [RFC4556])
        ///  logon was performed.
        /// </summary>
        Pkinit = 0x00010000,
    }

    /// <summary>
    /// KERB_VALIDATION_INFO_Reserved1_Values
    /// </summary>
    public enum KERB_VALIDATION_INFO_Reserved1_Values : uint
    {

        /// <summary>
        ///  Possible value.
        /// </summary>
        V1 = 0x00000000,
    }

    /// <summary>
    /// KERB_VALIDATION_INFO_Reserved3_Values
    /// </summary>
    public enum KERB_VALIDATION_INFO_Reserved3_Values : uint
    {

        /// <summary>
        ///  Possible value.
        /// </summary>
        V1 = 0x00000000,
    }

    /// <summary>
    ///  The SECPKG_SUPPLEMENTAL_CRED structure defines the name
    ///  of the security package that requires supplemental
    ///  credentials and the credential buffer for that package.
    ///  The SECPKG_SUPPLEMENTAL_CRED structure is marshaled
    ///  by RPC [MS-RPCE].
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_secpkg_supplemental_cred_.xml
    //  </remarks>
    public partial struct _SECPKG_SUPPLEMENTAL_CRED
    {

        /// <summary>
        ///  A RPC_UNICODE_STRING structure that MUST store the name
        ///  of the security protocol for which the supplemental
        ///  credentials are being presented.The only package name
        ///  that Microsoft KDCs use is "NTLM". If any other package
        ///  name is provided,  discards the supplemental credential.
        /// </summary>
        public _RPC_UNICODE_STRING PackageName;

        /// <summary>
        ///  A 32-bit unsigned integer that MUST specify the length,
        ///  in bytes, of the data in the Credentials  member.
        /// </summary>
        public uint CredentialSize;

        /// <summary>
        ///  A ptr that MUST reference the serialized credentials
        ///  being presented to the security protocol named in PackageName.
        /// </summary>
        [Size("CredentialSize")]
        public byte[] Credentials;

        /// <summary>
        /// Get _NTLM_SUPPLEMENTAL_CREDENTIAL from Credentials.
        /// Credentials is a pointer, pointing to a byte array.
        /// The byte array is the NDR-encoded _NTLM_SUPPLEMENTAL_CREDENTIAL.
        /// </summary>
        /// <returns>the embedded _NTLM_SUPPLEMENTAL_CREDENTIAL instance.</returns>
        // Property should not be used in structure. Suppress this message.
        [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
        public _NTLM_SUPPLEMENTAL_CREDENTIAL GetNtlmCredential()
        {
            return PacUtility.MemoryToObject<_NTLM_SUPPLEMENTAL_CREDENTIAL>(Credentials, 0, Credentials.Length);
        }

        /// <summary>
        /// Set _NTLM_SUPPLEMENTAL_CREDENTIAL to Credentials.
        /// Credentials is a pointer, pointing to a byte array.
        /// The byte array is the NDR-encoded _NTLM_SUPPLEMENTAL_CREDENTIAL.
        /// </summary>
        /// <param name="ntlmCredential">the embedded _NTLM_SUPPLEMENTAL_CREDENTIAL instance.</param>
        public void SetNtlmCredential(_NTLM_SUPPLEMENTAL_CREDENTIAL ntlmCredential)
        {
            Credentials = PacUtility.ObjectToMemory<_NTLM_SUPPLEMENTAL_CREDENTIAL>(ntlmCredential);
            CredentialSize = (uint)Credentials.Length;
        }
    }

    /// <summary>
    ///  The PAC_CREDENTIAL_DATA structure defines an array of
    ///  security package-specific credentials that are provided
    ///  to the Kerberos client. The PAC_CREDENTIAL_DATA structure
    ///  is marshaled by RPC [MS-RPCE].
    /// </summary>
    //  <remarks>
    //   file:///D:/temp/TDXML/Old/2008_12_18_09_20/2008_12_18_09_20--Protocol_XML/ProtoDoc/Protocol/Main/Protocol/protocol/_rfc_ms-pac_pac_credential_data.xml
    //  </remarks>
    public partial struct _PAC_CREDENTIAL_DATA
    {

        /// <summary>
        ///  A 32-bit unsigned integer that defines the number of
        ///  elements in the Credentials member.
        /// </summary>
        public uint CredentialCount;

        /// <summary>
        ///  An array of SECPKG_SUPPLEMENTAL_CRED structures that
        ///  define the supplemental credentials.
        /// </summary>
        [Inline()]
        [Size("CredentialCount")]
        public _SECPKG_SUPPLEMENTAL_CRED[] Credentials;
    }
}
