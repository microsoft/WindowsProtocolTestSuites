// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Text;

using Microsoft.Protocols.TestTools.StackSdk.Networking.Rpce;

namespace Microsoft.Protocols.TestTools.StackSdk.Security.Samr
{
    internal static class SamrRpcStubFormatString
    {
        // SAMR type format string generated by midl, converted to byte array.
        internal static byte[] TypeFormatString
        {
            get
            {
                return RpceStubHelper.CreateFormatStringByteArray(RpceStubHelper.GetPlatform() == RpceStubTargetPlatform.X86 ? X86_TYPE_FORMAT_STRING : X64_TYPE_FORMAT_STRING);
            }
        }

        // SAMR proc format string generated by midl, converted to byte array.
        internal static byte[] ProcFormatString
        {
            get
            {
                return RpceStubHelper.CreateFormatStringByteArray(RpceStubHelper.GetPlatform() == RpceStubTargetPlatform.X86 ? X86_PROC_FORMAT_STRING : X64_PROC_FORMAT_STRING);
            }
        }

        // SAMR offset of proc format string for every procedure, copied from MIDL generated stub.
        // Version: February 28, 2011
        internal static ushort[] ProcFormatStringOffsetTable
        {
            get
            {
                return RpceStubHelper.GetPlatform() == RpceStubTargetPlatform.X86 ? X86_ProcFormatStringOffsetTable : X64_ProcFormatStringOffsetTable;
            }
        }
        #region X86
        // SAMR offset of proc format string for every procedure, copied from MIDL generated stub.
        // Version: February 28, 2011
        internal static readonly ushort[] X86_ProcFormatStringOffsetTable = new ushort[]
        {
            0,
            54,
            96,
            150,
            204,
            232,
            286,
            352,
            412,
            466,
            520,
            586,
            652,
            718,
            790,
            856,
            922,
            976,
            1042,
            1108,
            1168,
            1222,
            1276,
            1330,
            1372,
            1420,
            1468,
            1522,
            1582,
            1636,
            1690,
            1732,
            1780,
            1828,
            1876,
            1936,
            1978,
            2032,
            2086,
            2188,
            2236,
            2320,
            2380,
            2408,
            2436,
            2484,
            2532,
            2586,
            2640,
            2724,
            2784,
            2862,
            2946,
            2994,
            3042,
            3100,
            3176,
            3222,
            3276,
            3330,
            3358,
            3386,
            3414,
            3474,
            3502,
            3580,
            3634,
            3686,
            3738,
            3766
        };

        // SAMR proc format string generated by midl
        // Version: February 28, 2011
        private const string X86_PROC_FORMAT_STRING = @"
	/* Procedure SamrConnect */

			0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/*  2 */	NdrFcLong( 0x0 ),	/* 0 */
/*  6 */	NdrFcShort( 0x0 ),	/* 0 */
/*  8 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 10 */	0x31,		/* FC_BIND_GENERIC */
			0x4,		/* 4 */
/* 12 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 14 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 16 */	NdrFcShort( 0x22 ),	/* 34 */
/* 18 */	NdrFcShort( 0x40 ),	/* 64 */
/* 20 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 22 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 24 */	NdrFcShort( 0x0 ),	/* 0 */
/* 26 */	NdrFcShort( 0x0 ),	/* 0 */
/* 28 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 30 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 32 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 34 */	NdrFcShort( 0x2 ),	/* Type Offset=2 */

	/* Parameter ServerHandle */

/* 36 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 38 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 40 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter DesiredAccess */

/* 42 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 44 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 46 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 48 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 50 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 52 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCloseHandle */

/* 54 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 56 */	NdrFcLong( 0x0 ),	/* 0 */
/* 60 */	NdrFcShort( 0x1 ),	/* 1 */
/* 62 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 64 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 66 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 68 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 70 */	NdrFcShort( 0x38 ),	/* 56 */
/* 72 */	NdrFcShort( 0x40 ),	/* 64 */
/* 74 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 76 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 78 */	NdrFcShort( 0x0 ),	/* 0 */
/* 80 */	NdrFcShort( 0x0 ),	/* 0 */
/* 82 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter SamHandle */

/* 84 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 86 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 88 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 90 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 92 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 94 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetSecurityObject */

/* 96 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 98 */	NdrFcLong( 0x0 ),	/* 0 */
/* 102 */	NdrFcShort( 0x2 ),	/* 2 */
/* 104 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 106 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 108 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 110 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 112 */	NdrFcShort( 0x2c ),	/* 44 */
/* 114 */	NdrFcShort( 0x8 ),	/* 8 */
/* 116 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 118 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 120 */	NdrFcShort( 0x0 ),	/* 0 */
/* 122 */	NdrFcShort( 0x1 ),	/* 1 */
/* 124 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 126 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 128 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 130 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SecurityInformation */

/* 132 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 134 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 136 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter SecurityDescriptor */

/* 138 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 140 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 142 */	NdrFcShort( 0x34 ),	/* Type Offset=52 */

	/* Return value */

/* 144 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 146 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 148 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQuerySecurityObject */

/* 150 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 152 */	NdrFcLong( 0x0 ),	/* 0 */
/* 156 */	NdrFcShort( 0x3 ),	/* 3 */
/* 158 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 160 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 162 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 164 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 166 */	NdrFcShort( 0x2c ),	/* 44 */
/* 168 */	NdrFcShort( 0x8 ),	/* 8 */
/* 170 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 172 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 174 */	NdrFcShort( 0x1 ),	/* 1 */
/* 176 */	NdrFcShort( 0x0 ),	/* 0 */
/* 178 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 180 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 182 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 184 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SecurityInformation */

/* 186 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 188 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 190 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter SecurityDescriptor */

/* 192 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 194 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 196 */	NdrFcShort( 0x46 ),	/* Type Offset=70 */

	/* Return value */

/* 198 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 200 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 202 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum4NotUsedOnWire */

/* 204 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 206 */	NdrFcLong( 0x0 ),	/* 0 */
/* 210 */	NdrFcShort( 0x4 ),	/* 4 */
/* 212 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 214 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 216 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 218 */	NdrFcShort( 0x0 ),	/* 0 */
/* 220 */	NdrFcShort( 0x0 ),	/* 0 */
/* 222 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 224 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 226 */	NdrFcShort( 0x0 ),	/* 0 */
/* 228 */	NdrFcShort( 0x0 ),	/* 0 */
/* 230 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrLookupDomainInSamServer */


	/* Parameter IDL_handle */

/* 232 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 234 */	NdrFcLong( 0x0 ),	/* 0 */
/* 238 */	NdrFcShort( 0x5 ),	/* 5 */
/* 240 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 242 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 244 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 246 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 248 */	NdrFcShort( 0x24 ),	/* 36 */
/* 250 */	NdrFcShort( 0x8 ),	/* 8 */
/* 252 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 254 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 256 */	NdrFcShort( 0x1 ),	/* 1 */
/* 258 */	NdrFcShort( 0x1 ),	/* 1 */
/* 260 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 262 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 264 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 266 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 268 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 270 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 272 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter DomainId */

/* 274 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 276 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 278 */	NdrFcShort( 0x7a ),	/* Type Offset=122 */

	/* Return value */

/* 280 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 282 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 284 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateDomainsInSamServer */

/* 286 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 288 */	NdrFcLong( 0x0 ),	/* 0 */
/* 292 */	NdrFcShort( 0x6 ),	/* 6 */
/* 294 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 296 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 298 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 300 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 302 */	NdrFcShort( 0x48 ),	/* 72 */
/* 304 */	NdrFcShort( 0x40 ),	/* 64 */
/* 306 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 308 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 310 */	NdrFcShort( 0x1 ),	/* 1 */
/* 312 */	NdrFcShort( 0x0 ),	/* 0 */
/* 314 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 316 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 318 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 320 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 322 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 324 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 326 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 328 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 330 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 332 */	NdrFcShort( 0xb0 ),	/* Type Offset=176 */

	/* Parameter PreferedMaximumLength */

/* 334 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 336 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 338 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 340 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 342 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 344 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 346 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 348 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 350 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenDomain */

/* 352 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 354 */	NdrFcLong( 0x0 ),	/* 0 */
/* 358 */	NdrFcShort( 0x7 ),	/* 7 */
/* 360 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 362 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 364 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 366 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 368 */	NdrFcShort( 0x2c ),	/* 44 */
/* 370 */	NdrFcShort( 0x40 ),	/* 64 */
/* 372 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 374 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 376 */	NdrFcShort( 0x0 ),	/* 0 */
/* 378 */	NdrFcShort( 0x1 ),	/* 1 */
/* 380 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 382 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 384 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 386 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 388 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 390 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 392 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DomainId */

/* 394 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 396 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 398 */	NdrFcShort( 0x9e ),	/* Type Offset=158 */

	/* Parameter DomainHandle */

/* 400 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 402 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 404 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Return value */

/* 406 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 408 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 410 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationDomain */

/* 412 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 414 */	NdrFcLong( 0x0 ),	/* 0 */
/* 418 */	NdrFcShort( 0x8 ),	/* 8 */
/* 420 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 422 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 424 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 426 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 428 */	NdrFcShort( 0x2a ),	/* 42 */
/* 430 */	NdrFcShort( 0x8 ),	/* 8 */
/* 432 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 434 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 436 */	NdrFcShort( 0x1 ),	/* 1 */
/* 438 */	NdrFcShort( 0x0 ),	/* 0 */
/* 440 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 442 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 444 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 446 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 448 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 450 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 452 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 454 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 456 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 458 */	NdrFcShort( 0x126 ),	/* Type Offset=294 */

	/* Return value */

/* 460 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 462 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 464 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationDomain */

/* 466 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 468 */	NdrFcLong( 0x0 ),	/* 0 */
/* 472 */	NdrFcShort( 0x9 ),	/* 9 */
/* 474 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 476 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 478 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 480 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 482 */	NdrFcShort( 0x2a ),	/* 42 */
/* 484 */	NdrFcShort( 0x8 ),	/* 8 */
/* 486 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 488 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 492 */	NdrFcShort( 0x1 ),	/* 1 */
/* 494 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 496 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 498 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 500 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 502 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 504 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 506 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter DomainInformation */

/* 508 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 510 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 512 */	NdrFcShort( 0x27c ),	/* Type Offset=636 */

	/* Return value */

/* 514 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 516 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 518 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateGroupInDomain */

/* 520 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 522 */	NdrFcLong( 0x0 ),	/* 0 */
/* 526 */	NdrFcShort( 0xa ),	/* 10 */
/* 528 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 530 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 532 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 534 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 536 */	NdrFcShort( 0x2c ),	/* 44 */
/* 538 */	NdrFcShort( 0x5c ),	/* 92 */
/* 540 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 542 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 544 */	NdrFcShort( 0x0 ),	/* 0 */
/* 546 */	NdrFcShort( 0x1 ),	/* 1 */
/* 548 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 550 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 552 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 554 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 556 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 558 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 560 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter DesiredAccess */

/* 562 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 564 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 566 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupHandle */

/* 568 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 570 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 572 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Parameter RelativeId */

/* 574 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 576 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 578 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 580 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 582 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 584 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateGroupsInDomain */

/* 586 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 588 */	NdrFcLong( 0x0 ),	/* 0 */
/* 592 */	NdrFcShort( 0xb ),	/* 11 */
/* 594 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 596 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 598 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 600 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 602 */	NdrFcShort( 0x48 ),	/* 72 */
/* 604 */	NdrFcShort( 0x40 ),	/* 64 */
/* 606 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 608 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 610 */	NdrFcShort( 0x1 ),	/* 1 */
/* 612 */	NdrFcShort( 0x0 ),	/* 0 */
/* 614 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 616 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 618 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 620 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 622 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 624 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 626 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 628 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 630 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 632 */	NdrFcShort( 0xb0 ),	/* Type Offset=176 */

	/* Parameter PreferedMaximumLength */

/* 634 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 636 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 638 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 640 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 642 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 644 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 646 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 648 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 650 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateUserInDomain */

/* 652 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 654 */	NdrFcLong( 0x0 ),	/* 0 */
/* 658 */	NdrFcShort( 0xc ),	/* 12 */
/* 660 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 662 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 664 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 666 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 668 */	NdrFcShort( 0x2c ),	/* 44 */
/* 670 */	NdrFcShort( 0x5c ),	/* 92 */
/* 672 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 674 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 676 */	NdrFcShort( 0x0 ),	/* 0 */
/* 678 */	NdrFcShort( 0x1 ),	/* 1 */
/* 680 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 682 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 684 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 686 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 688 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 690 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 692 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter DesiredAccess */

/* 694 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 696 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 698 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 700 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 702 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 704 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Parameter RelativeId */

/* 706 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 708 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 710 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 712 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 714 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 716 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateUsersInDomain */

/* 718 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 720 */	NdrFcLong( 0x0 ),	/* 0 */
/* 724 */	NdrFcShort( 0xd ),	/* 13 */
/* 726 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 728 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 730 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 732 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 734 */	NdrFcShort( 0x50 ),	/* 80 */
/* 736 */	NdrFcShort( 0x40 ),	/* 64 */
/* 738 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x7,		/* 7 */
/* 740 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 742 */	NdrFcShort( 0x1 ),	/* 1 */
/* 744 */	NdrFcShort( 0x0 ),	/* 0 */
/* 746 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 748 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 750 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 752 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 754 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 756 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 758 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserAccountControl */

/* 760 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 762 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 764 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 766 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 768 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 770 */	NdrFcShort( 0xb0 ),	/* Type Offset=176 */

	/* Parameter PreferedMaximumLength */

/* 772 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 774 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 776 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 778 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 780 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 782 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 784 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 786 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 788 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateAliasInDomain */

/* 790 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 792 */	NdrFcLong( 0x0 ),	/* 0 */
/* 796 */	NdrFcShort( 0xe ),	/* 14 */
/* 798 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 800 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 802 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 804 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 806 */	NdrFcShort( 0x2c ),	/* 44 */
/* 808 */	NdrFcShort( 0x5c ),	/* 92 */
/* 810 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 812 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 814 */	NdrFcShort( 0x0 ),	/* 0 */
/* 816 */	NdrFcShort( 0x1 ),	/* 1 */
/* 818 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 820 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 822 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 824 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AccountName */

/* 826 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 828 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 830 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter DesiredAccess */

/* 832 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 834 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 836 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasHandle */

/* 838 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 840 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 842 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Parameter RelativeId */

/* 844 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 846 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 848 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 850 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 852 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 854 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateAliasesInDomain */

/* 856 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 858 */	NdrFcLong( 0x0 ),	/* 0 */
/* 862 */	NdrFcShort( 0xf ),	/* 15 */
/* 864 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 866 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 868 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 870 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 872 */	NdrFcShort( 0x48 ),	/* 72 */
/* 874 */	NdrFcShort( 0x40 ),	/* 64 */
/* 876 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 878 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 880 */	NdrFcShort( 0x1 ),	/* 1 */
/* 882 */	NdrFcShort( 0x0 ),	/* 0 */
/* 884 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 886 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 888 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 890 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 892 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 894 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 896 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 898 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 900 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 902 */	NdrFcShort( 0xb0 ),	/* Type Offset=176 */

	/* Parameter PreferedMaximumLength */

/* 904 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 906 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 908 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 910 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 912 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 914 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 916 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 918 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 920 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetAliasMembership */

/* 922 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 924 */	NdrFcLong( 0x0 ),	/* 0 */
/* 928 */	NdrFcShort( 0x10 ),	/* 16 */
/* 930 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 932 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 934 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 936 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 938 */	NdrFcShort( 0x24 ),	/* 36 */
/* 940 */	NdrFcShort( 0x8 ),	/* 8 */
/* 942 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 944 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 946 */	NdrFcShort( 0x1 ),	/* 1 */
/* 948 */	NdrFcShort( 0x1 ),	/* 1 */
/* 950 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 952 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 954 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 956 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SidArray */

/* 958 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 960 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 962 */	NdrFcShort( 0x2ca ),	/* Type Offset=714 */

	/* Parameter Membership */

/* 964 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 966 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 968 */	NdrFcShort( 0x2ec ),	/* Type Offset=748 */

	/* Return value */

/* 970 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 972 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 974 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrLookupNamesInDomain */

/* 976 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 978 */	NdrFcLong( 0x0 ),	/* 0 */
/* 982 */	NdrFcShort( 0x11 ),	/* 17 */
/* 984 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 986 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 988 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 990 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 992 */	NdrFcShort( 0x2c ),	/* 44 */
/* 994 */	NdrFcShort( 0x8 ),	/* 8 */
/* 996 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 998 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 1000 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1002 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1004 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1006 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1008 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1010 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Count */

/* 1012 */	NdrFcShort( 0x88 ),	/* Flags:  in, by val, */
/* 1014 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1016 */	NdrFcShort( 0x300 ),	/* 768 */

	/* Parameter Names */

/* 1018 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1020 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1022 */	NdrFcShort( 0x30a ),	/* Type Offset=778 */

	/* Parameter RelativeIds */

/* 1024 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 1026 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1028 */	NdrFcShort( 0x2ec ),	/* Type Offset=748 */

	/* Parameter Use */

/* 1030 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 1032 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1034 */	NdrFcShort( 0x2ec ),	/* Type Offset=748 */

	/* Return value */

/* 1036 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1038 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 1040 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrLookupIdsInDomain */

/* 1042 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1044 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1048 */	NdrFcShort( 0x12 ),	/* 18 */
/* 1050 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 1052 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1054 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1056 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1058 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1060 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1062 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 1064 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 1066 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1068 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1070 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1072 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1074 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1076 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Count */

/* 1078 */	NdrFcShort( 0x88 ),	/* Flags:  in, by val, */
/* 1080 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1082 */	NdrFcShort( 0x332 ),	/* 818 */

	/* Parameter RelativeIds */

/* 1084 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1086 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1088 */	NdrFcShort( 0x340 ),	/* Type Offset=832 */

	/* Parameter Names */

/* 1090 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 1092 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1094 */	NdrFcShort( 0x378 ),	/* Type Offset=888 */

	/* Parameter Use */

/* 1096 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 1098 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1100 */	NdrFcShort( 0x2ec ),	/* Type Offset=748 */

	/* Return value */

/* 1102 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1104 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 1106 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenGroup */

/* 1108 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1110 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1114 */	NdrFcShort( 0x13 ),	/* 19 */
/* 1116 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 1118 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1120 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1122 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1124 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1126 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1128 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1130 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1132 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1134 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1136 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1138 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1140 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1142 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1144 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1146 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1148 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupId */

/* 1150 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1152 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1154 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupHandle */

/* 1156 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1158 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1160 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Return value */

/* 1162 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1164 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1166 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationGroup */

/* 1168 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1170 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1174 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1176 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1178 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1180 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1182 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1184 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1186 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1188 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 1190 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1192 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1194 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1196 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1198 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1200 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1202 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter GroupInformationClass */

/* 1204 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1206 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1208 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1210 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1212 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1214 */	NdrFcShort( 0x38c ),	/* Type Offset=908 */

	/* Return value */

/* 1216 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1218 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1220 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationGroup */

/* 1222 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1224 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1228 */	NdrFcShort( 0x15 ),	/* 21 */
/* 1230 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1232 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1234 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1236 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1238 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1240 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1242 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 1244 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1246 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1248 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1250 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1252 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1254 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1256 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter GroupInformationClass */

/* 1258 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1260 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1262 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1264 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1266 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1268 */	NdrFcShort( 0x3f0 ),	/* Type Offset=1008 */

	/* Return value */

/* 1270 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1272 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1274 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMemberToGroup */

/* 1276 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1278 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1282 */	NdrFcShort( 0x16 ),	/* 22 */
/* 1284 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1286 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1288 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1290 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1292 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1294 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1296 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 1298 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1302 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1304 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1306 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1308 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1310 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1312 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1314 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1316 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Attributes */

/* 1318 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1320 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1322 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1324 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1326 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1328 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteGroup */

/* 1330 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1332 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1336 */	NdrFcShort( 0x17 ),	/* 23 */
/* 1338 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1340 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 1342 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1344 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1346 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1348 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1350 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1352 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1354 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1356 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1358 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1360 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 1362 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1364 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 1366 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1368 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1370 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromGroup */

/* 1372 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1374 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1378 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1380 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1382 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1384 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1386 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1388 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1390 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1392 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 1394 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1396 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1398 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1400 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1402 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1404 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1406 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1408 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1410 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1412 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1414 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1416 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1418 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetMembersInGroup */

/* 1420 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1422 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1426 */	NdrFcShort( 0x19 ),	/* 25 */
/* 1428 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1430 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1432 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1434 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1436 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1438 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1440 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 1442 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1444 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1446 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1448 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1450 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1452 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1454 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Members */

/* 1456 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1458 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1460 */	NdrFcShort( 0x3fa ),	/* Type Offset=1018 */

	/* Return value */

/* 1462 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1464 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1466 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetMemberAttributesOfGroup */

/* 1468 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1470 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1474 */	NdrFcShort( 0x1a ),	/* 26 */
/* 1476 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1478 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1480 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1482 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1484 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1486 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1488 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 1490 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1494 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1496 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1498 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1500 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1502 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1504 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1506 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1508 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Attributes */

/* 1510 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1512 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1514 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1516 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1518 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1520 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenAlias */

/* 1522 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1524 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1528 */	NdrFcShort( 0x1b ),	/* 27 */
/* 1530 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 1532 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1534 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1536 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1538 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1540 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1542 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1544 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1546 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1548 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1550 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1552 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1554 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1556 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1558 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1560 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1562 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasId */

/* 1564 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1566 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1568 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasHandle */

/* 1570 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1572 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1574 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Return value */

/* 1576 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1578 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1580 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationAlias */

/* 1582 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1584 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1588 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1590 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1592 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1594 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1596 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1598 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1600 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1602 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 1604 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1606 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1608 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1610 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1612 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1614 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1616 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AliasInformationClass */

/* 1618 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1620 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1622 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1624 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1626 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1628 */	NdrFcShort( 0x422 ),	/* Type Offset=1058 */

	/* Return value */

/* 1630 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1632 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1634 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationAlias */

/* 1636 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1638 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1642 */	NdrFcShort( 0x1d ),	/* 29 */
/* 1644 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1646 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1648 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1650 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1652 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1654 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1656 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 1658 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1660 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1662 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1664 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1666 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1668 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1670 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AliasInformationClass */

/* 1672 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1674 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1676 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1678 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1680 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1682 */	NdrFcShort( 0x486 ),	/* Type Offset=1158 */

	/* Return value */

/* 1684 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1686 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1688 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteAlias */

/* 1690 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1692 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1696 */	NdrFcShort( 0x1e ),	/* 30 */
/* 1698 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1700 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 1702 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1704 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1706 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1708 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1710 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1712 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1714 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1716 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1718 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1720 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 1722 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1724 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 1726 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1728 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1730 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMemberToAlias */

/* 1732 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1734 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1738 */	NdrFcShort( 0x1f ),	/* 31 */
/* 1740 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1742 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1744 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1746 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1748 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1750 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1752 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 1754 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1756 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1758 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1760 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1762 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1764 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1766 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1768 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1770 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1772 */	NdrFcShort( 0x9e ),	/* Type Offset=158 */

	/* Return value */

/* 1774 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1776 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1778 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromAlias */

/* 1780 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1782 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1786 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1788 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1790 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1792 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1794 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1796 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1798 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1800 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 1802 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1804 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1806 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1808 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1810 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1812 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1814 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1816 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1818 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1820 */	NdrFcShort( 0x9e ),	/* Type Offset=158 */

	/* Return value */

/* 1822 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1824 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1826 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetMembersInAlias */

/* 1828 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1830 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1834 */	NdrFcShort( 0x21 ),	/* 33 */
/* 1836 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1838 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1840 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1842 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1844 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1846 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1848 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 1850 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1852 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1854 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1856 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1858 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1860 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1862 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Members */

/* 1864 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 1866 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1868 */	NdrFcShort( 0x494 ),	/* Type Offset=1172 */

	/* Return value */

/* 1870 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1872 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1874 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenUser */

/* 1876 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1878 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1882 */	NdrFcShort( 0x22 ),	/* 34 */
/* 1884 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 1886 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1888 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1890 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1892 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1894 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1896 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1898 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1900 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1902 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1904 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1906 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1908 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1910 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1912 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1914 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1916 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserId */

/* 1918 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1920 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1922 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 1924 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1926 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 1928 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Return value */

/* 1930 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1932 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1934 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteUser */

/* 1936 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1938 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1942 */	NdrFcShort( 0x23 ),	/* 35 */
/* 1944 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 1946 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 1948 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1950 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1952 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1954 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1956 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1958 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1960 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1962 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1964 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 1966 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 1968 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1970 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 1972 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1974 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1976 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationUser */

/* 1978 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1980 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1984 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1986 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 1988 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1990 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 1992 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1994 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1996 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1998 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2000 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2002 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2004 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2006 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2008 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2010 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2012 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2014 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2016 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2018 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2020 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2022 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2024 */	NdrFcShort( 0x4a8 ),	/* Type Offset=1192 */

	/* Return value */

/* 2026 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2028 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2030 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationUser */

/* 2032 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2034 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2038 */	NdrFcShort( 0x25 ),	/* 37 */
/* 2040 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2042 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2044 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2046 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2048 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2050 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2052 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2054 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2056 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2058 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2060 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2062 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2064 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2066 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2068 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2070 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2072 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2074 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2076 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2078 */	NdrFcShort( 0x8ea ),	/* Type Offset=2282 */

	/* Return value */

/* 2080 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2082 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2084 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrChangePasswordUser */

/* 2086 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2088 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2092 */	NdrFcShort( 0x26 ),	/* 38 */
/* 2094 */	NdrFcShort( 0x30 ),	/* x86 Stack size/offset = 48 */
/* 2096 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2098 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2100 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2102 */	NdrFcShort( 0x1d0 ),	/* 464 */
/* 2104 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2106 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0xc,		/* 12 */
/* 2108 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2110 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2112 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2114 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2116 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2118 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2120 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter LmPresent */

/* 2122 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2124 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2126 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter OldLmEncryptedWithNewLm */

/* 2128 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2130 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2132 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter NewLmEncryptedWithOldLm */

/* 2134 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2136 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2138 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter NtPresent */

/* 2140 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2142 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2144 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter OldNtEncryptedWithNewNt */

/* 2146 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2148 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2150 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter NewNtEncryptedWithOldNt */

/* 2152 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2154 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 2156 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter NtCrossEncryptionPresent */

/* 2158 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2160 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 2162 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter NewNtEncryptedWithNewLm */

/* 2164 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2166 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 2168 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter LmCrossEncryptionPresent */

/* 2170 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2172 */	NdrFcShort( 0x24 ),	/* x86 Stack size/offset = 36 */
/* 2174 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter NewLmEncryptedWithNewNt */

/* 2176 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2178 */	NdrFcShort( 0x28 ),	/* x86 Stack size/offset = 40 */
/* 2180 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Return value */

/* 2182 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2184 */	NdrFcShort( 0x2c ),	/* x86 Stack size/offset = 44 */
/* 2186 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetGroupsForUser */

/* 2188 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2190 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2194 */	NdrFcShort( 0x27 ),	/* 39 */
/* 2196 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2198 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2200 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2202 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2204 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2206 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2208 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 2210 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2212 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2216 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2218 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2220 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2222 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Groups */

/* 2224 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2226 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2228 */	NdrFcShort( 0x8f8 ),	/* Type Offset=2296 */

	/* Return value */

/* 2230 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2232 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2234 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation */

/* 2236 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2238 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2242 */	NdrFcShort( 0x28 ),	/* 40 */
/* 2244 */	NdrFcShort( 0x24 ),	/* x86 Stack size/offset = 36 */
/* 2246 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2248 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2250 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2252 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2254 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2256 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2258 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2260 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2262 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2264 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2266 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2268 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2270 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2272 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2274 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2276 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 2278 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2280 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2282 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 2284 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2286 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2288 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 2290 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2292 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2294 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 2296 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2298 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2300 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 2302 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2304 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 2306 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2308 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 2310 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 2312 */	NdrFcShort( 0x928 ),	/* Type Offset=2344 */

	/* Return value */

/* 2314 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2316 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 2318 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDisplayEnumerationIndex */

/* 2320 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2322 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2326 */	NdrFcShort( 0x29 ),	/* 41 */
/* 2328 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2330 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2332 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2334 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2336 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2338 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2340 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2342 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2344 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2346 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2348 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2350 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2352 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2354 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2356 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2358 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2360 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Prefix */

/* 2362 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2364 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2366 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter Index */

/* 2368 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2370 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2372 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2374 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2376 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2378 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum42NotUsedOnWire */

/* 2380 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2382 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2386 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2388 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2390 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 2392 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2394 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2396 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2398 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 2400 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2402 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2404 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2406 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum43NotUsedOnWire */


	/* Parameter IDL_handle */

/* 2408 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2410 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2414 */	NdrFcShort( 0x2b ),	/* 43 */
/* 2416 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2418 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 2420 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2422 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2424 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2426 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 2428 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2430 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2432 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2434 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrGetUserDomainPasswordInformation */


	/* Parameter IDL_handle */

/* 2436 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2438 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2442 */	NdrFcShort( 0x2c ),	/* 44 */
/* 2444 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2446 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2448 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2450 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2452 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2454 */	NdrFcShort( 0x34 ),	/* 52 */
/* 2456 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 2458 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2460 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2462 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2464 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2466 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2468 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2470 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter PasswordInformation */

/* 2472 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
/* 2474 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2476 */	NdrFcShort( 0xa94 ),	/* Type Offset=2708 */

	/* Return value */

/* 2478 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2480 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2482 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromForeignDomain */

/* 2484 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2486 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2490 */	NdrFcShort( 0x2d ),	/* 45 */
/* 2492 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2494 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2496 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2498 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2500 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2502 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2504 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2506 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2508 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2510 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2512 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2514 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2516 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2518 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberSid */

/* 2520 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2522 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2524 */	NdrFcShort( 0x9e ),	/* Type Offset=158 */

	/* Return value */

/* 2526 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2528 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2530 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationDomain2 */

/* 2532 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2534 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2538 */	NdrFcShort( 0x2e ),	/* 46 */
/* 2540 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2542 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2544 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2546 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2548 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2550 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2552 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2554 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2556 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2558 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2560 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2562 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2564 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2566 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 2568 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2570 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2572 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2574 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2576 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2578 */	NdrFcShort( 0xa9c ),	/* Type Offset=2716 */

	/* Return value */

/* 2580 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2582 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2584 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationUser2 */

/* 2586 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2588 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2592 */	NdrFcShort( 0x2f ),	/* 47 */
/* 2594 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2596 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2598 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2600 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2602 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2604 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2606 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2608 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2610 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2612 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2614 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2616 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2618 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2620 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2622 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2624 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2626 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2628 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2630 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2632 */	NdrFcShort( 0xaae ),	/* Type Offset=2734 */

	/* Return value */

/* 2634 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2636 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2638 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation2 */

/* 2640 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2642 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2646 */	NdrFcShort( 0x30 ),	/* 48 */
/* 2648 */	NdrFcShort( 0x24 ),	/* x86 Stack size/offset = 36 */
/* 2650 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2652 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2654 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2656 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2658 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2660 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2662 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2664 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2666 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2668 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2670 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2672 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2674 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2676 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2678 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2680 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 2682 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2684 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2686 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 2688 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2690 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2692 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 2694 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2696 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2698 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 2700 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2702 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2704 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 2706 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2708 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 2710 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2712 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 2714 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 2716 */	NdrFcShort( 0xac4 ),	/* Type Offset=2756 */

	/* Return value */

/* 2718 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2720 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 2722 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDisplayEnumerationIndex2 */

/* 2724 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2726 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2730 */	NdrFcShort( 0x31 ),	/* 49 */
/* 2732 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2734 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2736 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2738 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2740 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2742 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2744 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2746 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2748 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2750 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2752 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2754 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2756 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2758 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2760 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2762 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2764 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Prefix */

/* 2766 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2768 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2770 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter Index */

/* 2772 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2774 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2776 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2778 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2780 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2782 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateUser2InDomain */

/* 2784 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2786 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2790 */	NdrFcShort( 0x32 ),	/* 50 */
/* 2792 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 2794 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2796 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2798 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2800 */	NdrFcShort( 0x34 ),	/* 52 */
/* 2802 */	NdrFcShort( 0x78 ),	/* 120 */
/* 2804 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 2806 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2808 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2810 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2812 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2814 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2816 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2818 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 2820 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2822 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2824 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter AccountType */

/* 2826 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2828 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2830 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DesiredAccess */

/* 2832 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2834 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2836 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 2838 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 2840 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2842 */	NdrFcShort( 0x122 ),	/* Type Offset=290 */

	/* Parameter GrantedAccess */

/* 2844 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2846 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2848 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter RelativeId */

/* 2850 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2852 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 2854 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2856 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2858 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 2860 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation3 */

/* 2862 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2864 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2868 */	NdrFcShort( 0x33 ),	/* 51 */
/* 2870 */	NdrFcShort( 0x24 ),	/* x86 Stack size/offset = 36 */
/* 2872 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2874 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2876 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2878 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2880 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2882 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2884 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2886 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2888 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2890 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2892 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2894 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2896 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2898 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2900 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2902 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 2904 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2906 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2908 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 2910 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2912 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2914 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 2916 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2918 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2920 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 2922 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2924 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 2926 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 2928 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2930 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 2932 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2934 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 2936 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 2938 */	NdrFcShort( 0xad2 ),	/* Type Offset=2770 */

	/* Return value */

/* 2940 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2942 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 2944 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMultipleMembersToAlias */

/* 2946 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2948 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2952 */	NdrFcShort( 0x34 ),	/* 52 */
/* 2954 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 2956 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2958 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2960 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2962 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2964 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2966 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2968 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2970 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2972 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2974 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 2976 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2978 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 2980 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MembersBuffer */

/* 2982 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2984 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2986 */	NdrFcShort( 0x2ca ),	/* Type Offset=714 */

	/* Return value */

/* 2988 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2990 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2992 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMultipleMembersFromAlias */

/* 2994 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2996 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3000 */	NdrFcShort( 0x35 ),	/* 53 */
/* 3002 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3004 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3006 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3008 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3010 */	NdrFcShort( 0x24 ),	/* 36 */
/* 3012 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3014 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3016 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3018 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3020 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3022 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 3024 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3026 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3028 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MembersBuffer */

/* 3030 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3032 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3034 */	NdrFcShort( 0x2ca ),	/* Type Offset=714 */

	/* Return value */

/* 3036 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3038 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3040 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOemChangePasswordUser2 */

/* 3042 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3044 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3048 */	NdrFcShort( 0x36 ),	/* 54 */
/* 3050 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 3052 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3054 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3056 */	NdrFcShort( 0x27c ),	/* 636 */
/* 3058 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3060 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3062 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3064 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3066 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3068 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3070 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3072 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3074 */	NdrFcShort( 0xadc ),	/* Type Offset=2780 */

	/* Parameter ServerName */

/* 3076 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3078 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3080 */	NdrFcShort( 0xaf2 ),	/* Type Offset=2802 */

	/* Parameter UserName */

/* 3082 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3084 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3086 */	NdrFcShort( 0xb0c ),	/* Type Offset=2828 */

	/* Parameter NewPasswordEncryptedWithOldLm */

/* 3088 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3090 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3092 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter OldLmOwfPasswordEncryptedWithNewLm */

/* 3094 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3096 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3098 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrUnicodeChangePasswordUser2 */


	/* Return value */

/* 3100 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3102 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3106 */	NdrFcShort( 0x37 ),	/* 55 */
/* 3108 */	NdrFcShort( 0x24 ),	/* x86 Stack size/offset = 36 */
/* 3110 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3112 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3114 */	NdrFcShort( 0x4fd ),	/* 1277 */
/* 3116 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3118 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 3120 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3122 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3124 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3126 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3128 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3130 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3132 */	NdrFcShort( 0xb10 ),	/* Type Offset=2832 */

	/* Parameter ServerName */

/* 3134 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3136 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3138 */	NdrFcShort( 0x64 ),	/* Type Offset=100 */

	/* Parameter UserName */

/* 3140 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3142 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3144 */	NdrFcShort( 0xb0c ),	/* Type Offset=2828 */

	/* Parameter NewPasswordEncryptedWithOldNt */

/* 3146 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3148 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3150 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter OldNtOwfPasswordEncryptedWithNewNt */

/* 3152 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3154 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3156 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter LmPresent */

/* 3158 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3160 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 3162 */	NdrFcShort( 0xb0c ),	/* Type Offset=2828 */

	/* Parameter NewPasswordEncryptedWithOldLm */

/* 3164 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3166 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 3168 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter OldLmOwfPasswordEncryptedWithNewNt */

/* 3170 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3172 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 3174 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDomainPasswordInformation */


	/* Return value */

/* 3176 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3178 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3182 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3184 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3186 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3188 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3190 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3192 */	NdrFcShort( 0x34 ),	/* 52 */
/* 3194 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3196 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3198 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3200 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3202 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3204 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3206 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3208 */	NdrFcShort( 0xb10 ),	/* Type Offset=2832 */

	/* Parameter Unused */

/* 3210 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
/* 3212 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3214 */	NdrFcShort( 0xa94 ),	/* Type Offset=2708 */

	/* Parameter PasswordInformation */

/* 3216 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3218 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3220 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrConnect2 */


	/* Return value */

/* 3222 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3224 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3228 */	NdrFcShort( 0x39 ),	/* 57 */
/* 3230 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3232 */	0x31,		/* FC_BIND_GENERIC */
			0x4,		/* 4 */
/* 3234 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3236 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3238 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3240 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3242 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3244 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3246 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3248 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3250 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3252 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3254 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3256 */	NdrFcShort( 0xb14 ),	/* Type Offset=2836 */

	/* Parameter ServerHandle */

/* 3258 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3260 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3262 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter DesiredAccess */

/* 3264 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3266 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3268 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3270 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3272 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3274 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationUser2 */

/* 3276 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3278 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3282 */	NdrFcShort( 0x3a ),	/* 58 */
/* 3284 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3286 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3288 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3290 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3292 */	NdrFcShort( 0x2a ),	/* 42 */
/* 3294 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3296 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3298 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3302 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3304 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 3306 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3308 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3310 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 3312 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3314 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3316 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 3318 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3320 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3322 */	NdrFcShort( 0xb1c ),	/* Type Offset=2844 */

	/* Return value */

/* 3324 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3326 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3328 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum59NotUsedOnWire */

/* 3330 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3332 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3336 */	NdrFcShort( 0x3b ),	/* 59 */
/* 3338 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3340 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3342 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3344 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3346 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3348 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3350 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3352 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3354 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3356 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum60NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3358 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3360 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3364 */	NdrFcShort( 0x3c ),	/* 60 */
/* 3366 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3368 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3370 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3372 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3374 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3376 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3378 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3380 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3382 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3384 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum61NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3386 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3388 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3392 */	NdrFcShort( 0x3d ),	/* 61 */
/* 3394 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3396 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3398 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3400 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3402 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3404 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3406 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3408 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3410 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3412 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrConnect4 */


	/* Parameter IDL_handle */

/* 3414 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3416 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3420 */	NdrFcShort( 0x3e ),	/* 62 */
/* 3422 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3424 */	0x31,		/* FC_BIND_GENERIC */
			0x4,		/* 4 */
/* 3426 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3428 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3430 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3432 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3434 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3436 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3438 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3440 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3442 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3444 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3446 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3448 */	NdrFcShort( 0xb14 ),	/* Type Offset=2836 */

	/* Parameter ServerHandle */

/* 3450 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3452 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3454 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter ClientRevision */

/* 3456 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3458 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3460 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DesiredAccess */

/* 3462 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3464 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3466 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3468 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3470 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3472 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum63NotUsedOnWire */

/* 3474 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3476 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3480 */	NdrFcShort( 0x3f ),	/* 63 */
/* 3482 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3484 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3486 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3488 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3492 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3494 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3496 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3498 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3500 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrConnect5 */


	/* Parameter IDL_handle */

/* 3502 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3504 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3508 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3510 */	NdrFcShort( 0x20 ),	/* x86 Stack size/offset = 32 */
/* 3512 */	0x31,		/* FC_BIND_GENERIC */
			0x4,		/* 4 */
/* 3514 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3516 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3518 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3520 */	NdrFcShort( 0x5c ),	/* 92 */
/* 3522 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 3524 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3526 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3528 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3530 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3532 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3534 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3536 */	NdrFcShort( 0xb14 ),	/* Type Offset=2836 */

	/* Parameter DesiredAccess */

/* 3538 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3540 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3542 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter InVersion */

/* 3544 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3546 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3548 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter InRevisionInfo */

/* 3550 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3552 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3554 */	NdrFcShort( 0xb2a ),	/* Type Offset=2858 */

	/* Parameter OutVersion */

/* 3556 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3558 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3560 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter OutRevisionInfo */

/* 3562 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3564 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3566 */	NdrFcShort( 0xb44 ),	/* Type Offset=2884 */

	/* Parameter ServerHandle */

/* 3568 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3570 */	NdrFcShort( 0x18 ),	/* x86 Stack size/offset = 24 */
/* 3572 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Return value */

/* 3574 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3576 */	NdrFcShort( 0x1c ),	/* x86 Stack size/offset = 28 */
/* 3578 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRidToSid */

/* 3580 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3582 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3586 */	NdrFcShort( 0x41 ),	/* 65 */
/* 3588 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3590 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3592 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3594 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3596 */	NdrFcShort( 0x2c ),	/* 44 */
/* 3598 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3600 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 3602 */	0x8,		/* 8 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3604 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3606 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3608 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 3610 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3612 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3614 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Rid */

/* 3616 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3618 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3620 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Sid */

/* 3622 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 3624 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3626 */	NdrFcShort( 0x7a ),	/* Type Offset=122 */

	/* Return value */

/* 3628 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3630 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3632 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetDSRMPassword */

/* 3634 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3636 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3640 */	NdrFcShort( 0x42 ),	/* 66 */
/* 3642 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3644 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3646 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3648 */	NdrFcShort( 0x4c ),	/* 76 */
/* 3650 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3652 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3654 */	0x8,		/* 8 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3656 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3658 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3660 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3662 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3664 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3666 */	NdrFcShort( 0xb10 ),	/* Type Offset=2832 */

	/* Parameter Unused */

/* 3668 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3670 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3672 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserId */

/* 3674 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3676 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3678 */	NdrFcShort( 0x8f4 ),	/* Type Offset=2292 */

	/* Parameter EncryptedNtOwfPassword */

/* 3680 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3682 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3684 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrValidatePassword */


	/* Return value */

/* 3686 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3688 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3692 */	NdrFcShort( 0x43 ),	/* 67 */
/* 3694 */	NdrFcShort( 0x14 ),	/* x86 Stack size/offset = 20 */
/* 3696 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3698 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3700 */	NdrFcShort( 0x6 ),	/* 6 */
/* 3702 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3704 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3706 */	0x8,		/* 8 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3708 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3710 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3712 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Handle */

/* 3714 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3716 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3718 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter ValidationType */

/* 3720 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3722 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 3724 */	NdrFcShort( 0xb52 ),	/* Type Offset=2898 */

	/* Parameter InputArg */

/* 3726 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 3728 */	NdrFcShort( 0xc ),	/* x86 Stack size/offset = 12 */
/* 3730 */	NdrFcShort( 0xc12 ),	/* Type Offset=3090 */

	/* Parameter OutputArg */

/* 3732 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3734 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 3736 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum68NotUsedOnWire */


	/* Return value */

/* 3738 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3740 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3744 */	NdrFcShort( 0x44 ),	/* 68 */
/* 3746 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3748 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3750 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3752 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3754 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3756 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3758 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3760 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3762 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3764 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum69NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3766 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3768 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3772 */	NdrFcShort( 0x45 ),	/* 69 */
/* 3774 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3776 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3778 */	NdrFcShort( 0x0 ),	/* x86 Stack size/offset = 0 */
/* 3780 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3782 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3784 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3786 */	0x8,		/* 8 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3788 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3790 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3792 */	NdrFcShort( 0x0 ),	/* 0 */

			0x0
        ";

        // SAMR type format string generated by midl
        // Version: February 28, 2011
        private const string X86_TYPE_FORMAT_STRING = @"
			NdrFcShort( 0x0 ),	/* 0 */
/*  2 */	
			0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */	0x5,		/* FC_WCHAR */
			0x5c,		/* FC_PAD */
/*  6 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/*  8 */	NdrFcShort( 0x2 ),	/* Offset= 2 (10) */
/* 10 */	0x30,		/* FC_BIND_CONTEXT */
			0xa0,		/* Ctxt flags:  via ptr, out, */
/* 12 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 14 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 16 */	NdrFcShort( 0x2 ),	/* Offset= 2 (18) */
/* 18 */	0x30,		/* FC_BIND_CONTEXT */
			0xe1,		/* Ctxt flags:  via ptr, in, out, can't be null */
/* 20 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 22 */	0x30,		/* FC_BIND_CONTEXT */
			0x41,		/* Ctxt flags:  in, can't be null */
/* 24 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 26 */	
			0x11, 0x0,	/* FC_RP */
/* 28 */	NdrFcShort( 0x18 ),	/* Offset= 24 (52) */
/* 30 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 32 */	NdrFcLong( 0x0 ),	/* 0 */
/* 36 */	NdrFcLong( 0x40000 ),	/* 262144 */
/* 40 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 42 */	NdrFcShort( 0x1 ),	/* 1 */
/* 44 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 46 */	NdrFcShort( 0x0 ),	/* 0 */
/* 48 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 50 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 52 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 54 */	NdrFcShort( 0x8 ),	/* 8 */
/* 56 */	NdrFcShort( 0x0 ),	/* 0 */
/* 58 */	NdrFcShort( 0x8 ),	/* Offset= 8 (66) */
/* 60 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 62 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (30) */
/* 64 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 66 */	
			0x12, 0x0,	/* FC_UP */
/* 68 */	NdrFcShort( 0xffe4 ),	/* Offset= -28 (40) */
/* 70 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 72 */	NdrFcShort( 0x2 ),	/* Offset= 2 (74) */
/* 74 */	
			0x12, 0x0,	/* FC_UP */
/* 76 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (52) */
/* 78 */	
			0x11, 0x0,	/* FC_RP */
/* 80 */	NdrFcShort( 0x14 ),	/* Offset= 20 (100) */
/* 82 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 84 */	NdrFcShort( 0x2 ),	/* 2 */
/* 86 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 88 */	NdrFcShort( 0x2 ),	/* 2 */
/* 90 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 92 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 94 */	NdrFcShort( 0x0 ),	/* 0 */
/* 96 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 98 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 100 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 102 */	NdrFcShort( 0x8 ),	/* 8 */
/* 104 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 106 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 108 */	NdrFcShort( 0x4 ),	/* 4 */
/* 110 */	NdrFcShort( 0x4 ),	/* 4 */
/* 112 */	0x12, 0x0,	/* FC_UP */
/* 114 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (82) */
/* 116 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 118 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 120 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 122 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 124 */	NdrFcShort( 0x2 ),	/* Offset= 2 (126) */
/* 126 */	
			0x12, 0x0,	/* FC_UP */
/* 128 */	NdrFcShort( 0x1e ),	/* Offset= 30 (158) */
/* 130 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 132 */	NdrFcShort( 0x6 ),	/* 6 */
/* 134 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 136 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 138 */	NdrFcShort( 0x6 ),	/* 6 */
/* 140 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 142 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (130) */
/* 144 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 146 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 148 */	NdrFcShort( 0x4 ),	/* 4 */
/* 150 */	0x4,		/* Corr desc: FC_USMALL */
			0x0,		/*  */
/* 152 */	NdrFcShort( 0xfff9 ),	/* -7 */
/* 154 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 156 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 158 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 160 */	NdrFcShort( 0x8 ),	/* 8 */
/* 162 */	NdrFcShort( 0xfff0 ),	/* Offset= -16 (146) */
/* 164 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 166 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 168 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (136) */
/* 170 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 172 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 174 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 176 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 178 */	NdrFcShort( 0x2 ),	/* Offset= 2 (180) */
/* 180 */	
			0x12, 0x0,	/* FC_UP */
/* 182 */	NdrFcShort( 0x4c ),	/* Offset= 76 (258) */
/* 184 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 186 */	NdrFcShort( 0x2 ),	/* 2 */
/* 188 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 190 */	NdrFcShort( 0x6 ),	/* 6 */
/* 192 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 194 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 196 */	NdrFcShort( 0x4 ),	/* 4 */
/* 198 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 200 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 202 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 204 */	NdrFcShort( 0xc ),	/* 12 */
/* 206 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 208 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 210 */	NdrFcShort( 0x8 ),	/* 8 */
/* 212 */	NdrFcShort( 0x8 ),	/* 8 */
/* 214 */	0x12, 0x0,	/* FC_UP */
/* 216 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (184) */
/* 218 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 220 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 222 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 224 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 226 */	NdrFcShort( 0xc ),	/* 12 */
/* 228 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 230 */	NdrFcShort( 0x0 ),	/* 0 */
/* 232 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 234 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 236 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 238 */	NdrFcShort( 0xc ),	/* 12 */
/* 240 */	NdrFcShort( 0x0 ),	/* 0 */
/* 242 */	NdrFcShort( 0x1 ),	/* 1 */
/* 244 */	NdrFcShort( 0x8 ),	/* 8 */
/* 246 */	NdrFcShort( 0x8 ),	/* 8 */
/* 248 */	0x12, 0x0,	/* FC_UP */
/* 250 */	NdrFcShort( 0xffbe ),	/* Offset= -66 (184) */
/* 252 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 254 */	0x0,		/* 0 */
			NdrFcShort( 0xffcb ),	/* Offset= -53 (202) */
			0x5b,		/* FC_END */
/* 258 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 260 */	NdrFcShort( 0x8 ),	/* 8 */
/* 262 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 264 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 266 */	NdrFcShort( 0x4 ),	/* 4 */
/* 268 */	NdrFcShort( 0x4 ),	/* 4 */
/* 270 */	0x12, 0x0,	/* FC_UP */
/* 272 */	NdrFcShort( 0xffd0 ),	/* Offset= -48 (224) */
/* 274 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 276 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 278 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 280 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 282 */	
			0x11, 0x0,	/* FC_RP */
/* 284 */	NdrFcShort( 0xff82 ),	/* Offset= -126 (158) */
/* 286 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 288 */	NdrFcShort( 0x2 ),	/* Offset= 2 (290) */
/* 290 */	0x30,		/* FC_BIND_CONTEXT */
			0xa0,		/* Ctxt flags:  via ptr, out, */
/* 292 */	0x0,		/* 0 */
			0x1,		/* 1 */
/* 294 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 296 */	NdrFcShort( 0x2 ),	/* Offset= 2 (298) */
/* 298 */	
			0x12, 0x0,	/* FC_UP */
/* 300 */	NdrFcShort( 0x2 ),	/* Offset= 2 (302) */
/* 302 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 304 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 306 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 308 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 310 */	NdrFcShort( 0x2 ),	/* Offset= 2 (312) */
/* 312 */	NdrFcShort( 0x58 ),	/* 88 */
/* 314 */	NdrFcShort( 0x700c ),	/* 28684 */
/* 316 */	NdrFcLong( 0x1 ),	/* 1 */
/* 320 */	NdrFcShort( 0x4e ),	/* Offset= 78 (398) */
/* 322 */	NdrFcLong( 0x2 ),	/* 2 */
/* 326 */	NdrFcShort( 0x8e ),	/* Offset= 142 (468) */
/* 328 */	NdrFcLong( 0x3 ),	/* 3 */
/* 332 */	NdrFcShort( 0xc6 ),	/* Offset= 198 (530) */
/* 334 */	NdrFcLong( 0x4 ),	/* 4 */
/* 338 */	NdrFcShort( 0xff12 ),	/* Offset= -238 (100) */
/* 340 */	NdrFcLong( 0x5 ),	/* 5 */
/* 344 */	NdrFcShort( 0xff0c ),	/* Offset= -244 (100) */
/* 346 */	NdrFcLong( 0x7 ),	/* 7 */
/* 350 */	NdrFcShort( 0xbe ),	/* Offset= 190 (540) */
/* 352 */	NdrFcLong( 0x6 ),	/* 6 */
/* 356 */	NdrFcShort( 0xff00 ),	/* Offset= -256 (100) */
/* 358 */	NdrFcLong( 0x8 ),	/* 8 */
/* 362 */	NdrFcShort( 0xbc ),	/* Offset= 188 (550) */
/* 364 */	NdrFcLong( 0x9 ),	/* 9 */
/* 368 */	NdrFcShort( 0xac ),	/* Offset= 172 (540) */
/* 370 */	NdrFcLong( 0xb ),	/* 11 */
/* 374 */	NdrFcShort( 0xc4 ),	/* Offset= 196 (570) */
/* 376 */	NdrFcLong( 0xc ),	/* 12 */
/* 380 */	NdrFcShort( 0xd6 ),	/* Offset= 214 (594) */
/* 382 */	NdrFcLong( 0xd ),	/* 13 */
/* 386 */	NdrFcShort( 0xe4 ),	/* Offset= 228 (614) */
/* 388 */	NdrFcShort( 0xffff ),	/* Offset= -1 (387) */
/* 390 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 392 */	NdrFcShort( 0x8 ),	/* 8 */
/* 394 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 396 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 398 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 400 */	NdrFcShort( 0x18 ),	/* 24 */
/* 402 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 404 */	0x8,		/* FC_LONG */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 406 */	0x0,		/* 0 */
			NdrFcShort( 0xffef ),	/* Offset= -17 (390) */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 410 */	0x0,		/* 0 */
			NdrFcShort( 0xffeb ),	/* Offset= -21 (390) */
			0x5b,		/* FC_END */
/* 414 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 416 */	NdrFcShort( 0x2 ),	/* 2 */
/* 418 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 420 */	NdrFcShort( 0xa ),	/* 10 */
/* 422 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 424 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 426 */	NdrFcShort( 0x8 ),	/* 8 */
/* 428 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 430 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 432 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 434 */	NdrFcShort( 0x2 ),	/* 2 */
/* 436 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 438 */	NdrFcShort( 0x12 ),	/* 18 */
/* 440 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 442 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 444 */	NdrFcShort( 0x10 ),	/* 16 */
/* 446 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 448 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 450 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 452 */	NdrFcShort( 0x2 ),	/* 2 */
/* 454 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 456 */	NdrFcShort( 0x1a ),	/* 26 */
/* 458 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 460 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 462 */	NdrFcShort( 0x18 ),	/* 24 */
/* 464 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 466 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 468 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 470 */	NdrFcShort( 0x40 ),	/* 64 */
/* 472 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 474 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 476 */	NdrFcShort( 0xc ),	/* 12 */
/* 478 */	NdrFcShort( 0xc ),	/* 12 */
/* 480 */	0x12, 0x0,	/* FC_UP */
/* 482 */	NdrFcShort( 0xffbc ),	/* Offset= -68 (414) */
/* 484 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 486 */	NdrFcShort( 0x14 ),	/* 20 */
/* 488 */	NdrFcShort( 0x14 ),	/* 20 */
/* 490 */	0x12, 0x0,	/* FC_UP */
/* 492 */	NdrFcShort( 0xffc4 ),	/* Offset= -60 (432) */
/* 494 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 496 */	NdrFcShort( 0x1c ),	/* 28 */
/* 498 */	NdrFcShort( 0x1c ),	/* 28 */
/* 500 */	0x12, 0x0,	/* FC_UP */
/* 502 */	NdrFcShort( 0xffcc ),	/* Offset= -52 (450) */
/* 504 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 506 */	0x0,		/* 0 */
			NdrFcShort( 0xff8b ),	/* Offset= -117 (390) */
			0x6,		/* FC_SHORT */
/* 510 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 512 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 514 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 516 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 518 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 520 */	NdrFcShort( 0xff7e ),	/* Offset= -130 (390) */
/* 522 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 524 */	0x2,		/* FC_CHAR */
			0x3f,		/* FC_STRUCTPAD3 */
/* 526 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 528 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 530 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 532 */	NdrFcShort( 0x8 ),	/* 8 */
/* 534 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 536 */	NdrFcShort( 0xff6e ),	/* Offset= -146 (390) */
/* 538 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 540 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x1,		/* 1 */
/* 542 */	NdrFcShort( 0x4 ),	/* 4 */
/* 544 */	NdrFcShort( 0x0 ),	/* 0 */
/* 546 */	NdrFcShort( 0x0 ),	/* Offset= 0 (546) */
/* 548 */	0xd,		/* FC_ENUM16 */
			0x5b,		/* FC_END */
/* 550 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 552 */	NdrFcShort( 0x10 ),	/* 16 */
/* 554 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 556 */	NdrFcShort( 0xff5a ),	/* Offset= -166 (390) */
/* 558 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 560 */	NdrFcShort( 0xff56 ),	/* Offset= -170 (390) */
/* 562 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 564 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 566 */	NdrFcShort( 0x8 ),	/* 8 */
/* 568 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 570 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 572 */	NdrFcShort( 0x54 ),	/* 84 */
/* 574 */	NdrFcShort( 0x0 ),	/* 0 */
/* 576 */	NdrFcShort( 0x0 ),	/* Offset= 0 (576) */
/* 578 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 580 */	NdrFcShort( 0xff90 ),	/* Offset= -112 (468) */
/* 582 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 584 */	NdrFcShort( 0xffec ),	/* Offset= -20 (564) */
/* 586 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 588 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (564) */
/* 590 */	0x6,		/* FC_SHORT */
			0x3e,		/* FC_STRUCTPAD2 */
/* 592 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 594 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 596 */	NdrFcShort( 0x18 ),	/* 24 */
/* 598 */	NdrFcShort( 0x0 ),	/* 0 */
/* 600 */	NdrFcShort( 0x0 ),	/* Offset= 0 (600) */
/* 602 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 604 */	NdrFcShort( 0xffd8 ),	/* Offset= -40 (564) */
/* 606 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 608 */	NdrFcShort( 0xffd4 ),	/* Offset= -44 (564) */
/* 610 */	0x6,		/* FC_SHORT */
			0x42,		/* FC_STRUCTPAD6 */
/* 612 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 614 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 616 */	NdrFcShort( 0x18 ),	/* 24 */
/* 618 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 620 */	NdrFcShort( 0xff1a ),	/* Offset= -230 (390) */
/* 622 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 624 */	NdrFcShort( 0xff16 ),	/* Offset= -234 (390) */
/* 626 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 628 */	NdrFcShort( 0xff12 ),	/* Offset= -238 (390) */
/* 630 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 632 */	
			0x11, 0x0,	/* FC_RP */
/* 634 */	NdrFcShort( 0x2 ),	/* Offset= 2 (636) */
/* 636 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 638 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 640 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 642 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 644 */	NdrFcShort( 0xfeb4 ),	/* Offset= -332 (312) */
/* 646 */	
			0x11, 0x0,	/* FC_RP */
/* 648 */	NdrFcShort( 0x42 ),	/* Offset= 66 (714) */
/* 650 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 652 */	NdrFcLong( 0x0 ),	/* 0 */
/* 656 */	NdrFcLong( 0x400 ),	/* 1024 */
/* 660 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 662 */	NdrFcShort( 0x4 ),	/* 4 */
/* 664 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 666 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 668 */	NdrFcShort( 0x0 ),	/* 0 */
/* 670 */	NdrFcShort( 0x0 ),	/* 0 */
/* 672 */	0x12, 0x0,	/* FC_UP */
/* 674 */	NdrFcShort( 0xfdfc ),	/* Offset= -516 (158) */
/* 676 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 678 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 680 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 682 */	NdrFcShort( 0x4 ),	/* 4 */
/* 684 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 686 */	NdrFcShort( 0x0 ),	/* 0 */
/* 688 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 690 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 692 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 694 */	NdrFcShort( 0x4 ),	/* 4 */
/* 696 */	NdrFcShort( 0x0 ),	/* 0 */
/* 698 */	NdrFcShort( 0x1 ),	/* 1 */
/* 700 */	NdrFcShort( 0x0 ),	/* 0 */
/* 702 */	NdrFcShort( 0x0 ),	/* 0 */
/* 704 */	0x12, 0x0,	/* FC_UP */
/* 706 */	NdrFcShort( 0xfddc ),	/* Offset= -548 (158) */
/* 708 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 710 */	0x0,		/* 0 */
			NdrFcShort( 0xffcd ),	/* Offset= -51 (660) */
			0x5b,		/* FC_END */
/* 714 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 716 */	NdrFcShort( 0x8 ),	/* 8 */
/* 718 */	NdrFcShort( 0x0 ),	/* 0 */
/* 720 */	NdrFcShort( 0x8 ),	/* Offset= 8 (728) */
/* 722 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 724 */	NdrFcShort( 0xffb6 ),	/* Offset= -74 (650) */
/* 726 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 728 */	
			0x12, 0x0,	/* FC_UP */
/* 730 */	NdrFcShort( 0xffce ),	/* Offset= -50 (680) */
/* 732 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 734 */	NdrFcShort( 0xe ),	/* Offset= 14 (748) */
/* 736 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 738 */	NdrFcShort( 0x4 ),	/* 4 */
/* 740 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 742 */	NdrFcShort( 0x0 ),	/* 0 */
/* 744 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 746 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 748 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 750 */	NdrFcShort( 0x8 ),	/* 8 */
/* 752 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 754 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 756 */	NdrFcShort( 0x4 ),	/* 4 */
/* 758 */	NdrFcShort( 0x4 ),	/* 4 */
/* 760 */	0x12, 0x0,	/* FC_UP */
/* 762 */	NdrFcShort( 0xffe6 ),	/* Offset= -26 (736) */
/* 764 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 766 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 768 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 770 */	NdrFcLong( 0x0 ),	/* 0 */
/* 774 */	NdrFcLong( 0x3e8 ),	/* 1000 */
/* 778 */	
			0x1c,		/* FC_CVARRAY */
			0x3,		/* 3 */
/* 780 */	NdrFcShort( 0x8 ),	/* 8 */
/* 782 */	0x40,		/* Corr desc:  constant, val=1000 */
			0x0,		/* 0 */
/* 784 */	NdrFcShort( 0x3e8 ),	/* 1000 */
/* 786 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 788 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 790 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 792 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 794 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 796 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x4a,		/* FC_VARIABLE_OFFSET */
/* 798 */	NdrFcShort( 0x8 ),	/* 8 */
/* 800 */	NdrFcShort( 0x0 ),	/* 0 */
/* 802 */	NdrFcShort( 0x1 ),	/* 1 */
/* 804 */	NdrFcShort( 0x4 ),	/* 4 */
/* 806 */	NdrFcShort( 0x4 ),	/* 4 */
/* 808 */	0x12, 0x0,	/* FC_UP */
/* 810 */	NdrFcShort( 0xfd28 ),	/* Offset= -728 (82) */
/* 812 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 814 */	0x0,		/* 0 */
			NdrFcShort( 0xfd35 ),	/* Offset= -715 (100) */
			0x5b,		/* FC_END */
/* 818 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 820 */	NdrFcLong( 0x0 ),	/* 0 */
/* 824 */	NdrFcLong( 0x3e8 ),	/* 1000 */
/* 828 */	
			0x11, 0x0,	/* FC_RP */
/* 830 */	NdrFcShort( 0x2 ),	/* Offset= 2 (832) */
/* 832 */	
			0x1c,		/* FC_CVARRAY */
			0x3,		/* 3 */
/* 834 */	NdrFcShort( 0x4 ),	/* 4 */
/* 836 */	0x40,		/* Corr desc:  constant, val=1000 */
			0x0,		/* 0 */
/* 838 */	NdrFcShort( 0x3e8 ),	/* 1000 */
/* 840 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 842 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 844 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 846 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 848 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 850 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 852 */	NdrFcShort( 0x24 ),	/* Offset= 36 (888) */
/* 854 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 856 */	NdrFcShort( 0x8 ),	/* 8 */
/* 858 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 860 */	NdrFcShort( 0x0 ),	/* 0 */
/* 862 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 864 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 866 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 868 */	NdrFcShort( 0x8 ),	/* 8 */
/* 870 */	NdrFcShort( 0x0 ),	/* 0 */
/* 872 */	NdrFcShort( 0x1 ),	/* 1 */
/* 874 */	NdrFcShort( 0x4 ),	/* 4 */
/* 876 */	NdrFcShort( 0x4 ),	/* 4 */
/* 878 */	0x12, 0x0,	/* FC_UP */
/* 880 */	NdrFcShort( 0xfce2 ),	/* Offset= -798 (82) */
/* 882 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 884 */	0x0,		/* 0 */
			NdrFcShort( 0xfcef ),	/* Offset= -785 (100) */
			0x5b,		/* FC_END */
/* 888 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 890 */	NdrFcShort( 0x8 ),	/* 8 */
/* 892 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 894 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 896 */	NdrFcShort( 0x4 ),	/* 4 */
/* 898 */	NdrFcShort( 0x4 ),	/* 4 */
/* 900 */	0x12, 0x0,	/* FC_UP */
/* 902 */	NdrFcShort( 0xffd0 ),	/* Offset= -48 (854) */
/* 904 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 906 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 908 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 910 */	NdrFcShort( 0x2 ),	/* Offset= 2 (912) */
/* 912 */	
			0x12, 0x0,	/* FC_UP */
/* 914 */	NdrFcShort( 0x2 ),	/* Offset= 2 (916) */
/* 916 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 918 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 920 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 922 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 924 */	NdrFcShort( 0x2 ),	/* Offset= 2 (926) */
/* 926 */	NdrFcShort( 0x18 ),	/* 24 */
/* 928 */	NdrFcShort( 0x3005 ),	/* 12293 */
/* 930 */	NdrFcLong( 0x1 ),	/* 1 */
/* 934 */	NdrFcShort( 0x1c ),	/* Offset= 28 (962) */
/* 936 */	NdrFcLong( 0x2 ),	/* 2 */
/* 940 */	NdrFcShort( 0xfcb8 ),	/* Offset= -840 (100) */
/* 942 */	NdrFcLong( 0x3 ),	/* 3 */
/* 946 */	NdrFcShort( 0x34 ),	/* Offset= 52 (998) */
/* 948 */	NdrFcLong( 0x4 ),	/* 4 */
/* 952 */	NdrFcShort( 0xfcac ),	/* Offset= -852 (100) */
/* 954 */	NdrFcLong( 0x5 ),	/* 5 */
/* 958 */	NdrFcShort( 0x4 ),	/* Offset= 4 (962) */
/* 960 */	NdrFcShort( 0xffff ),	/* Offset= -1 (959) */
/* 962 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 964 */	NdrFcShort( 0x18 ),	/* 24 */
/* 966 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 968 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 970 */	NdrFcShort( 0x4 ),	/* 4 */
/* 972 */	NdrFcShort( 0x4 ),	/* 4 */
/* 974 */	0x12, 0x0,	/* FC_UP */
/* 976 */	NdrFcShort( 0xfc82 ),	/* Offset= -894 (82) */
/* 978 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 980 */	NdrFcShort( 0x14 ),	/* 20 */
/* 982 */	NdrFcShort( 0x14 ),	/* 20 */
/* 984 */	0x12, 0x0,	/* FC_UP */
/* 986 */	NdrFcShort( 0xfdd6 ),	/* Offset= -554 (432) */
/* 988 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 990 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 992 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 994 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 996 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 998 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 1000 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1002 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1004 */	
			0x11, 0x0,	/* FC_RP */
/* 1006 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1008) */
/* 1008 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1010 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1012 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1014 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1016 */	NdrFcShort( 0xffa6 ),	/* Offset= -90 (926) */
/* 1018 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1020 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1022) */
/* 1022 */	
			0x12, 0x0,	/* FC_UP */
/* 1024 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1026) */
/* 1026 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1028 */	NdrFcShort( 0xc ),	/* 12 */
/* 1030 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1032 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1034 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1036 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1038 */	0x12, 0x0,	/* FC_UP */
/* 1040 */	NdrFcShort( 0xfed0 ),	/* Offset= -304 (736) */
/* 1042 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1044 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1046 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1048 */	0x12, 0x0,	/* FC_UP */
/* 1050 */	NdrFcShort( 0xfec6 ),	/* Offset= -314 (736) */
/* 1052 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1054 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1056 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1058 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1060 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1062) */
/* 1062 */	
			0x12, 0x0,	/* FC_UP */
/* 1064 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1066) */
/* 1066 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1068 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1070 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1072 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1074 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1076) */
/* 1076 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1078 */	NdrFcShort( 0x3003 ),	/* 12291 */
/* 1080 */	NdrFcLong( 0x1 ),	/* 1 */
/* 1084 */	NdrFcShort( 0x22 ),	/* Offset= 34 (1118) */
/* 1086 */	NdrFcLong( 0x2 ),	/* 2 */
/* 1090 */	NdrFcShort( 0xfc22 ),	/* Offset= -990 (100) */
/* 1092 */	NdrFcLong( 0x3 ),	/* 3 */
/* 1096 */	NdrFcShort( 0xfc1c ),	/* Offset= -996 (100) */
/* 1098 */	NdrFcShort( 0xffff ),	/* Offset= -1 (1097) */
/* 1100 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1102 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1104 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1106 */	NdrFcShort( 0xe ),	/* 14 */
/* 1108 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1110 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1112 */	NdrFcShort( 0xc ),	/* 12 */
/* 1114 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1116 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1118 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1120 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1122 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1124 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1126 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1128 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1130 */	0x12, 0x0,	/* FC_UP */
/* 1132 */	NdrFcShort( 0xfbe6 ),	/* Offset= -1050 (82) */
/* 1134 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1136 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1138 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1140 */	0x12, 0x0,	/* FC_UP */
/* 1142 */	NdrFcShort( 0xffd6 ),	/* Offset= -42 (1100) */
/* 1144 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1146 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1148 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1150 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1152 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1154 */	
			0x11, 0x0,	/* FC_RP */
/* 1156 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1158) */
/* 1158 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1160 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1162 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1164 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1166 */	NdrFcShort( 0xffa6 ),	/* Offset= -90 (1076) */
/* 1168 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 1170 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1172) */
/* 1172 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1174 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1176 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1178 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1180 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1182 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1184 */	0x12, 0x0,	/* FC_UP */
/* 1186 */	NdrFcShort( 0xfe06 ),	/* Offset= -506 (680) */
/* 1188 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 1190 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1192 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1194 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1196) */
/* 1196 */	
			0x12, 0x0,	/* FC_UP */
/* 1198 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1200) */
/* 1200 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1202 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1204 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 1206 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1208 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1210) */
/* 1210 */	NdrFcShort( 0x2d8 ),	/* 728 */
/* 1212 */	NdrFcShort( 0x3017 ),	/* 12311 */
/* 1214 */	NdrFcLong( 0x1 ),	/* 1 */
/* 1218 */	NdrFcShort( 0xac ),	/* Offset= 172 (1390) */
/* 1220 */	NdrFcLong( 0x2 ),	/* 2 */
/* 1224 */	NdrFcShort( 0xe4 ),	/* Offset= 228 (1452) */
/* 1226 */	NdrFcLong( 0x3 ),	/* 3 */
/* 1230 */	NdrFcShort( 0x15c ),	/* Offset= 348 (1578) */
/* 1232 */	NdrFcLong( 0x4 ),	/* 4 */
/* 1236 */	NdrFcShort( 0x1f2 ),	/* Offset= 498 (1734) */
/* 1238 */	NdrFcLong( 0x5 ),	/* 5 */
/* 1242 */	NdrFcShort( 0x226 ),	/* Offset= 550 (1792) */
/* 1244 */	NdrFcLong( 0x6 ),	/* 6 */
/* 1248 */	NdrFcShort( 0x2b2 ),	/* Offset= 690 (1938) */
/* 1250 */	NdrFcLong( 0x7 ),	/* 7 */
/* 1254 */	NdrFcShort( 0xfb7e ),	/* Offset= -1154 (100) */
/* 1256 */	NdrFcLong( 0x8 ),	/* 8 */
/* 1260 */	NdrFcShort( 0xfb78 ),	/* Offset= -1160 (100) */
/* 1262 */	NdrFcLong( 0x9 ),	/* 9 */
/* 1266 */	NdrFcShort( 0xfef4 ),	/* Offset= -268 (998) */
/* 1268 */	NdrFcLong( 0xa ),	/* 10 */
/* 1272 */	NdrFcShort( 0x29a ),	/* Offset= 666 (1938) */
/* 1274 */	NdrFcLong( 0xb ),	/* 11 */
/* 1278 */	NdrFcShort( 0xfb66 ),	/* Offset= -1178 (100) */
/* 1280 */	NdrFcLong( 0xc ),	/* 12 */
/* 1284 */	NdrFcShort( 0xfb60 ),	/* Offset= -1184 (100) */
/* 1286 */	NdrFcLong( 0xd ),	/* 13 */
/* 1290 */	NdrFcShort( 0xfb5a ),	/* Offset= -1190 (100) */
/* 1292 */	NdrFcLong( 0xe ),	/* 14 */
/* 1296 */	NdrFcShort( 0xfb54 ),	/* Offset= -1196 (100) */
/* 1298 */	NdrFcLong( 0x10 ),	/* 16 */
/* 1302 */	NdrFcShort( 0xfed0 ),	/* Offset= -304 (998) */
/* 1304 */	NdrFcLong( 0x11 ),	/* 17 */
/* 1308 */	NdrFcShort( 0xfcf6 ),	/* Offset= -778 (530) */
/* 1310 */	NdrFcLong( 0x12 ),	/* 18 */
/* 1314 */	NdrFcShort( 0x2a2 ),	/* Offset= 674 (1988) */
/* 1316 */	NdrFcLong( 0x14 ),	/* 20 */
/* 1320 */	NdrFcShort( 0xfb3c ),	/* Offset= -1220 (100) */
/* 1322 */	NdrFcLong( 0x15 ),	/* 21 */
/* 1326 */	NdrFcShort( 0x2f6 ),	/* Offset= 758 (2084) */
/* 1328 */	NdrFcLong( 0x17 ),	/* 23 */
/* 1332 */	NdrFcShort( 0x36a ),	/* Offset= 874 (2206) */
/* 1334 */	NdrFcLong( 0x18 ),	/* 24 */
/* 1338 */	NdrFcShort( 0x376 ),	/* Offset= 886 (2224) */
/* 1340 */	NdrFcLong( 0x19 ),	/* 25 */
/* 1344 */	NdrFcShort( 0x38a ),	/* Offset= 906 (2250) */
/* 1346 */	NdrFcLong( 0x1a ),	/* 26 */
/* 1350 */	NdrFcShort( 0x396 ),	/* Offset= 918 (2268) */
/* 1352 */	NdrFcShort( 0xffff ),	/* Offset= -1 (1351) */
/* 1354 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1356 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1358 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1360 */	NdrFcShort( 0x16 ),	/* 22 */
/* 1362 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1364 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1366 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1368 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1370 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1372 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1374 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1376 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1378 */	NdrFcShort( 0x1e ),	/* 30 */
/* 1380 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1382 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1384 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1386 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1388 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1390 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1392 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1394 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1396 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1398 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1400 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1402 */	0x12, 0x0,	/* FC_UP */
/* 1404 */	NdrFcShort( 0xfad6 ),	/* Offset= -1322 (82) */
/* 1406 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1408 */	NdrFcShort( 0xc ),	/* 12 */
/* 1410 */	NdrFcShort( 0xc ),	/* 12 */
/* 1412 */	0x12, 0x0,	/* FC_UP */
/* 1414 */	NdrFcShort( 0xfc18 ),	/* Offset= -1000 (414) */
/* 1416 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1418 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1420 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1422 */	0x12, 0x0,	/* FC_UP */
/* 1424 */	NdrFcShort( 0xffba ),	/* Offset= -70 (1354) */
/* 1426 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1428 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1430 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1432 */	0x12, 0x0,	/* FC_UP */
/* 1434 */	NdrFcShort( 0xffc2 ),	/* Offset= -62 (1372) */
/* 1436 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1438 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1440 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1442 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1444 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1446 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1448 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1450 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1452 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1454 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1456 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1458 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1460 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1462 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1464 */	0x12, 0x0,	/* FC_UP */
/* 1466 */	NdrFcShort( 0xfa98 ),	/* Offset= -1384 (82) */
/* 1468 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1470 */	NdrFcShort( 0xc ),	/* 12 */
/* 1472 */	NdrFcShort( 0xc ),	/* 12 */
/* 1474 */	0x12, 0x0,	/* FC_UP */
/* 1476 */	NdrFcShort( 0xfbda ),	/* Offset= -1062 (414) */
/* 1478 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1480 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1482 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1484 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1486 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 1488 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1490 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1492 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1494 */	NdrFcShort( 0x22 ),	/* 34 */
/* 1496 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1498 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1500 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1502 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1504 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1506 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1508 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1510 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1512 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1514 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1516 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1518 */	NdrFcShort( 0x28 ),	/* 40 */
/* 1520 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1522 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1524 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1526 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1528 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1530 */	NdrFcShort( 0x32 ),	/* 50 */
/* 1532 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1534 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1536 */	NdrFcShort( 0x30 ),	/* 48 */
/* 1538 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1540 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1542 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1544 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1546 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1548 */	NdrFcShort( 0x3a ),	/* 58 */
/* 1550 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1552 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1554 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1556 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1558 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1560 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 1562 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1564 */	0x40,		/* Corr desc:  constant, val=1260 */
			0x0,		/* 0 */
/* 1566 */	NdrFcShort( 0x4ec ),	/* 1260 */
/* 1568 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1570 */	0x10,		/* Corr desc:  field pointer,  */
			0x59,		/* FC_CALLBACK */
/* 1572 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1574 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1576 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1578 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1580 */	NdrFcShort( 0x78 ),	/* 120 */
/* 1582 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1584 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1586 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1588 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1590 */	0x12, 0x0,	/* FC_UP */
/* 1592 */	NdrFcShort( 0xfa1a ),	/* Offset= -1510 (82) */
/* 1594 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1596 */	NdrFcShort( 0xc ),	/* 12 */
/* 1598 */	NdrFcShort( 0xc ),	/* 12 */
/* 1600 */	0x12, 0x0,	/* FC_UP */
/* 1602 */	NdrFcShort( 0xfb5c ),	/* Offset= -1188 (414) */
/* 1604 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1606 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1608 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1610 */	0x12, 0x0,	/* FC_UP */
/* 1612 */	NdrFcShort( 0xfb76 ),	/* Offset= -1162 (450) */
/* 1614 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1616 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1618 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1620 */	0x12, 0x0,	/* FC_UP */
/* 1622 */	NdrFcShort( 0xff7a ),	/* Offset= -134 (1488) */
/* 1624 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1626 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1628 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1630 */	0x12, 0x0,	/* FC_UP */
/* 1632 */	NdrFcShort( 0xff82 ),	/* Offset= -126 (1506) */
/* 1634 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1636 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1638 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1640 */	0x12, 0x0,	/* FC_UP */
/* 1642 */	NdrFcShort( 0xff8a ),	/* Offset= -118 (1524) */
/* 1644 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1646 */	NdrFcShort( 0x3c ),	/* 60 */
/* 1648 */	NdrFcShort( 0x3c ),	/* 60 */
/* 1650 */	0x12, 0x0,	/* FC_UP */
/* 1652 */	NdrFcShort( 0xff92 ),	/* Offset= -110 (1542) */
/* 1654 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1656 */	NdrFcShort( 0x6c ),	/* 108 */
/* 1658 */	NdrFcShort( 0x6c ),	/* 108 */
/* 1660 */	0x12, 0x0,	/* FC_UP */
/* 1662 */	NdrFcShort( 0xff9a ),	/* Offset= -102 (1560) */
/* 1664 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1666 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1668 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1670 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1672 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1674 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1676 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1678 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1680 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1682 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1684 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1686 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1688 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1690 */	NdrFcShort( 0xfaec ),	/* Offset= -1300 (390) */
/* 1692 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1694 */	NdrFcShort( 0xfae8 ),	/* Offset= -1304 (390) */
/* 1696 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1698 */	NdrFcShort( 0xfae4 ),	/* Offset= -1308 (390) */
/* 1700 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1702 */	NdrFcShort( 0xfae0 ),	/* Offset= -1312 (390) */
/* 1704 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1706 */	NdrFcShort( 0xfadc ),	/* Offset= -1316 (390) */
/* 1708 */	0x6,		/* FC_SHORT */
			0x3e,		/* FC_STRUCTPAD2 */
/* 1710 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1712 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1714 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1716 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 1718 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1720 */	0x40,		/* Corr desc:  constant, val=1260 */
			0x0,		/* 0 */
/* 1722 */	NdrFcShort( 0x4ec ),	/* 1260 */
/* 1724 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1726 */	0x10,		/* Corr desc:  field pointer,  */
			0x59,		/* FC_CALLBACK */
/* 1728 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1730 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1732 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1734 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1736 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1738 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1740 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1742 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1744 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1746 */	0x12, 0x0,	/* FC_UP */
/* 1748 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (1716) */
/* 1750 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1752 */	0x3e,		/* FC_STRUCTPAD2 */
			0x8,		/* FC_LONG */
/* 1754 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1756 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1758 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1760 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1762 */	NdrFcShort( 0x42 ),	/* 66 */
/* 1764 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1766 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1768 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1770 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1772 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 1774 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 1776 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1778 */	0x40,		/* Corr desc:  constant, val=1260 */
			0x0,		/* 0 */
/* 1780 */	NdrFcShort( 0x4ec ),	/* 1260 */
/* 1782 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1784 */	0x10,		/* Corr desc:  field pointer,  */
			0x59,		/* FC_CALLBACK */
/* 1786 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1788 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1790 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1792 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1794 */	NdrFcShort( 0x78 ),	/* 120 */
/* 1796 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1798 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1800 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1802 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1804 */	0x12, 0x0,	/* FC_UP */
/* 1806 */	NdrFcShort( 0xf944 ),	/* Offset= -1724 (82) */
/* 1808 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1810 */	NdrFcShort( 0xc ),	/* 12 */
/* 1812 */	NdrFcShort( 0xc ),	/* 12 */
/* 1814 */	0x12, 0x0,	/* FC_UP */
/* 1816 */	NdrFcShort( 0xfa86 ),	/* Offset= -1402 (414) */
/* 1818 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1820 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1822 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1824 */	0x12, 0x0,	/* FC_UP */
/* 1826 */	NdrFcShort( 0xfaa0 ),	/* Offset= -1376 (450) */
/* 1828 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1830 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1832 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1834 */	0x12, 0x0,	/* FC_UP */
/* 1836 */	NdrFcShort( 0xfea4 ),	/* Offset= -348 (1488) */
/* 1838 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1840 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1842 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1844 */	0x12, 0x0,	/* FC_UP */
/* 1846 */	NdrFcShort( 0xfeac ),	/* Offset= -340 (1506) */
/* 1848 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1850 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1852 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1854 */	0x12, 0x0,	/* FC_UP */
/* 1856 */	NdrFcShort( 0xfeb4 ),	/* Offset= -332 (1524) */
/* 1858 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1860 */	NdrFcShort( 0x3c ),	/* 60 */
/* 1862 */	NdrFcShort( 0x3c ),	/* 60 */
/* 1864 */	0x12, 0x0,	/* FC_UP */
/* 1866 */	NdrFcShort( 0xfebc ),	/* Offset= -324 (1542) */
/* 1868 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1870 */	NdrFcShort( 0x44 ),	/* 68 */
/* 1872 */	NdrFcShort( 0x44 ),	/* 68 */
/* 1874 */	0x12, 0x0,	/* FC_UP */
/* 1876 */	NdrFcShort( 0xff88 ),	/* Offset= -120 (1756) */
/* 1878 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1880 */	NdrFcShort( 0x5c ),	/* 92 */
/* 1882 */	NdrFcShort( 0x5c ),	/* 92 */
/* 1884 */	0x12, 0x0,	/* FC_UP */
/* 1886 */	NdrFcShort( 0xff90 ),	/* Offset= -112 (1774) */
/* 1888 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1890 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1892 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1894 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1896 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1898 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1900 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1902 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1904 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1906 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1908 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 1910 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1912 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1914 */	0x8,		/* FC_LONG */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 1916 */	0x0,		/* 0 */
			NdrFcShort( 0xfa09 ),	/* Offset= -1527 (390) */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 1920 */	0x0,		/* 0 */
			NdrFcShort( 0xfa05 ),	/* Offset= -1531 (390) */
			0x6,		/* FC_SHORT */
/* 1924 */	0x3e,		/* FC_STRUCTPAD2 */
			0x8,		/* FC_LONG */
/* 1926 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1928 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1930 */	NdrFcShort( 0xf9fc ),	/* Offset= -1540 (390) */
/* 1932 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1934 */	NdrFcShort( 0xf9f8 ),	/* Offset= -1544 (390) */
/* 1936 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1938 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 1940 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1942 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 1944 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1946 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1948 */	NdrFcShort( 0x4 ),	/* 4 */
/* 1950 */	0x12, 0x0,	/* FC_UP */
/* 1952 */	NdrFcShort( 0xf8b2 ),	/* Offset= -1870 (82) */
/* 1954 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 1956 */	NdrFcShort( 0xc ),	/* 12 */
/* 1958 */	NdrFcShort( 0xc ),	/* 12 */
/* 1960 */	0x12, 0x0,	/* FC_UP */
/* 1962 */	NdrFcShort( 0xf9f4 ),	/* Offset= -1548 (414) */
/* 1964 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 1966 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 1968 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1970 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1972 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 1974 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1976 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1978 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1980 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1982 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1984 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (1972) */
/* 1986 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1988 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1990 */	NdrFcShort( 0x23 ),	/* 35 */
/* 1992 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1994 */	NdrFcShort( 0xfff0 ),	/* Offset= -16 (1978) */
/* 1996 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1998 */	NdrFcShort( 0xffec ),	/* Offset= -20 (1978) */
/* 2000 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 2002 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2004 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 2006 */	NdrFcShort( 0x2 ),	/* 2 */
/* 2008 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 2010 */	NdrFcShort( 0x2 ),	/* 2 */
/* 2012 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2014 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 2016 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2018 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2020 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 2022 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2024 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2026 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2028 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2030 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2032 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2034 */	0x12, 0x0,	/* FC_UP */
/* 2036 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (2004) */
/* 2038 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 2040 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 2042 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2044 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 2046 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2048 */	0x40,		/* Corr desc:  constant, val=1260 */
			0x0,		/* 0 */
/* 2050 */	NdrFcShort( 0x4ec ),	/* 1260 */
/* 2052 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2054 */	0x10,		/* Corr desc:  field pointer,  */
			0x59,		/* FC_CALLBACK */
/* 2056 */	NdrFcShort( 0x3 ),	/* 3 */
/* 2058 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 2060 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2062 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2064 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2066 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2068 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2070 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2072 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2074 */	0x12, 0x0,	/* FC_UP */
/* 2076 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (2044) */
/* 2078 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 2080 */	0x3e,		/* FC_STRUCTPAD2 */
			0x8,		/* FC_LONG */
/* 2082 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2084 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 2086 */	NdrFcShort( 0xc4 ),	/* 196 */
/* 2088 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2090 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2090) */
/* 2092 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2094 */	NdrFcShort( 0xf958 ),	/* Offset= -1704 (390) */
/* 2096 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2098 */	NdrFcShort( 0xf954 ),	/* Offset= -1708 (390) */
/* 2100 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2102 */	NdrFcShort( 0xf950 ),	/* Offset= -1712 (390) */
/* 2104 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2106 */	NdrFcShort( 0xf94c ),	/* Offset= -1716 (390) */
/* 2108 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2110 */	NdrFcShort( 0xf948 ),	/* Offset= -1720 (390) */
/* 2112 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2114 */	NdrFcShort( 0xf944 ),	/* Offset= -1724 (390) */
/* 2116 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2118 */	NdrFcShort( 0xf81e ),	/* Offset= -2018 (100) */
/* 2120 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2122 */	NdrFcShort( 0xf81a ),	/* Offset= -2022 (100) */
/* 2124 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2126 */	NdrFcShort( 0xf816 ),	/* Offset= -2026 (100) */
/* 2128 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2130 */	NdrFcShort( 0xf812 ),	/* Offset= -2030 (100) */
/* 2132 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2134 */	NdrFcShort( 0xf80e ),	/* Offset= -2034 (100) */
/* 2136 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2138 */	NdrFcShort( 0xf80a ),	/* Offset= -2038 (100) */
/* 2140 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2142 */	NdrFcShort( 0xf806 ),	/* Offset= -2042 (100) */
/* 2144 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2146 */	NdrFcShort( 0xf802 ),	/* Offset= -2046 (100) */
/* 2148 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2150 */	NdrFcShort( 0xf7fe ),	/* Offset= -2050 (100) */
/* 2152 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2154 */	NdrFcShort( 0xf7fa ),	/* Offset= -2054 (100) */
/* 2156 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2158 */	NdrFcShort( 0xff78 ),	/* Offset= -136 (2022) */
/* 2160 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2162 */	NdrFcShort( 0xff74 ),	/* Offset= -140 (2022) */
/* 2164 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2166 */	NdrFcShort( 0xf7ee ),	/* Offset= -2066 (100) */
/* 2168 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2170 */	NdrFcShort( 0xf7ba ),	/* Offset= -2118 (52) */
/* 2172 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 2174 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 2176 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2178 */	NdrFcShort( 0xff8c ),	/* Offset= -116 (2062) */
/* 2180 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2182 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2184 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 2186 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 2188 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2190 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 2192 */	NdrFcShort( 0x204 ),	/* 516 */
/* 2194 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2196 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 2198 */	NdrFcShort( 0x204 ),	/* 516 */
/* 2200 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2202 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (2190) */
/* 2204 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2206 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 2208 */	NdrFcShort( 0x2c8 ),	/* 712 */
/* 2210 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2212 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2212) */
/* 2214 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2216 */	NdrFcShort( 0xff7c ),	/* Offset= -132 (2084) */
/* 2218 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2220 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (2196) */
/* 2222 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2224 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 2226 */	NdrFcShort( 0x205 ),	/* 517 */
/* 2228 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2230 */	NdrFcShort( 0xffde ),	/* Offset= -34 (2196) */
/* 2232 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2234 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 2236 */	NdrFcShort( 0x214 ),	/* 532 */
/* 2238 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2240 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 2242 */	NdrFcShort( 0x214 ),	/* 532 */
/* 2244 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2246 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (2234) */
/* 2248 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2250 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 2252 */	NdrFcShort( 0x2d8 ),	/* 728 */
/* 2254 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2256 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2256) */
/* 2258 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2260 */	NdrFcShort( 0xff50 ),	/* Offset= -176 (2084) */
/* 2262 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2264 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (2240) */
/* 2266 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2268 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 2270 */	NdrFcShort( 0x215 ),	/* 533 */
/* 2272 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2274 */	NdrFcShort( 0xffde ),	/* Offset= -34 (2240) */
/* 2276 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2278 */	
			0x11, 0x0,	/* FC_RP */
/* 2280 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2282) */
/* 2282 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2284 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2286 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2288 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2290 */	NdrFcShort( 0xfbc8 ),	/* Offset= -1080 (1210) */
/* 2292 */	
			0x12, 0x0,	/* FC_UP */
/* 2294 */	NdrFcShort( 0xfec4 ),	/* Offset= -316 (1978) */
/* 2296 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2298 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2300) */
/* 2300 */	
			0x12, 0x0,	/* FC_UP */
/* 2302 */	NdrFcShort( 0x12 ),	/* Offset= 18 (2320) */
/* 2304 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 2306 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2308 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2310 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2312 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2314 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2316 */	NdrFcShort( 0xf87a ),	/* Offset= -1926 (390) */
/* 2318 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2320 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2322 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2324 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2326 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2328 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2330 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2332 */	0x12, 0x0,	/* FC_UP */
/* 2334 */	NdrFcShort( 0xffe2 ),	/* Offset= -30 (2304) */
/* 2336 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2338 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2340 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2342 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2344) */
/* 2344 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2346 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2348 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2350 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2352 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2354) */
/* 2354 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2356 */	NdrFcShort( 0x3005 ),	/* 12293 */
/* 2358 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2362 */	NdrFcShort( 0x80 ),	/* Offset= 128 (2490) */
/* 2364 */	NdrFcLong( 0x2 ),	/* 2 */
/* 2368 */	NdrFcShort( 0xde ),	/* Offset= 222 (2590) */
/* 2370 */	NdrFcLong( 0x3 ),	/* 3 */
/* 2374 */	NdrFcShort( 0xd8 ),	/* Offset= 216 (2590) */
/* 2376 */	NdrFcLong( 0x4 ),	/* 4 */
/* 2380 */	NdrFcShort( 0x130 ),	/* Offset= 304 (2684) */
/* 2382 */	NdrFcLong( 0x5 ),	/* 5 */
/* 2386 */	NdrFcShort( 0x12a ),	/* Offset= 298 (2684) */
/* 2388 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2387) */
/* 2390 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2392 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2394 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2396 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2398 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2400 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2402 */	0x12, 0x0,	/* FC_UP */
/* 2404 */	NdrFcShort( 0xfae8 ),	/* Offset= -1304 (1100) */
/* 2406 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2408 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2410 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2412 */	0x12, 0x0,	/* FC_UP */
/* 2414 */	NdrFcShort( 0xfbdc ),	/* Offset= -1060 (1354) */
/* 2416 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2418 */	NdrFcShort( 0x20 ),	/* 32 */
/* 2420 */	NdrFcShort( 0x20 ),	/* 32 */
/* 2422 */	0x12, 0x0,	/* FC_UP */
/* 2424 */	NdrFcShort( 0xfbe4 ),	/* Offset= -1052 (1372) */
/* 2426 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2428 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 2430 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2432 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 2434 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 2436 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2438 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2440 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 2442 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2444 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2446 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2448 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2450 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2452 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 2454 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2456 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2458 */	NdrFcShort( 0x3 ),	/* 3 */
/* 2460 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2462 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2464 */	0x12, 0x0,	/* FC_UP */
/* 2466 */	NdrFcShort( 0xfaaa ),	/* Offset= -1366 (1100) */
/* 2468 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2470 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2472 */	0x12, 0x0,	/* FC_UP */
/* 2474 */	NdrFcShort( 0xfba0 ),	/* Offset= -1120 (1354) */
/* 2476 */	NdrFcShort( 0x20 ),	/* 32 */
/* 2478 */	NdrFcShort( 0x20 ),	/* 32 */
/* 2480 */	0x12, 0x0,	/* FC_UP */
/* 2482 */	NdrFcShort( 0xfbaa ),	/* Offset= -1110 (1372) */
/* 2484 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 2486 */	0x0,		/* 0 */
			NdrFcShort( 0xff9f ),	/* Offset= -97 (2390) */
			0x5b,		/* FC_END */
/* 2490 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2492 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2494 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2496 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2498 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2500 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2502 */	0x12, 0x0,	/* FC_UP */
/* 2504 */	NdrFcShort( 0xffc0 ),	/* Offset= -64 (2440) */
/* 2506 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2508 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2510 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2512 */	NdrFcShort( 0x1c ),	/* 28 */
/* 2514 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2516 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2518 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2520 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2522 */	0x12, 0x0,	/* FC_UP */
/* 2524 */	NdrFcShort( 0xfa70 ),	/* Offset= -1424 (1100) */
/* 2526 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2528 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2530 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2532 */	0x12, 0x0,	/* FC_UP */
/* 2534 */	NdrFcShort( 0xfb64 ),	/* Offset= -1180 (1354) */
/* 2536 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2538 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 2540 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2542 */	0x8,		/* FC_LONG */
			0x6,		/* FC_SHORT */
/* 2544 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 2546 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2548 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 2550 */	NdrFcShort( 0x1c ),	/* 28 */
/* 2552 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2554 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2556 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2558 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2560 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 2562 */	NdrFcShort( 0x1c ),	/* 28 */
/* 2564 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2566 */	NdrFcShort( 0x2 ),	/* 2 */
/* 2568 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2570 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2572 */	0x12, 0x0,	/* FC_UP */
/* 2574 */	NdrFcShort( 0xfa3e ),	/* Offset= -1474 (1100) */
/* 2576 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2578 */	NdrFcShort( 0x18 ),	/* 24 */
/* 2580 */	0x12, 0x0,	/* FC_UP */
/* 2582 */	NdrFcShort( 0xfb34 ),	/* Offset= -1228 (1354) */
/* 2584 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 2586 */	0x0,		/* 0 */
			NdrFcShort( 0xffb3 ),	/* Offset= -77 (2510) */
			0x5b,		/* FC_END */
/* 2590 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2592 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2594 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2596 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2598 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2600 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2602 */	0x12, 0x0,	/* FC_UP */
/* 2604 */	NdrFcShort( 0xffc8 ),	/* Offset= -56 (2548) */
/* 2606 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2608 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2610 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 2612 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2614 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 2616 */	NdrFcShort( 0x6 ),	/* 6 */
/* 2618 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2620 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 2622 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2624 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2626 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2628 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2630 */	NdrFcShort( 0xc ),	/* 12 */
/* 2632 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2634 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2636 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2638 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2640 */	0x12, 0x0,	/* FC_UP */
/* 2642 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (2610) */
/* 2644 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2646 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 2648 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2650 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 2652 */	NdrFcShort( 0xc ),	/* 12 */
/* 2654 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2656 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2658 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2660 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2662 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 2664 */	NdrFcShort( 0xc ),	/* 12 */
/* 2666 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2668 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2670 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2672 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2674 */	0x12, 0x0,	/* FC_UP */
/* 2676 */	NdrFcShort( 0xffbe ),	/* Offset= -66 (2610) */
/* 2678 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 2680 */	0x0,		/* 0 */
			NdrFcShort( 0xffcb ),	/* Offset= -53 (2628) */
			0x5b,		/* FC_END */
/* 2684 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2686 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2688 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2690 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2692 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2694 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2696 */	0x12, 0x0,	/* FC_UP */
/* 2698 */	NdrFcShort( 0xffd0 ),	/* Offset= -48 (2650) */
/* 2700 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2702 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2704 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2706 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2708) */
/* 2708 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 2710 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2712 */	0x6,		/* FC_SHORT */
			0x3e,		/* FC_STRUCTPAD2 */
/* 2714 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2716 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2718 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2720) */
/* 2720 */	
			0x12, 0x0,	/* FC_UP */
/* 2722 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2724) */
/* 2724 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2726 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2728 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2730 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2732 */	NdrFcShort( 0xf68c ),	/* Offset= -2420 (312) */
/* 2734 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2736 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2738) */
/* 2738 */	
			0x12, 0x0,	/* FC_UP */
/* 2740 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2742) */
/* 2742 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2744 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2746 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2748 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2750 */	NdrFcShort( 0xf9fc ),	/* Offset= -1540 (1210) */
/* 2752 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2754 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2756) */
/* 2756 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2758 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2760 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2762 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2764 */	NdrFcShort( 0xfe66 ),	/* Offset= -410 (2354) */
/* 2766 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2768 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2770) */
/* 2770 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2772 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2774 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2776 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2778 */	NdrFcShort( 0xfe58 ),	/* Offset= -424 (2354) */
/* 2780 */	
			0x12, 0x0,	/* FC_UP */
/* 2782 */	NdrFcShort( 0x14 ),	/* Offset= 20 (2802) */
/* 2784 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 2786 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2788 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 2790 */	NdrFcShort( 0x2 ),	/* 2 */
/* 2792 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2794 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 2796 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2798 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2800 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 2802 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2804 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2806 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2808 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2810 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2812 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2814 */	0x12, 0x0,	/* FC_UP */
/* 2816 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (2784) */
/* 2818 */	
			0x5b,		/* FC_END */

			0x6,		/* FC_SHORT */
/* 2820 */	0x6,		/* FC_SHORT */
			0x8,		/* FC_LONG */
/* 2822 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2824 */	
			0x11, 0x0,	/* FC_RP */
/* 2826 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (2802) */
/* 2828 */	
			0x12, 0x0,	/* FC_UP */
/* 2830 */	NdrFcShort( 0xfd86 ),	/* Offset= -634 (2196) */
/* 2832 */	
			0x12, 0x0,	/* FC_UP */
/* 2834 */	NdrFcShort( 0xf552 ),	/* Offset= -2734 (100) */
/* 2836 */	
			0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2838 */	
			0x25,		/* FC_C_WSTRING */
			0x5c,		/* FC_PAD */
/* 2840 */	
			0x11, 0x0,	/* FC_RP */
/* 2842 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2844) */
/* 2844 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2846 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2848 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2850 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2852 */	NdrFcShort( 0xf996 ),	/* Offset= -1642 (1210) */
/* 2854 */	
			0x11, 0x0,	/* FC_RP */
/* 2856 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2858) */
/* 2858 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 2860 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 2862 */	NdrFcShort( 0x8 ),	/* x86 Stack size/offset = 8 */
/* 2864 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2866 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2868) */
/* 2868 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2870 */	NdrFcShort( 0x3001 ),	/* 12289 */
/* 2872 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2876 */	NdrFcShort( 0xf64a ),	/* Offset= -2486 (390) */
/* 2878 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2877) */
/* 2880 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2882 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2884) */
/* 2884 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 2886 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x54,		/* FC_DEREFERENCE */
/* 2888 */	NdrFcShort( 0x10 ),	/* x86 Stack size/offset = 16 */
/* 2890 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2892 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (2868) */
/* 2894 */	
			0x11, 0x0,	/* FC_RP */
/* 2896 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2898) */
/* 2898 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2900 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2902 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 2904 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2906 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2908) */
/* 2908 */	NdrFcShort( 0x50 ),	/* 80 */
/* 2910 */	NdrFcShort( 0x7003 ),	/* 28675 */
/* 2912 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2916 */	NdrFcShort( 0x66 ),	/* Offset= 102 (3018) */
/* 2918 */	NdrFcLong( 0x2 ),	/* 2 */
/* 2922 */	NdrFcShort( 0x70 ),	/* Offset= 112 (3034) */
/* 2924 */	NdrFcLong( 0x3 ),	/* 3 */
/* 2928 */	NdrFcShort( 0x86 ),	/* Offset= 134 (3062) */
/* 2930 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2929) */
/* 2932 */	
			0x16,		/* FC_PSTRUCT */
			0x3,		/* 3 */
/* 2934 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2936 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2938 */	
			0x46,		/* FC_NO_REPEAT */
			0x5c,		/* FC_PAD */
/* 2940 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2942 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2944 */	0x12, 0x0,	/* FC_UP */
/* 2946 */	NdrFcShort( 0xf4a6 ),	/* Offset= -2906 (40) */
/* 2948 */	
			0x5b,		/* FC_END */

			0x8,		/* FC_LONG */
/* 2950 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2952 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 2954 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2956 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2958 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2960 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2962 */	
			0x4b,		/* FC_PP */
			0x5c,		/* FC_PAD */
/* 2964 */	
			0x48,		/* FC_VARIABLE_REPEAT */
			0x49,		/* FC_FIXED_OFFSET */
/* 2966 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2968 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2970 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2972 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2974 */	NdrFcShort( 0x4 ),	/* 4 */
/* 2976 */	0x12, 0x0,	/* FC_UP */
/* 2978 */	NdrFcShort( 0xf486 ),	/* Offset= -2938 (40) */
/* 2980 */	
			0x5b,		/* FC_END */

			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 2982 */	0x0,		/* 0 */
			NdrFcShort( 0xffcd ),	/* Offset= -51 (2932) */
			0x5b,		/* FC_END */
/* 2986 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2988 */	NdrFcShort( 0x30 ),	/* 48 */
/* 2990 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2992 */	NdrFcShort( 0x16 ),	/* Offset= 22 (3014) */
/* 2994 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 2996 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2998 */	NdrFcShort( 0xf67e ),	/* Offset= -2434 (564) */
/* 3000 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3002 */	NdrFcShort( 0xf67a ),	/* Offset= -2438 (564) */
/* 3004 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3006 */	NdrFcShort( 0xf676 ),	/* Offset= -2442 (564) */
/* 3008 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 3010 */	0x36,		/* FC_POINTER */
			0x40,		/* FC_STRUCTPAD4 */
/* 3012 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 3014 */	
			0x12, 0x0,	/* FC_UP */
/* 3016 */	NdrFcShort( 0xffc0 ),	/* Offset= -64 (2952) */
/* 3018 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 3020 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3022 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3024 */	NdrFcShort( 0x0 ),	/* Offset= 0 (3024) */
/* 3026 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3028 */	NdrFcShort( 0xffd6 ),	/* Offset= -42 (2986) */
/* 3030 */	0x2,		/* FC_CHAR */
			0x43,		/* FC_STRUCTPAD7 */
/* 3032 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 3034 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 3036 */	NdrFcShort( 0x50 ),	/* 80 */
/* 3038 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3040 */	NdrFcShort( 0x0 ),	/* Offset= 0 (3040) */
/* 3042 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3044 */	NdrFcShort( 0xffc6 ),	/* Offset= -58 (2986) */
/* 3046 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3048 */	NdrFcShort( 0xf47c ),	/* Offset= -2948 (100) */
/* 3050 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3052 */	NdrFcShort( 0xf478 ),	/* Offset= -2952 (100) */
/* 3054 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3056 */	NdrFcShort( 0xff84 ),	/* Offset= -124 (2932) */
/* 3058 */	0x2,		/* FC_CHAR */
			0x43,		/* FC_STRUCTPAD7 */
/* 3060 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 3062 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 3064 */	NdrFcShort( 0x50 ),	/* 80 */
/* 3066 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3068 */	NdrFcShort( 0x0 ),	/* Offset= 0 (3068) */
/* 3070 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3072 */	NdrFcShort( 0xffaa ),	/* Offset= -86 (2986) */
/* 3074 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3076 */	NdrFcShort( 0xf460 ),	/* Offset= -2976 (100) */
/* 3078 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3080 */	NdrFcShort( 0xf45c ),	/* Offset= -2980 (100) */
/* 3082 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3084 */	NdrFcShort( 0xff68 ),	/* Offset= -152 (2932) */
/* 3086 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 3088 */	0x42,		/* FC_STRUCTPAD6 */
			0x5b,		/* FC_END */
/* 3090 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 3092 */	NdrFcShort( 0x2 ),	/* Offset= 2 (3094) */
/* 3094 */	
			0x12, 0x0,	/* FC_UP */
/* 3096 */	NdrFcShort( 0x2 ),	/* Offset= 2 (3098) */
/* 3098 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 3100 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 3102 */	NdrFcShort( 0x4 ),	/* x86 Stack size/offset = 4 */
/* 3104 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 3106 */	NdrFcShort( 0x2 ),	/* Offset= 2 (3108) */
/* 3108 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3110 */	NdrFcShort( 0x7003 ),	/* 28675 */
/* 3112 */	NdrFcLong( 0x1 ),	/* 1 */
/* 3116 */	NdrFcShort( 0x10 ),	/* Offset= 16 (3132) */
/* 3118 */	NdrFcLong( 0x2 ),	/* 2 */
/* 3122 */	NdrFcShort( 0xa ),	/* Offset= 10 (3132) */
/* 3124 */	NdrFcLong( 0x3 ),	/* 3 */
/* 3128 */	NdrFcShort( 0x4 ),	/* Offset= 4 (3132) */
/* 3130 */	NdrFcShort( 0xffff ),	/* Offset= -1 (3129) */
/* 3132 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 3134 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3136 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3138 */	NdrFcShort( 0x0 ),	/* Offset= 0 (3138) */
/* 3140 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 3142 */	NdrFcShort( 0xff64 ),	/* Offset= -156 (2986) */
/* 3144 */	0xd,		/* FC_ENUM16 */
			0x40,		/* FC_STRUCTPAD4 */
/* 3146 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */

			0x0
        ";

        #endregion
        #region X64
        // SAMR offset of proc format string for every procedure, copied from MIDL generated stub.
        // Version: February 28, 2011
        internal static readonly ushort[] X64_ProcFormatStringOffsetTable = new ushort[]
        {
           0,
    56,
    100,
    156,
    212,
    242,
    298,
    366,
    428,
    484,
    540,
    608,
    676,
    744,
    818,
    886,
    954,
    1010,
    1078,
    1146,
    1208,
    1264,
    1320,
    1376,
    1420,
    1470,
    1520,
    1576,
    1638,
    1694,
    1750,
    1794,
    1844,
    1894,
    1944,
    2006,
    2050,
    2106,
    2162,
    2266,
    2316,
    2402,
    2464,
    2494,
    2524,
    2574,
    2624,
    2680,
    2736,
    2822,
    2884,
    2964,
    3050,
    3100,
    3150,
    3210,
    3288,
    3336,
    3392,
    3448,
    3478,
    3508,
    3538,
    3600,
    3630,
    3710,
    3766,
    3820,
    3874,
    3904
        };

        // SAMR proc format string generated by midl
        // Version: February 28, 2011
        private const string X64_PROC_FORMAT_STRING = @"
		/* Procedure SamrConnect */

			0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/*  2 */	NdrFcLong( 0x0 ),	/* 0 */
/*  6 */	NdrFcShort( 0x0 ),	/* 0 */
/*  8 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 10 */	0x31,		/* FC_BIND_GENERIC */
			0x8,		/* 8 */
/* 12 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 14 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 16 */	NdrFcShort( 0x22 ),	/* 34 */
/* 18 */	NdrFcShort( 0x40 ),	/* 64 */
/* 20 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 22 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 24 */	NdrFcShort( 0x0 ),	/* 0 */
/* 26 */	NdrFcShort( 0x0 ),	/* 0 */
/* 28 */	NdrFcShort( 0x0 ),	/* 0 */
/* 30 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 32 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 34 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 36 */	NdrFcShort( 0x2 ),	/* Type Offset=2 */

	/* Parameter ServerHandle */

/* 38 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 40 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 42 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter DesiredAccess */

/* 44 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 46 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 48 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 50 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 52 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 54 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCloseHandle */

/* 56 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 58 */	NdrFcLong( 0x0 ),	/* 0 */
/* 62 */	NdrFcShort( 0x1 ),	/* 1 */
/* 64 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 66 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 68 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 70 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 72 */	NdrFcShort( 0x38 ),	/* 56 */
/* 74 */	NdrFcShort( 0x40 ),	/* 64 */
/* 76 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 78 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 80 */	NdrFcShort( 0x0 ),	/* 0 */
/* 82 */	NdrFcShort( 0x0 ),	/* 0 */
/* 84 */	NdrFcShort( 0x0 ),	/* 0 */
/* 86 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter SamHandle */

/* 88 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 90 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 92 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 94 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 96 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 98 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetSecurityObject */

/* 100 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 102 */	NdrFcLong( 0x0 ),	/* 0 */
/* 106 */	NdrFcShort( 0x2 ),	/* 2 */
/* 108 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 110 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 112 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 114 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 116 */	NdrFcShort( 0x2c ),	/* 44 */
/* 118 */	NdrFcShort( 0x8 ),	/* 8 */
/* 120 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 122 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 124 */	NdrFcShort( 0x0 ),	/* 0 */
/* 126 */	NdrFcShort( 0x1 ),	/* 1 */
/* 128 */	NdrFcShort( 0x0 ),	/* 0 */
/* 130 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 132 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 134 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 136 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SecurityInformation */

/* 138 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 140 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 142 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter SecurityDescriptor */

/* 144 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 146 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 148 */	NdrFcShort( 0x34 ),	/* Type Offset=52 */

	/* Return value */

/* 150 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 152 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 154 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQuerySecurityObject */

/* 156 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 158 */	NdrFcLong( 0x0 ),	/* 0 */
/* 162 */	NdrFcShort( 0x3 ),	/* 3 */
/* 164 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 166 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 168 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 170 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 172 */	NdrFcShort( 0x2c ),	/* 44 */
/* 174 */	NdrFcShort( 0x8 ),	/* 8 */
/* 176 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 178 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 180 */	NdrFcShort( 0x1 ),	/* 1 */
/* 182 */	NdrFcShort( 0x0 ),	/* 0 */
/* 184 */	NdrFcShort( 0x0 ),	/* 0 */
/* 186 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 188 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 190 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 192 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SecurityInformation */

/* 194 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 196 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 198 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter SecurityDescriptor */

/* 200 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 202 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 204 */	NdrFcShort( 0x48 ),	/* Type Offset=72 */

	/* Return value */

/* 206 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 208 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 210 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum4NotUsedOnWire */

/* 212 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 214 */	NdrFcLong( 0x0 ),	/* 0 */
/* 218 */	NdrFcShort( 0x4 ),	/* 4 */
/* 220 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 222 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 224 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 226 */	NdrFcShort( 0x0 ),	/* 0 */
/* 228 */	NdrFcShort( 0x0 ),	/* 0 */
/* 230 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 232 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 234 */	NdrFcShort( 0x0 ),	/* 0 */
/* 236 */	NdrFcShort( 0x0 ),	/* 0 */
/* 238 */	NdrFcShort( 0x0 ),	/* 0 */
/* 240 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrLookupDomainInSamServer */


	/* Parameter IDL_handle */

/* 242 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 244 */	NdrFcLong( 0x0 ),	/* 0 */
/* 248 */	NdrFcShort( 0x5 ),	/* 5 */
/* 250 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 252 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 254 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 256 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 258 */	NdrFcShort( 0x24 ),	/* 36 */
/* 260 */	NdrFcShort( 0x8 ),	/* 8 */
/* 262 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 264 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 266 */	NdrFcShort( 0x1 ),	/* 1 */
/* 268 */	NdrFcShort( 0x1 ),	/* 1 */
/* 270 */	NdrFcShort( 0x0 ),	/* 0 */
/* 272 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 274 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 276 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 278 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 280 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 282 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 284 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter DomainId */

/* 286 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 288 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 290 */	NdrFcShort( 0x78 ),	/* Type Offset=120 */

	/* Return value */

/* 292 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 294 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 296 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateDomainsInSamServer */

/* 298 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 300 */	NdrFcLong( 0x0 ),	/* 0 */
/* 304 */	NdrFcShort( 0x6 ),	/* 6 */
/* 306 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 308 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 310 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 312 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 314 */	NdrFcShort( 0x48 ),	/* 72 */
/* 316 */	NdrFcShort( 0x40 ),	/* 64 */
/* 318 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 320 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 322 */	NdrFcShort( 0x1 ),	/* 1 */
/* 324 */	NdrFcShort( 0x0 ),	/* 0 */
/* 326 */	NdrFcShort( 0x0 ),	/* 0 */
/* 328 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 330 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 332 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 334 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 336 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 338 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 340 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 342 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 344 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 346 */	NdrFcShort( 0xae ),	/* Type Offset=174 */

	/* Parameter PreferedMaximumLength */

/* 348 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 350 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 352 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 354 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 356 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 358 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 360 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 362 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 364 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenDomain */

/* 366 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 368 */	NdrFcLong( 0x0 ),	/* 0 */
/* 372 */	NdrFcShort( 0x7 ),	/* 7 */
/* 374 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 376 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 378 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 380 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 382 */	NdrFcShort( 0x2c ),	/* 44 */
/* 384 */	NdrFcShort( 0x40 ),	/* 64 */
/* 386 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 388 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 390 */	NdrFcShort( 0x0 ),	/* 0 */
/* 392 */	NdrFcShort( 0x1 ),	/* 1 */
/* 394 */	NdrFcShort( 0x0 ),	/* 0 */
/* 396 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerHandle */

/* 398 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 400 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 402 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 404 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 406 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 408 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DomainId */

/* 410 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 412 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 414 */	NdrFcShort( 0x9c ),	/* Type Offset=156 */

	/* Parameter DomainHandle */

/* 416 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 418 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 420 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Return value */

/* 422 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 424 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 426 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationDomain */

/* 428 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 430 */	NdrFcLong( 0x0 ),	/* 0 */
/* 434 */	NdrFcShort( 0x8 ),	/* 8 */
/* 436 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 438 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 440 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 442 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 444 */	NdrFcShort( 0x2a ),	/* 42 */
/* 446 */	NdrFcShort( 0x8 ),	/* 8 */
/* 448 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 450 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 452 */	NdrFcShort( 0x1 ),	/* 1 */
/* 454 */	NdrFcShort( 0x0 ),	/* 0 */
/* 456 */	NdrFcShort( 0x0 ),	/* 0 */
/* 458 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 460 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 462 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 464 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 466 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 468 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 470 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 472 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 474 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 476 */	NdrFcShort( 0xfc ),	/* Type Offset=252 */

	/* Return value */

/* 478 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 480 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 482 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationDomain */

/* 484 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 486 */	NdrFcLong( 0x0 ),	/* 0 */
/* 490 */	NdrFcShort( 0x9 ),	/* 9 */
/* 492 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 494 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 496 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 498 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 500 */	NdrFcShort( 0x2a ),	/* 42 */
/* 502 */	NdrFcShort( 0x8 ),	/* 8 */
/* 504 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 506 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 508 */	NdrFcShort( 0x0 ),	/* 0 */
/* 510 */	NdrFcShort( 0x1 ),	/* 1 */
/* 512 */	NdrFcShort( 0x0 ),	/* 0 */
/* 514 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 516 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 518 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 520 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 522 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 524 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 526 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter DomainInformation */

/* 528 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 530 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 532 */	NdrFcShort( 0x210 ),	/* Type Offset=528 */

	/* Return value */

/* 534 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 536 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 538 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateGroupInDomain */

/* 540 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 542 */	NdrFcLong( 0x0 ),	/* 0 */
/* 546 */	NdrFcShort( 0xa ),	/* 10 */
/* 548 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 550 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 552 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 554 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 556 */	NdrFcShort( 0x2c ),	/* 44 */
/* 558 */	NdrFcShort( 0x5c ),	/* 92 */
/* 560 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 562 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 564 */	NdrFcShort( 0x0 ),	/* 0 */
/* 566 */	NdrFcShort( 0x1 ),	/* 1 */
/* 568 */	NdrFcShort( 0x0 ),	/* 0 */
/* 570 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 572 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 574 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 576 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 578 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 580 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 582 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter DesiredAccess */

/* 584 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 586 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 588 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupHandle */

/* 590 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 592 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 594 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Parameter RelativeId */

/* 596 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 598 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 600 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 602 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 604 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 606 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateGroupsInDomain */

/* 608 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 610 */	NdrFcLong( 0x0 ),	/* 0 */
/* 614 */	NdrFcShort( 0xb ),	/* 11 */
/* 616 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 618 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 620 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 622 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 624 */	NdrFcShort( 0x48 ),	/* 72 */
/* 626 */	NdrFcShort( 0x40 ),	/* 64 */
/* 628 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 630 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 632 */	NdrFcShort( 0x1 ),	/* 1 */
/* 634 */	NdrFcShort( 0x0 ),	/* 0 */
/* 636 */	NdrFcShort( 0x0 ),	/* 0 */
/* 638 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 640 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 642 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 644 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 646 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 648 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 650 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 652 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 654 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 656 */	NdrFcShort( 0xae ),	/* Type Offset=174 */

	/* Parameter PreferedMaximumLength */

/* 658 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 660 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 662 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 664 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 666 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 668 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 670 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 672 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 674 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateUserInDomain */

/* 676 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 678 */	NdrFcLong( 0x0 ),	/* 0 */
/* 682 */	NdrFcShort( 0xc ),	/* 12 */
/* 684 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 686 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 688 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 690 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 692 */	NdrFcShort( 0x2c ),	/* 44 */
/* 694 */	NdrFcShort( 0x5c ),	/* 92 */
/* 696 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 698 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 700 */	NdrFcShort( 0x0 ),	/* 0 */
/* 702 */	NdrFcShort( 0x1 ),	/* 1 */
/* 704 */	NdrFcShort( 0x0 ),	/* 0 */
/* 706 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 708 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 710 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 712 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 714 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 716 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 718 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter DesiredAccess */

/* 720 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 722 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 724 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 726 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 728 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 730 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Parameter RelativeId */

/* 732 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 734 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 736 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 738 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 740 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 742 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateUsersInDomain */

/* 744 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 746 */	NdrFcLong( 0x0 ),	/* 0 */
/* 750 */	NdrFcShort( 0xd ),	/* 13 */
/* 752 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 754 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 756 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 758 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 760 */	NdrFcShort( 0x50 ),	/* 80 */
/* 762 */	NdrFcShort( 0x40 ),	/* 64 */
/* 764 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x7,		/* 7 */
/* 766 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 768 */	NdrFcShort( 0x1 ),	/* 1 */
/* 770 */	NdrFcShort( 0x0 ),	/* 0 */
/* 772 */	NdrFcShort( 0x0 ),	/* 0 */
/* 774 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 776 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 778 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 780 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 782 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 784 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 786 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserAccountControl */

/* 788 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 790 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 792 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 794 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 796 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 798 */	NdrFcShort( 0xae ),	/* Type Offset=174 */

	/* Parameter PreferedMaximumLength */

/* 800 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 802 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 804 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 806 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 808 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 810 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 812 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 814 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 816 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateAliasInDomain */

/* 818 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 820 */	NdrFcLong( 0x0 ),	/* 0 */
/* 824 */	NdrFcShort( 0xe ),	/* 14 */
/* 826 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 828 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 830 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 832 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 834 */	NdrFcShort( 0x2c ),	/* 44 */
/* 836 */	NdrFcShort( 0x5c ),	/* 92 */
/* 838 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 840 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 842 */	NdrFcShort( 0x0 ),	/* 0 */
/* 844 */	NdrFcShort( 0x1 ),	/* 1 */
/* 846 */	NdrFcShort( 0x0 ),	/* 0 */
/* 848 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 850 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 852 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 854 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AccountName */

/* 856 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 858 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 860 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter DesiredAccess */

/* 862 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 864 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 866 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasHandle */

/* 868 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 870 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 872 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Parameter RelativeId */

/* 874 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 876 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 878 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 880 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 882 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 884 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrEnumerateAliasesInDomain */

/* 886 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 888 */	NdrFcLong( 0x0 ),	/* 0 */
/* 892 */	NdrFcShort( 0xf ),	/* 15 */
/* 894 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 896 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 898 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 900 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 902 */	NdrFcShort( 0x48 ),	/* 72 */
/* 904 */	NdrFcShort( 0x40 ),	/* 64 */
/* 906 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x6,		/* 6 */
/* 908 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 910 */	NdrFcShort( 0x1 ),	/* 1 */
/* 912 */	NdrFcShort( 0x0 ),	/* 0 */
/* 914 */	NdrFcShort( 0x0 ),	/* 0 */
/* 916 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 918 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 920 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 922 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter EnumerationContext */

/* 924 */	NdrFcShort( 0x158 ),	/* Flags:  in, out, base type, simple ref, */
/* 926 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 928 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 930 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 932 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 934 */	NdrFcShort( 0xae ),	/* Type Offset=174 */

	/* Parameter PreferedMaximumLength */

/* 936 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 938 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 940 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter CountReturned */

/* 942 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 944 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 946 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 948 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 950 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 952 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetAliasMembership */

/* 954 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 956 */	NdrFcLong( 0x0 ),	/* 0 */
/* 960 */	NdrFcShort( 0x10 ),	/* 16 */
/* 962 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 964 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 966 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 968 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 970 */	NdrFcShort( 0x24 ),	/* 36 */
/* 972 */	NdrFcShort( 0x8 ),	/* 8 */
/* 974 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 976 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 978 */	NdrFcShort( 0x1 ),	/* 1 */
/* 980 */	NdrFcShort( 0x1 ),	/* 1 */
/* 982 */	NdrFcShort( 0x0 ),	/* 0 */
/* 984 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 986 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 988 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 990 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter SidArray */

/* 992 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 994 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 996 */	NdrFcShort( 0x24c ),	/* Type Offset=588 */

	/* Parameter Membership */

/* 998 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1000 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1002 */	NdrFcShort( 0x270 ),	/* Type Offset=624 */

	/* Return value */

/* 1004 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1006 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1008 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrLookupNamesInDomain */

/* 1010 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1012 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1016 */	NdrFcShort( 0x11 ),	/* 17 */
/* 1018 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 1020 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1022 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1024 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1026 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1028 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1030 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 1032 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 1034 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1036 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1038 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1040 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1042 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1044 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1046 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Count */

/* 1048 */	NdrFcShort( 0x88 ),	/* Flags:  in, by val, */
/* 1050 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1052 */	NdrFcShort( 0x280 ),	/* 640 */

	/* Parameter Names */

/* 1054 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 1056 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1058 */	NdrFcShort( 0x28a ),	/* Type Offset=650 */

	/* Parameter RelativeIds */

/* 1060 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1062 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1064 */	NdrFcShort( 0x270 ),	/* Type Offset=624 */

	/* Parameter Use */

/* 1066 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1068 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1070 */	NdrFcShort( 0x270 ),	/* Type Offset=624 */

	/* Return value */

/* 1072 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1074 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 1076 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrLookupIdsInDomain */

/* 1078 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1080 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1084 */	NdrFcShort( 0x12 ),	/* 18 */
/* 1086 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 1088 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1090 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1092 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1094 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1096 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1098 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x6,		/* 6 */
/* 1100 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 1102 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1104 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1106 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1108 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1110 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1112 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1114 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Count */

/* 1116 */	NdrFcShort( 0x88 ),	/* Flags:  in, by val, */
/* 1118 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1120 */	NdrFcShort( 0x2a0 ),	/* 672 */

	/* Parameter RelativeIds */

/* 1122 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1124 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1126 */	NdrFcShort( 0x2ae ),	/* Type Offset=686 */

	/* Parameter Names */

/* 1128 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1130 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1132 */	NdrFcShort( 0x2da ),	/* Type Offset=730 */

	/* Parameter Use */

/* 1134 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1136 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1138 */	NdrFcShort( 0x270 ),	/* Type Offset=624 */

	/* Return value */

/* 1140 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1142 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 1144 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenGroup */

/* 1146 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1148 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1152 */	NdrFcShort( 0x13 ),	/* 19 */
/* 1154 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 1156 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1158 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1160 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1162 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1164 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1166 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1168 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1170 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1172 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1174 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1176 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1178 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1180 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1182 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1184 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1186 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1188 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupId */

/* 1190 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1192 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1194 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter GroupHandle */

/* 1196 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1198 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1200 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Return value */

/* 1202 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1204 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1206 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationGroup */

/* 1208 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1210 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1214 */	NdrFcShort( 0x14 ),	/* 20 */
/* 1216 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1218 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1220 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1222 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1224 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1226 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1228 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 1230 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1232 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1234 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1236 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1238 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1240 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1242 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1244 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter GroupInformationClass */

/* 1246 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1248 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1250 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1252 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1254 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1256 */	NdrFcShort( 0x2ea ),	/* Type Offset=746 */

	/* Return value */

/* 1258 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1260 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1262 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationGroup */

/* 1264 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1266 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1270 */	NdrFcShort( 0x15 ),	/* 21 */
/* 1272 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1274 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1276 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1278 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1280 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1282 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1284 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 1286 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1288 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1290 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1292 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1294 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1296 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1298 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1300 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter GroupInformationClass */

/* 1302 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1304 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1306 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1308 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1310 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1312 */	NdrFcShort( 0x33e ),	/* Type Offset=830 */

	/* Return value */

/* 1314 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1316 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1318 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMemberToGroup */

/* 1320 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1322 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1326 */	NdrFcShort( 0x16 ),	/* 22 */
/* 1328 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1330 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1332 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1334 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1336 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1338 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1340 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 1342 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1344 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1346 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1348 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1350 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1352 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1354 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1356 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1358 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1360 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1362 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Attributes */

/* 1364 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1366 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1368 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1370 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1372 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1374 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteGroup */

/* 1376 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1378 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1382 */	NdrFcShort( 0x17 ),	/* 23 */
/* 1384 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1386 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 1388 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1390 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1392 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1394 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1396 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1398 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1400 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1402 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1404 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1406 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1408 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 1410 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1412 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 1414 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1416 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1418 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromGroup */

/* 1420 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1422 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1426 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1428 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1430 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1432 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1434 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1436 */	NdrFcShort( 0x2c ),	/* 44 */
/* 1438 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1440 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 1442 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1444 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1446 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1448 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1450 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1452 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1454 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1456 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1458 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1460 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1462 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1464 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1466 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1468 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetMembersInGroup */

/* 1470 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1472 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1476 */	NdrFcShort( 0x19 ),	/* 25 */
/* 1478 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1480 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1482 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1484 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1486 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1488 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1490 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 1492 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1494 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1496 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1498 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1500 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1502 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1504 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1506 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Members */

/* 1508 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1510 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1512 */	NdrFcShort( 0x348 ),	/* Type Offset=840 */

	/* Return value */

/* 1514 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1516 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1518 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetMemberAttributesOfGroup */

/* 1520 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1522 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1526 */	NdrFcShort( 0x1a ),	/* 26 */
/* 1528 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1530 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1532 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1534 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1536 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1538 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1540 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x4,		/* 4 */
/* 1542 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1544 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1546 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1548 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1550 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter GroupHandle */

/* 1552 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1554 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1556 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1558 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1560 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1562 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Attributes */

/* 1564 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1566 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1568 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 1570 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1572 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1574 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenAlias */

/* 1576 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1578 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1582 */	NdrFcShort( 0x1b ),	/* 27 */
/* 1584 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 1586 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1588 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1590 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1592 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1594 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1596 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1598 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1600 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1602 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1604 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1606 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1608 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1610 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1612 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1614 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1616 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1618 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasId */

/* 1620 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1622 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1624 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter AliasHandle */

/* 1626 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1628 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1630 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Return value */

/* 1632 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1634 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1636 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationAlias */

/* 1638 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1640 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1644 */	NdrFcShort( 0x1c ),	/* 28 */
/* 1646 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1648 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1650 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1652 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1654 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1656 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1658 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 1660 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1662 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1664 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1666 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1668 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1670 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1672 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1674 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AliasInformationClass */

/* 1676 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1678 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1680 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1682 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 1684 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1686 */	NdrFcShort( 0x366 ),	/* Type Offset=870 */

	/* Return value */

/* 1688 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1690 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1692 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationAlias */

/* 1694 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1696 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1700 */	NdrFcShort( 0x1d ),	/* 29 */
/* 1702 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 1704 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1706 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1708 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1710 */	NdrFcShort( 0x2a ),	/* 42 */
/* 1712 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1714 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 1716 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1718 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1720 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1722 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1724 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1726 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1728 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1730 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter AliasInformationClass */

/* 1732 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1734 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1736 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 1738 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1740 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1742 */	NdrFcShort( 0x3a8 ),	/* Type Offset=936 */

	/* Return value */

/* 1744 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1746 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1748 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteAlias */

/* 1750 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1752 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1756 */	NdrFcShort( 0x1e ),	/* 30 */
/* 1758 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1760 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 1762 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1764 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1766 */	NdrFcShort( 0x38 ),	/* 56 */
/* 1768 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1770 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 1772 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1774 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1776 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1778 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1780 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1782 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 1784 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1786 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 1788 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1790 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1792 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMemberToAlias */

/* 1794 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1796 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1800 */	NdrFcShort( 0x1f ),	/* 31 */
/* 1802 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1804 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1806 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1808 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1810 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1812 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1814 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 1816 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1818 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1820 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1822 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1824 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1826 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1828 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1830 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1832 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1834 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1836 */	NdrFcShort( 0x9c ),	/* Type Offset=156 */

	/* Return value */

/* 1838 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1840 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1842 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromAlias */

/* 1844 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1846 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1850 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1852 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1854 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1856 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1858 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1860 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1862 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1864 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 1866 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 1868 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1870 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1872 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1874 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1876 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1878 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1880 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberId */

/* 1882 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 1884 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1886 */	NdrFcShort( 0x9c ),	/* Type Offset=156 */

	/* Return value */

/* 1888 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1890 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1892 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetMembersInAlias */

/* 1894 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1896 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1900 */	NdrFcShort( 0x21 ),	/* 33 */
/* 1902 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1904 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1906 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1908 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1910 */	NdrFcShort( 0x24 ),	/* 36 */
/* 1912 */	NdrFcShort( 0x8 ),	/* 8 */
/* 1914 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 1916 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 1918 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1920 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1922 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1924 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 1926 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1928 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1930 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Members */

/* 1932 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 1934 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1936 */	NdrFcShort( 0x3b6 ),	/* Type Offset=950 */

	/* Return value */

/* 1938 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 1940 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1942 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOpenUser */

/* 1944 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 1946 */	NdrFcLong( 0x0 ),	/* 0 */
/* 1950 */	NdrFcShort( 0x22 ),	/* 34 */
/* 1952 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 1954 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 1956 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1958 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 1960 */	NdrFcShort( 0x34 ),	/* 52 */
/* 1962 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1964 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x5,		/* 5 */
/* 1966 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 1968 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1970 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1972 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1974 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 1976 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 1978 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 1980 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DesiredAccess */

/* 1982 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1984 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1986 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserId */

/* 1988 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 1990 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 1992 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 1994 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 1996 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 1998 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Return value */

/* 2000 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2002 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2004 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrDeleteUser */

/* 2006 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2008 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2012 */	NdrFcShort( 0x23 ),	/* 35 */
/* 2014 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2016 */	0x30,		/* FC_BIND_CONTEXT */
			0xe0,		/* Ctxt flags:  via ptr, in, out, */
/* 2018 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2020 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2022 */	NdrFcShort( 0x38 ),	/* 56 */
/* 2024 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2026 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x2,		/* 2 */
/* 2028 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2030 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2032 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2034 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2036 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2038 */	NdrFcShort( 0x118 ),	/* Flags:  in, out, simple ref, */
/* 2040 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2042 */	NdrFcShort( 0x12 ),	/* Type Offset=18 */

	/* Return value */

/* 2044 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2046 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2048 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationUser */

/* 2050 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2052 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2056 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2058 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2060 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2062 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2064 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2066 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2068 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2070 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2072 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2074 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2076 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2078 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2080 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2082 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2084 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2086 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2088 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2090 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2092 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2094 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2096 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2098 */	NdrFcShort( 0x3c6 ),	/* Type Offset=966 */

	/* Return value */

/* 2100 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2102 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2104 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationUser */

/* 2106 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2108 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2112 */	NdrFcShort( 0x25 ),	/* 37 */
/* 2114 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2116 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2118 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2120 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2122 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2124 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2126 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 2128 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2130 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2132 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2134 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2136 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2138 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2140 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2142 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2144 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2146 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2148 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2150 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2152 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2154 */	NdrFcShort( 0x668 ),	/* Type Offset=1640 */

	/* Return value */

/* 2156 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2158 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2160 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrChangePasswordUser */

/* 2162 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2164 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2168 */	NdrFcShort( 0x26 ),	/* 38 */
/* 2170 */	NdrFcShort( 0x60 ),	/* X64 Stack size/offset = 96 */
/* 2172 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2174 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2176 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2178 */	NdrFcShort( 0x1d0 ),	/* 464 */
/* 2180 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2182 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0xc,		/* 12 */
/* 2184 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2186 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2188 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2190 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2192 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2194 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2196 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2198 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter LmPresent */

/* 2200 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2202 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2204 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter OldLmEncryptedWithNewLm */

/* 2206 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2208 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2210 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter NewLmEncryptedWithOldLm */

/* 2212 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2214 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2216 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter NtPresent */

/* 2218 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2220 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2222 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter OldNtEncryptedWithNewNt */

/* 2224 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2226 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2228 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter NewNtEncryptedWithOldNt */

/* 2230 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2232 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 2234 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter NtCrossEncryptionPresent */

/* 2236 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2238 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 2240 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter NewNtEncryptedWithNewLm */

/* 2242 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2244 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 2246 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter LmCrossEncryptionPresent */

/* 2248 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2250 */	NdrFcShort( 0x48 ),	/* X64 Stack size/offset = 72 */
/* 2252 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter NewLmEncryptedWithNewNt */

/* 2254 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 2256 */	NdrFcShort( 0x50 ),	/* X64 Stack size/offset = 80 */
/* 2258 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Return value */

/* 2260 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2262 */	NdrFcShort( 0x58 ),	/* X64 Stack size/offset = 88 */
/* 2264 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetGroupsForUser */

/* 2266 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2268 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2272 */	NdrFcShort( 0x27 ),	/* 39 */
/* 2274 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2276 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2278 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2280 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2282 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2284 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2286 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x3,		/* 3 */
/* 2288 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2290 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2292 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2294 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2296 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2298 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2300 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2302 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Groups */

/* 2304 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2306 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2308 */	NdrFcShort( 0x676 ),	/* Type Offset=1654 */

	/* Return value */

/* 2310 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2312 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2314 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation */

/* 2316 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2318 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2322 */	NdrFcShort( 0x28 ),	/* 40 */
/* 2324 */	NdrFcShort( 0x48 ),	/* X64 Stack size/offset = 72 */
/* 2326 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2328 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2330 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2332 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2334 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2336 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2338 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2340 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2342 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2344 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2346 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2348 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2350 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2352 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2354 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2356 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2358 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 2360 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2362 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2364 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 2366 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2368 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2370 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 2372 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2374 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2376 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 2378 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2380 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2382 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 2384 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2386 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 2388 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2390 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 2392 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 2394 */	NdrFcShort( 0x6a8 ),	/* Type Offset=1704 */

	/* Return value */

/* 2396 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2398 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 2400 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDisplayEnumerationIndex */

/* 2402 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2404 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2408 */	NdrFcShort( 0x29 ),	/* 41 */
/* 2410 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2412 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2414 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2416 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2418 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2420 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2422 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2424 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2426 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2428 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2430 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2432 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2434 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2436 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2438 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2440 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2442 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2444 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Prefix */

/* 2446 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2448 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2450 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter Index */

/* 2452 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2454 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2456 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2458 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2460 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2462 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum42NotUsedOnWire */

/* 2464 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2466 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2470 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2472 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2474 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 2476 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2478 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2480 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2482 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 2484 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2486 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2488 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2492 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum43NotUsedOnWire */


	/* Parameter IDL_handle */

/* 2494 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2496 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2500 */	NdrFcShort( 0x2b ),	/* 43 */
/* 2502 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2504 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 2506 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2508 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2510 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2512 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 2514 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2516 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2518 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2520 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2522 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrGetUserDomainPasswordInformation */


	/* Parameter IDL_handle */

/* 2524 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2526 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2530 */	NdrFcShort( 0x2c ),	/* 44 */
/* 2532 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2534 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2536 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2538 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2540 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2542 */	NdrFcShort( 0x34 ),	/* 52 */
/* 2544 */	0x44,		/* Oi2 Flags:  has return, has ext, */
			0x3,		/* 3 */
/* 2546 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 2548 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2550 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2552 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2554 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2556 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2558 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2560 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter PasswordInformation */

/* 2562 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
/* 2564 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2566 */	NdrFcShort( 0x7d0 ),	/* Type Offset=2000 */

	/* Return value */

/* 2568 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2570 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2572 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMemberFromForeignDomain */

/* 2574 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2576 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2580 */	NdrFcShort( 0x2d ),	/* 45 */
/* 2582 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2584 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2586 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2588 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2590 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2592 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2594 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 2596 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2598 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2600 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2602 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2604 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2606 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2608 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2610 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MemberSid */

/* 2612 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2614 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2616 */	NdrFcShort( 0x9c ),	/* Type Offset=156 */

	/* Return value */

/* 2618 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2620 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2622 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationDomain2 */

/* 2624 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2626 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2630 */	NdrFcShort( 0x2e ),	/* 46 */
/* 2632 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2634 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2636 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2638 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2640 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2642 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2644 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2646 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2648 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2650 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2652 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2654 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2656 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2658 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2660 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DomainInformationClass */

/* 2662 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2664 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2666 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2668 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2670 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2672 */	NdrFcShort( 0x7d8 ),	/* Type Offset=2008 */

	/* Return value */

/* 2674 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2676 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2678 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryInformationUser2 */

/* 2680 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2682 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2686 */	NdrFcShort( 0x2f ),	/* 47 */
/* 2688 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2690 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2692 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2694 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2696 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2698 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2700 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 2702 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2704 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2706 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2708 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2710 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 2712 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2714 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2716 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 2718 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2720 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2722 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2724 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 2726 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2728 */	NdrFcShort( 0x7ea ),	/* Type Offset=2026 */

	/* Return value */

/* 2730 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2732 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2734 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation2 */

/* 2736 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2738 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2742 */	NdrFcShort( 0x30 ),	/* 48 */
/* 2744 */	NdrFcShort( 0x48 ),	/* X64 Stack size/offset = 72 */
/* 2746 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2748 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2750 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2752 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2754 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2756 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2758 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2760 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2762 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2764 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2766 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2768 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2770 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2772 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2774 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2776 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2778 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 2780 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2782 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2784 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 2786 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2788 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2790 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 2792 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2794 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2796 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 2798 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2800 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2802 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 2804 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2806 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 2808 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 2810 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 2812 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 2814 */	NdrFcShort( 0x800 ),	/* Type Offset=2048 */

	/* Return value */

/* 2816 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2818 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 2820 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDisplayEnumerationIndex2 */

/* 2822 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2824 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2828 */	NdrFcShort( 0x31 ),	/* 49 */
/* 2830 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2832 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2834 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2836 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2838 */	NdrFcShort( 0x2a ),	/* 42 */
/* 2840 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2842 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 2844 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2846 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2848 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2850 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2852 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2854 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2856 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2858 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 2860 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2862 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2864 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Prefix */

/* 2866 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2868 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2870 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter Index */

/* 2872 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2874 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2876 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2878 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2880 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2882 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrCreateUser2InDomain */

/* 2884 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2886 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2890 */	NdrFcShort( 0x32 ),	/* 50 */
/* 2892 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 2894 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2896 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2898 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2900 */	NdrFcShort( 0x34 ),	/* 52 */
/* 2902 */	NdrFcShort( 0x78 ),	/* 120 */
/* 2904 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 2906 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 2908 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2910 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2912 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2914 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2916 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2918 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2920 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Name */

/* 2922 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 2924 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2926 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter AccountType */

/* 2928 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2930 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2932 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DesiredAccess */

/* 2934 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 2936 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 2938 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserHandle */

/* 2940 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 2942 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2944 */	NdrFcShort( 0xf8 ),	/* Type Offset=248 */

	/* Parameter GrantedAccess */

/* 2946 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2948 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 2950 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter RelativeId */

/* 2952 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 2954 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 2956 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 2958 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 2960 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 2962 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrQueryDisplayInformation3 */

/* 2964 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 2966 */	NdrFcLong( 0x0 ),	/* 0 */
/* 2970 */	NdrFcShort( 0x33 ),	/* 51 */
/* 2972 */	NdrFcShort( 0x48 ),	/* X64 Stack size/offset = 72 */
/* 2974 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 2976 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 2978 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 2980 */	NdrFcShort( 0x42 ),	/* 66 */
/* 2982 */	NdrFcShort( 0x40 ),	/* 64 */
/* 2984 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x9,		/* 9 */
/* 2986 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 2988 */	NdrFcShort( 0x1 ),	/* 1 */
/* 2990 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2992 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2994 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter DomainHandle */

/* 2996 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 2998 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3000 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter DisplayInformationClass */

/* 3002 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3004 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3006 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Index */

/* 3008 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3010 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3012 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter EntryCount */

/* 3014 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3016 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3018 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter PreferredMaximumLength */

/* 3020 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3022 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3024 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalAvailable */

/* 3026 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3028 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3030 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter TotalReturned */

/* 3032 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3034 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 3036 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 3038 */	NdrFcShort( 0x4113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=16 */
/* 3040 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 3042 */	NdrFcShort( 0x80e ),	/* Type Offset=2062 */

	/* Return value */

/* 3044 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3046 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 3048 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrAddMultipleMembersToAlias */

/* 3050 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3052 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3056 */	NdrFcShort( 0x34 ),	/* 52 */
/* 3058 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3060 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3062 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3064 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3066 */	NdrFcShort( 0x24 ),	/* 36 */
/* 3068 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3070 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3072 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3074 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3076 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3078 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3080 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 3082 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3084 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3086 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MembersBuffer */

/* 3088 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3090 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3092 */	NdrFcShort( 0x24c ),	/* Type Offset=588 */

	/* Return value */

/* 3094 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3096 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3098 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRemoveMultipleMembersFromAlias */

/* 3100 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3102 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3106 */	NdrFcShort( 0x35 ),	/* 53 */
/* 3108 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3110 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3112 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3114 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3116 */	NdrFcShort( 0x24 ),	/* 36 */
/* 3118 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3120 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3122 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3124 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3126 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3128 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3130 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter AliasHandle */

/* 3132 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3134 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3136 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter MembersBuffer */

/* 3138 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3140 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3142 */	NdrFcShort( 0x24c ),	/* Type Offset=588 */

	/* Return value */

/* 3144 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3146 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3148 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrOemChangePasswordUser2 */

/* 3150 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3152 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3156 */	NdrFcShort( 0x36 ),	/* 54 */
/* 3158 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 3160 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3162 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3164 */	NdrFcShort( 0x27c ),	/* 636 */
/* 3166 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3168 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3170 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3172 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3174 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3176 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3178 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3180 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3182 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3184 */	NdrFcShort( 0x818 ),	/* Type Offset=2072 */

	/* Parameter ServerName */

/* 3186 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3188 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3190 */	NdrFcShort( 0x774 ),	/* Type Offset=1908 */

	/* Parameter UserName */

/* 3192 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3194 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3196 */	NdrFcShort( 0x820 ),	/* Type Offset=2080 */

	/* Parameter NewPasswordEncryptedWithOldLm */

/* 3198 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3200 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3202 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter OldLmOwfPasswordEncryptedWithNewLm */

/* 3204 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3206 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3208 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrUnicodeChangePasswordUser2 */


	/* Return value */

/* 3210 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3212 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3216 */	NdrFcShort( 0x37 ),	/* 55 */
/* 3218 */	NdrFcShort( 0x48 ),	/* X64 Stack size/offset = 72 */
/* 3220 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3222 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3224 */	NdrFcShort( 0x4fd ),	/* 1277 */
/* 3226 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3228 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 3230 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3232 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3234 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3236 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3238 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3240 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3242 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3244 */	NdrFcShort( 0x824 ),	/* Type Offset=2084 */

	/* Parameter ServerName */

/* 3246 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3248 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3250 */	NdrFcShort( 0x66 ),	/* Type Offset=102 */

	/* Parameter UserName */

/* 3252 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3254 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3256 */	NdrFcShort( 0x820 ),	/* Type Offset=2080 */

	/* Parameter NewPasswordEncryptedWithOldNt */

/* 3258 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3260 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3262 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter OldNtOwfPasswordEncryptedWithNewNt */

/* 3264 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3266 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3268 */	0x2,		/* FC_CHAR */
			0x0,		/* 0 */

	/* Parameter LmPresent */

/* 3270 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3272 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 3274 */	NdrFcShort( 0x820 ),	/* Type Offset=2080 */

	/* Parameter NewPasswordEncryptedWithOldLm */

/* 3276 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3278 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 3280 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter OldLmOwfPasswordEncryptedWithNewNt */

/* 3282 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3284 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 3286 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrGetDomainPasswordInformation */


	/* Return value */

/* 3288 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3290 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3294 */	NdrFcShort( 0x38 ),	/* 56 */
/* 3296 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3298 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3300 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3302 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3304 */	NdrFcShort( 0x34 ),	/* 52 */
/* 3306 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x3,		/* 3 */
/* 3308 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3310 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3312 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3314 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3316 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3318 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3320 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3322 */	NdrFcShort( 0x824 ),	/* Type Offset=2084 */

	/* Parameter Unused */

/* 3324 */	NdrFcShort( 0x2112 ),	/* Flags:  must free, out, simple ref, srv alloc size=8 */
/* 3326 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3328 */	NdrFcShort( 0x7d0 ),	/* Type Offset=2000 */

	/* Parameter PasswordInformation */

/* 3330 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3332 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3334 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrConnect2 */


	/* Return value */

/* 3336 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3338 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3342 */	NdrFcShort( 0x39 ),	/* 57 */
/* 3344 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3346 */	0x31,		/* FC_BIND_GENERIC */
			0x8,		/* 8 */
/* 3348 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3350 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3352 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3354 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3356 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3358 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3360 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3362 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3364 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3366 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3368 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3370 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3372 */	NdrFcShort( 0x828 ),	/* Type Offset=2088 */

	/* Parameter ServerHandle */

/* 3374 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3376 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3378 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter DesiredAccess */

/* 3380 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3382 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3384 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3386 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3388 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3390 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetInformationUser2 */

/* 3392 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3394 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3398 */	NdrFcShort( 0x3a ),	/* 58 */
/* 3400 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3402 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3404 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3406 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3408 */	NdrFcShort( 0x2a ),	/* 42 */
/* 3410 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3412 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3414 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3416 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3418 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3420 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3422 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter UserHandle */

/* 3424 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3426 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3428 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter UserInformationClass */

/* 3430 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3432 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3434 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter Buffer */

/* 3436 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3438 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3440 */	NdrFcShort( 0x830 ),	/* Type Offset=2096 */

	/* Return value */

/* 3442 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3444 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3446 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum59NotUsedOnWire */

/* 3448 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3450 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3454 */	NdrFcShort( 0x3b ),	/* 59 */
/* 3456 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3458 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3460 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3462 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3464 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3466 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3468 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3470 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3472 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3474 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3476 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum60NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3478 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3480 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3484 */	NdrFcShort( 0x3c ),	/* 60 */
/* 3486 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3488 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3490 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3492 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3494 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3496 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3498 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3500 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3502 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3504 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3506 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum61NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3508 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3510 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3514 */	NdrFcShort( 0x3d ),	/* 61 */
/* 3516 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3518 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3520 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3522 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3524 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3526 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3528 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3530 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3532 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3534 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3536 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrConnect4 */


	/* Parameter IDL_handle */

/* 3538 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3540 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3544 */	NdrFcShort( 0x3e ),	/* 62 */
/* 3546 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3548 */	0x31,		/* FC_BIND_GENERIC */
			0x8,		/* 8 */
/* 3550 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3552 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3554 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3556 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3558 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x5,		/* 5 */
/* 3560 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3562 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3564 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3566 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3568 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3570 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3572 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3574 */	NdrFcShort( 0x828 ),	/* Type Offset=2088 */

	/* Parameter ServerHandle */

/* 3576 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3578 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3580 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Parameter ClientRevision */

/* 3582 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3584 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3586 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter DesiredAccess */

/* 3588 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3590 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3592 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Return value */

/* 3594 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3596 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3598 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum63NotUsedOnWire */

/* 3600 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3602 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3606 */	NdrFcShort( 0x3f ),	/* 63 */
/* 3608 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3610 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3612 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3614 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3616 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3618 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3620 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3622 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3624 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3626 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3628 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure SamrConnect5 */


	/* Parameter IDL_handle */

/* 3630 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3632 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3636 */	NdrFcShort( 0x40 ),	/* 64 */
/* 3638 */	NdrFcShort( 0x40 ),	/* X64 Stack size/offset = 64 */
/* 3640 */	0x31,		/* FC_BIND_GENERIC */
			0x8,		/* 8 */
/* 3642 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3644 */	0x0,		/* 0 */
			0x5c,		/* FC_PAD */
/* 3646 */	NdrFcShort( 0x10 ),	/* 16 */
/* 3648 */	NdrFcShort( 0x5c ),	/* 92 */
/* 3650 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x8,		/* 8 */
/* 3652 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3654 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3656 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3658 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3660 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ServerName */

/* 3662 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3664 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3666 */	NdrFcShort( 0x828 ),	/* Type Offset=2088 */

	/* Parameter DesiredAccess */

/* 3668 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3670 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3672 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter InVersion */

/* 3674 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3676 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3678 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter InRevisionInfo */

/* 3680 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3682 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3684 */	NdrFcShort( 0x83e ),	/* Type Offset=2110 */

	/* Parameter OutVersion */

/* 3686 */	NdrFcShort( 0x2150 ),	/* Flags:  out, base type, simple ref, srv alloc size=8 */
/* 3688 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3690 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter OutRevisionInfo */

/* 3692 */	NdrFcShort( 0x2113 ),	/* Flags:  must size, must free, out, simple ref, srv alloc size=8 */
/* 3694 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3696 */	NdrFcShort( 0x858 ),	/* Type Offset=2136 */

	/* Parameter ServerHandle */

/* 3698 */	NdrFcShort( 0x110 ),	/* Flags:  out, simple ref, */
/* 3700 */	NdrFcShort( 0x30 ),	/* X64 Stack size/offset = 48 */
/* 3702 */	NdrFcShort( 0xa ),	/* Type Offset=10 */

	/* Return value */

/* 3704 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3706 */	NdrFcShort( 0x38 ),	/* X64 Stack size/offset = 56 */
/* 3708 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrRidToSid */

/* 3710 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3712 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3716 */	NdrFcShort( 0x41 ),	/* 65 */
/* 3718 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3720 */	0x30,		/* FC_BIND_CONTEXT */
			0x40,		/* Ctxt flags:  in, */
/* 3722 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3724 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 3726 */	NdrFcShort( 0x2c ),	/* 44 */
/* 3728 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3730 */	0x45,		/* Oi2 Flags:  srv must size, has return, has ext, */
			0x4,		/* 4 */
/* 3732 */	0xa,		/* 10 */
			0x3,		/* Ext Flags:  new corr desc, clt corr check, */
/* 3734 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3736 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3738 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3740 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter ObjectHandle */

/* 3742 */	NdrFcShort( 0x8 ),	/* Flags:  in, */
/* 3744 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3746 */	NdrFcShort( 0x16 ),	/* Type Offset=22 */

	/* Parameter Rid */

/* 3748 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3750 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3752 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter Sid */

/* 3754 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 3756 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3758 */	NdrFcShort( 0x78 ),	/* Type Offset=120 */

	/* Return value */

/* 3760 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3762 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3764 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrSetDSRMPassword */

/* 3766 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3768 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3772 */	NdrFcShort( 0x42 ),	/* 66 */
/* 3774 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3776 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3778 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3780 */	NdrFcShort( 0x4c ),	/* 76 */
/* 3782 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3784 */	0x46,		/* Oi2 Flags:  clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3786 */	0xa,		/* 10 */
			0x5,		/* Ext Flags:  new corr desc, srv corr check, */
/* 3788 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3790 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3792 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3794 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter BindingHandle */

/* 3796 */	NdrFcShort( 0xb ),	/* Flags:  must size, must free, in, */
/* 3798 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3800 */	NdrFcShort( 0x824 ),	/* Type Offset=2084 */

	/* Parameter Unused */

/* 3802 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3804 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3806 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Parameter UserId */

/* 3808 */	NdrFcShort( 0xa ),	/* Flags:  must free, in, */
/* 3810 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3812 */	NdrFcShort( 0x672 ),	/* Type Offset=1650 */

	/* Parameter EncryptedNtOwfPassword */

/* 3814 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3816 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3818 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure SamrValidatePassword */


	/* Return value */

/* 3820 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3822 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3826 */	NdrFcShort( 0x43 ),	/* 67 */
/* 3828 */	NdrFcShort( 0x28 ),	/* X64 Stack size/offset = 40 */
/* 3830 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3832 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3834 */	NdrFcShort( 0x6 ),	/* 6 */
/* 3836 */	NdrFcShort( 0x8 ),	/* 8 */
/* 3838 */	0x47,		/* Oi2 Flags:  srv must size, clt must size, has return, has ext, */
			0x4,		/* 4 */
/* 3840 */	0xa,		/* 10 */
			0x7,		/* Ext Flags:  new corr desc, clt corr check, srv corr check, */
/* 3842 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3844 */	NdrFcShort( 0x1 ),	/* 1 */
/* 3846 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3848 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Parameter Handle */

/* 3850 */	NdrFcShort( 0x48 ),	/* Flags:  in, base type, */
/* 3852 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3854 */	0xd,		/* FC_ENUM16 */
			0x0,		/* 0 */

	/* Parameter ValidationType */

/* 3856 */	NdrFcShort( 0x10b ),	/* Flags:  must size, must free, in, simple ref, */
/* 3858 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 3860 */	NdrFcShort( 0x866 ),	/* Type Offset=2150 */

	/* Parameter InputArg */

/* 3862 */	NdrFcShort( 0x2013 ),	/* Flags:  must size, must free, out, srv alloc size=8 */
/* 3864 */	NdrFcShort( 0x18 ),	/* X64 Stack size/offset = 24 */
/* 3866 */	NdrFcShort( 0x914 ),	/* Type Offset=2324 */

	/* Parameter OutputArg */

/* 3868 */	NdrFcShort( 0x70 ),	/* Flags:  out, return, base type, */
/* 3870 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 3872 */	0x8,		/* FC_LONG */
			0x0,		/* 0 */

	/* Procedure Opnum68NotUsedOnWire */


	/* Return value */

/* 3874 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3876 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3880 */	NdrFcShort( 0x44 ),	/* 68 */
/* 3882 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3884 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3886 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3888 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3890 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3892 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3894 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3896 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3898 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3900 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3902 */	NdrFcShort( 0x0 ),	/* 0 */

	/* Procedure Opnum69NotUsedOnWire */


	/* Parameter IDL_handle */

/* 3904 */	0x0,		/* 0 */
			0x48,		/* Old Flags:  */
/* 3906 */	NdrFcLong( 0x0 ),	/* 0 */
/* 3910 */	NdrFcShort( 0x45 ),	/* 69 */
/* 3912 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 3914 */	0x32,		/* FC_BIND_PRIMITIVE */
			0x0,		/* 0 */
/* 3916 */	NdrFcShort( 0x0 ),	/* X64 Stack size/offset = 0 */
/* 3918 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3920 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3922 */	0x40,		/* Oi2 Flags:  has ext, */
			0x0,		/* 0 */
/* 3924 */	0xa,		/* 10 */
			0x1,		/* Ext Flags:  new corr desc, */
/* 3926 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3928 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3930 */	NdrFcShort( 0x0 ),	/* 0 */
/* 3932 */	NdrFcShort( 0x0 ),	/* 0 */

			0x0
        ";

        // SAMR type format string generated by midl
        // Version: February 28, 2011
        private const string X64_TYPE_FORMAT_STRING = @"
				NdrFcShort( 0x0 ),	/* 0 */
/*  2 */	
			0x12, 0x8,	/* FC_UP [simple_pointer] */
/*  4 */	0x5,		/* FC_WCHAR */
			0x5c,		/* FC_PAD */
/*  6 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/*  8 */	NdrFcShort( 0x2 ),	/* Offset= 2 (10) */
/* 10 */	0x30,		/* FC_BIND_CONTEXT */
			0xa0,		/* Ctxt flags:  via ptr, out, */
/* 12 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 14 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 16 */	NdrFcShort( 0x2 ),	/* Offset= 2 (18) */
/* 18 */	0x30,		/* FC_BIND_CONTEXT */
			0xe1,		/* Ctxt flags:  via ptr, in, out, can't be null */
/* 20 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 22 */	0x30,		/* FC_BIND_CONTEXT */
			0x41,		/* Ctxt flags:  in, can't be null */
/* 24 */	0x0,		/* 0 */
			0x0,		/* 0 */
/* 26 */	
			0x11, 0x0,	/* FC_RP */
/* 28 */	NdrFcShort( 0x18 ),	/* Offset= 24 (52) */
/* 30 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 32 */	NdrFcLong( 0x0 ),	/* 0 */
/* 36 */	NdrFcLong( 0x40000 ),	/* 262144 */
/* 40 */	
			0x1b,		/* FC_CARRAY */
			0x0,		/* 0 */
/* 42 */	NdrFcShort( 0x1 ),	/* 1 */
/* 44 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 46 */	NdrFcShort( 0x0 ),	/* 0 */
/* 48 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 50 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 52 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 54 */	NdrFcShort( 0x10 ),	/* 16 */
/* 56 */	NdrFcShort( 0x0 ),	/* 0 */
/* 58 */	NdrFcShort( 0xa ),	/* Offset= 10 (68) */
/* 60 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 62 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (30) */
/* 64 */	0x40,		/* FC_STRUCTPAD4 */
			0x36,		/* FC_POINTER */
/* 66 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 68 */	
			0x12, 0x0,	/* FC_UP */
/* 70 */	NdrFcShort( 0xffe2 ),	/* Offset= -30 (40) */
/* 72 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 74 */	NdrFcShort( 0x2 ),	/* Offset= 2 (76) */
/* 76 */	
			0x12, 0x0,	/* FC_UP */
/* 78 */	NdrFcShort( 0xffe6 ),	/* Offset= -26 (52) */
/* 80 */	
			0x11, 0x0,	/* FC_RP */
/* 82 */	NdrFcShort( 0x14 ),	/* Offset= 20 (102) */
/* 84 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 86 */	NdrFcShort( 0x2 ),	/* 2 */
/* 88 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 90 */	NdrFcShort( 0x2 ),	/* 2 */
/* 92 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 94 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 96 */	NdrFcShort( 0x0 ),	/* 0 */
/* 98 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 100 */	0x5,		/* FC_WCHAR */
			0x5b,		/* FC_END */
/* 102 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 104 */	NdrFcShort( 0x10 ),	/* 16 */
/* 106 */	NdrFcShort( 0x0 ),	/* 0 */
/* 108 */	NdrFcShort( 0x8 ),	/* Offset= 8 (116) */
/* 110 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 112 */	0x40,		/* FC_STRUCTPAD4 */
			0x36,		/* FC_POINTER */
/* 114 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 116 */	
			0x12, 0x0,	/* FC_UP */
/* 118 */	NdrFcShort( 0xffde ),	/* Offset= -34 (84) */
/* 120 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 122 */	NdrFcShort( 0x2 ),	/* Offset= 2 (124) */
/* 124 */	
			0x12, 0x0,	/* FC_UP */
/* 126 */	NdrFcShort( 0x1e ),	/* Offset= 30 (156) */
/* 128 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 130 */	NdrFcShort( 0x6 ),	/* 6 */
/* 132 */	0x1,		/* FC_BYTE */
			0x5b,		/* FC_END */
/* 134 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 136 */	NdrFcShort( 0x6 ),	/* 6 */
/* 138 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 140 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (128) */
/* 142 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 144 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 146 */	NdrFcShort( 0x4 ),	/* 4 */
/* 148 */	0x4,		/* Corr desc: FC_USMALL */
			0x0,		/*  */
/* 150 */	NdrFcShort( 0xfff9 ),	/* -7 */
/* 152 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 154 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 156 */	
			0x17,		/* FC_CSTRUCT */
			0x3,		/* 3 */
/* 158 */	NdrFcShort( 0x8 ),	/* 8 */
/* 160 */	NdrFcShort( 0xfff0 ),	/* Offset= -16 (144) */
/* 162 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 164 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 166 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (134) */
/* 168 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 170 */	
			0x11, 0x8,	/* FC_RP [simple_pointer] */
/* 172 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 174 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 176 */	NdrFcShort( 0x2 ),	/* Offset= 2 (178) */
/* 178 */	
			0x12, 0x0,	/* FC_UP */
/* 180 */	NdrFcShort( 0x28 ),	/* Offset= 40 (220) */
/* 182 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 184 */	NdrFcShort( 0x18 ),	/* 24 */
/* 186 */	NdrFcShort( 0x0 ),	/* 0 */
/* 188 */	NdrFcShort( 0x0 ),	/* Offset= 0 (188) */
/* 190 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 192 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 194 */	NdrFcShort( 0xffa4 ),	/* Offset= -92 (102) */
/* 196 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 198 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 200 */	NdrFcShort( 0x0 ),	/* 0 */
/* 202 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 204 */	NdrFcShort( 0x0 ),	/* 0 */
/* 206 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 208 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 212 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 214 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 216 */	NdrFcShort( 0xffde ),	/* Offset= -34 (182) */
/* 218 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 220 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 222 */	NdrFcShort( 0x10 ),	/* 16 */
/* 224 */	NdrFcShort( 0x0 ),	/* 0 */
/* 226 */	NdrFcShort( 0x6 ),	/* Offset= 6 (232) */
/* 228 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 230 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 232 */	
			0x12, 0x0,	/* FC_UP */
/* 234 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (198) */
/* 236 */	
			0x11, 0xc,	/* FC_RP [alloced_on_stack] [simple_pointer] */
/* 238 */	0x8,		/* FC_LONG */
			0x5c,		/* FC_PAD */
/* 240 */	
			0x11, 0x0,	/* FC_RP */
/* 242 */	NdrFcShort( 0xffaa ),	/* Offset= -86 (156) */
/* 244 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 246 */	NdrFcShort( 0x2 ),	/* Offset= 2 (248) */
/* 248 */	0x30,		/* FC_BIND_CONTEXT */
			0xa0,		/* Ctxt flags:  via ptr, out, */
/* 250 */	0x0,		/* 0 */
			0x1,		/* 1 */
/* 252 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 254 */	NdrFcShort( 0x2 ),	/* Offset= 2 (256) */
/* 256 */	
			0x12, 0x0,	/* FC_UP */
/* 258 */	NdrFcShort( 0x2 ),	/* Offset= 2 (260) */
/* 260 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 262 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 264 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 266 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 268 */	NdrFcShort( 0x2 ),	/* Offset= 2 (270) */
/* 270 */	NdrFcShort( 0x70 ),	/* 112 */
/* 272 */	NdrFcShort( 0x700c ),	/* 28684 */
/* 274 */	NdrFcLong( 0x1 ),	/* 1 */
/* 278 */	NdrFcShort( 0x4e ),	/* Offset= 78 (356) */
/* 280 */	NdrFcLong( 0x2 ),	/* 2 */
/* 284 */	NdrFcShort( 0x58 ),	/* Offset= 88 (372) */
/* 286 */	NdrFcLong( 0x3 ),	/* 3 */
/* 290 */	NdrFcShort( 0x76 ),	/* Offset= 118 (408) */
/* 292 */	NdrFcLong( 0x4 ),	/* 4 */
/* 296 */	NdrFcShort( 0x7a ),	/* Offset= 122 (418) */
/* 298 */	NdrFcLong( 0x5 ),	/* 5 */
/* 302 */	NdrFcShort( 0x74 ),	/* Offset= 116 (418) */
/* 304 */	NdrFcLong( 0x7 ),	/* 7 */
/* 308 */	NdrFcShort( 0x7c ),	/* Offset= 124 (432) */
/* 310 */	NdrFcLong( 0x6 ),	/* 6 */
/* 314 */	NdrFcShort( 0x68 ),	/* Offset= 104 (418) */
/* 316 */	NdrFcLong( 0x8 ),	/* 8 */
/* 320 */	NdrFcShort( 0x7a ),	/* Offset= 122 (442) */
/* 322 */	NdrFcLong( 0x9 ),	/* 9 */
/* 326 */	NdrFcShort( 0x6a ),	/* Offset= 106 (432) */
/* 328 */	NdrFcLong( 0xb ),	/* 11 */
/* 332 */	NdrFcShort( 0x82 ),	/* Offset= 130 (462) */
/* 334 */	NdrFcLong( 0xc ),	/* 12 */
/* 338 */	NdrFcShort( 0x94 ),	/* Offset= 148 (486) */
/* 340 */	NdrFcLong( 0xd ),	/* 13 */
/* 344 */	NdrFcShort( 0xa2 ),	/* Offset= 162 (506) */
/* 346 */	NdrFcShort( 0xffff ),	/* Offset= -1 (345) */
/* 348 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 350 */	NdrFcShort( 0x8 ),	/* 8 */
/* 352 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 354 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 356 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 358 */	NdrFcShort( 0x18 ),	/* 24 */
/* 360 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 362 */	0x8,		/* FC_LONG */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 364 */	0x0,		/* 0 */
			NdrFcShort( 0xffef ),	/* Offset= -17 (348) */
			0x4c,		/* FC_EMBEDDED_COMPLEX */
/* 368 */	0x0,		/* 0 */
			NdrFcShort( 0xffeb ),	/* Offset= -21 (348) */
			0x5b,		/* FC_END */
/* 372 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 374 */	NdrFcShort( 0x58 ),	/* 88 */
/* 376 */	NdrFcShort( 0x0 ),	/* 0 */
/* 378 */	NdrFcShort( 0x0 ),	/* Offset= 0 (378) */
/* 380 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 382 */	NdrFcShort( 0xffde ),	/* Offset= -34 (348) */
/* 384 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 386 */	NdrFcShort( 0xfee4 ),	/* Offset= -284 (102) */
/* 388 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 390 */	NdrFcShort( 0xfee0 ),	/* Offset= -288 (102) */
/* 392 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 394 */	NdrFcShort( 0xfedc ),	/* Offset= -292 (102) */
/* 396 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 398 */	NdrFcShort( 0xffce ),	/* Offset= -50 (348) */
/* 400 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 402 */	0x2,		/* FC_CHAR */
			0x3f,		/* FC_STRUCTPAD3 */
/* 404 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 406 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 408 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 410 */	NdrFcShort( 0x8 ),	/* 8 */
/* 412 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 414 */	NdrFcShort( 0xffbe ),	/* Offset= -66 (348) */
/* 416 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 418 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 420 */	NdrFcShort( 0x10 ),	/* 16 */
/* 422 */	NdrFcShort( 0x0 ),	/* 0 */
/* 424 */	NdrFcShort( 0x0 ),	/* Offset= 0 (424) */
/* 426 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 428 */	NdrFcShort( 0xfeba ),	/* Offset= -326 (102) */
/* 430 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 432 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x1,		/* 1 */
/* 434 */	NdrFcShort( 0x4 ),	/* 4 */
/* 436 */	NdrFcShort( 0x0 ),	/* 0 */
/* 438 */	NdrFcShort( 0x0 ),	/* Offset= 0 (438) */
/* 440 */	0xd,		/* FC_ENUM16 */
			0x5b,		/* FC_END */
/* 442 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 444 */	NdrFcShort( 0x10 ),	/* 16 */
/* 446 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 448 */	NdrFcShort( 0xff9c ),	/* Offset= -100 (348) */
/* 450 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 452 */	NdrFcShort( 0xff98 ),	/* Offset= -104 (348) */
/* 454 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 456 */	
			0x15,		/* FC_STRUCT */
			0x7,		/* 7 */
/* 458 */	NdrFcShort( 0x8 ),	/* 8 */
/* 460 */	0xb,		/* FC_HYPER */
			0x5b,		/* FC_END */
/* 462 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 464 */	NdrFcShort( 0x6c ),	/* 108 */
/* 466 */	NdrFcShort( 0x0 ),	/* 0 */
/* 468 */	NdrFcShort( 0x0 ),	/* Offset= 0 (468) */
/* 470 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 472 */	NdrFcShort( 0xff9c ),	/* Offset= -100 (372) */
/* 474 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 476 */	NdrFcShort( 0xffec ),	/* Offset= -20 (456) */
/* 478 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 480 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (456) */
/* 482 */	0x6,		/* FC_SHORT */
			0x3e,		/* FC_STRUCTPAD2 */
/* 484 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 486 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 488 */	NdrFcShort( 0x18 ),	/* 24 */
/* 490 */	NdrFcShort( 0x0 ),	/* 0 */
/* 492 */	NdrFcShort( 0x0 ),	/* Offset= 0 (492) */
/* 494 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 496 */	NdrFcShort( 0xffd8 ),	/* Offset= -40 (456) */
/* 498 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 500 */	NdrFcShort( 0xffd4 ),	/* Offset= -44 (456) */
/* 502 */	0x6,		/* FC_SHORT */
			0x42,		/* FC_STRUCTPAD6 */
/* 504 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 506 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 508 */	NdrFcShort( 0x18 ),	/* 24 */
/* 510 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 512 */	NdrFcShort( 0xff5c ),	/* Offset= -164 (348) */
/* 514 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 516 */	NdrFcShort( 0xff58 ),	/* Offset= -168 (348) */
/* 518 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 520 */	NdrFcShort( 0xff54 ),	/* Offset= -172 (348) */
/* 522 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 524 */	
			0x11, 0x0,	/* FC_RP */
/* 526 */	NdrFcShort( 0x2 ),	/* Offset= 2 (528) */
/* 528 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 530 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 532 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 534 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 536 */	NdrFcShort( 0xfef6 ),	/* Offset= -266 (270) */
/* 538 */	
			0x11, 0x0,	/* FC_RP */
/* 540 */	NdrFcShort( 0x30 ),	/* Offset= 48 (588) */
/* 542 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 544 */	NdrFcLong( 0x0 ),	/* 0 */
/* 548 */	NdrFcLong( 0x400 ),	/* 1024 */
/* 552 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 554 */	NdrFcShort( 0x8 ),	/* 8 */
/* 556 */	NdrFcShort( 0x0 ),	/* 0 */
/* 558 */	NdrFcShort( 0x4 ),	/* Offset= 4 (562) */
/* 560 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 562 */	
			0x12, 0x0,	/* FC_UP */
/* 564 */	NdrFcShort( 0xfe68 ),	/* Offset= -408 (156) */
/* 566 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 568 */	NdrFcShort( 0x0 ),	/* 0 */
/* 570 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 572 */	NdrFcShort( 0x0 ),	/* 0 */
/* 574 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 576 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 580 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 582 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 584 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (552) */
/* 586 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 588 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 590 */	NdrFcShort( 0x10 ),	/* 16 */
/* 592 */	NdrFcShort( 0x0 ),	/* 0 */
/* 594 */	NdrFcShort( 0xa ),	/* Offset= 10 (604) */
/* 596 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 598 */	NdrFcShort( 0xffc8 ),	/* Offset= -56 (542) */
/* 600 */	0x40,		/* FC_STRUCTPAD4 */
			0x36,		/* FC_POINTER */
/* 602 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 604 */	
			0x12, 0x0,	/* FC_UP */
/* 606 */	NdrFcShort( 0xffd8 ),	/* Offset= -40 (566) */
/* 608 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 610 */	NdrFcShort( 0xe ),	/* Offset= 14 (624) */
/* 612 */	
			0x1b,		/* FC_CARRAY */
			0x3,		/* 3 */
/* 614 */	NdrFcShort( 0x4 ),	/* 4 */
/* 616 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 618 */	NdrFcShort( 0x0 ),	/* 0 */
/* 620 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 622 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 624 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 626 */	NdrFcShort( 0x10 ),	/* 16 */
/* 628 */	NdrFcShort( 0x0 ),	/* 0 */
/* 630 */	NdrFcShort( 0x6 ),	/* Offset= 6 (636) */
/* 632 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 634 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 636 */	
			0x12, 0x0,	/* FC_UP */
/* 638 */	NdrFcShort( 0xffe6 ),	/* Offset= -26 (612) */
/* 640 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 642 */	NdrFcLong( 0x0 ),	/* 0 */
/* 646 */	NdrFcLong( 0x3e8 ),	/* 1000 */
/* 650 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 652 */	NdrFcShort( 0x0 ),	/* 0 */
/* 654 */	0x40,		/* Corr desc:  constant, val=1000 */
			0x0,		/* 0 */
/* 656 */	NdrFcShort( 0x3e8 ),	/* 1000 */
/* 658 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 660 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 662 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 664 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 666 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 668 */	NdrFcShort( 0xfdca ),	/* Offset= -566 (102) */
/* 670 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 672 */	0xb7,		/* FC_RANGE */
			0x8,		/* 8 */
/* 674 */	NdrFcLong( 0x0 ),	/* 0 */
/* 678 */	NdrFcLong( 0x3e8 ),	/* 1000 */
/* 682 */	
			0x11, 0x0,	/* FC_RP */
/* 684 */	NdrFcShort( 0x2 ),	/* Offset= 2 (686) */
/* 686 */	
			0x1c,		/* FC_CVARRAY */
			0x3,		/* 3 */
/* 688 */	NdrFcShort( 0x4 ),	/* 4 */
/* 690 */	0x40,		/* Corr desc:  constant, val=1000 */
			0x0,		/* 0 */
/* 692 */	NdrFcShort( 0x3e8 ),	/* 1000 */
/* 694 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 696 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 698 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 700 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 702 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 704 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 706 */	NdrFcShort( 0x18 ),	/* Offset= 24 (730) */
/* 708 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 710 */	NdrFcShort( 0x0 ),	/* 0 */
/* 712 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 714 */	NdrFcShort( 0x0 ),	/* 0 */
/* 716 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 718 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 722 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 724 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 726 */	NdrFcShort( 0xfd90 ),	/* Offset= -624 (102) */
/* 728 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 730 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 732 */	NdrFcShort( 0x10 ),	/* 16 */
/* 734 */	NdrFcShort( 0x0 ),	/* 0 */
/* 736 */	NdrFcShort( 0x6 ),	/* Offset= 6 (742) */
/* 738 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 740 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 742 */	
			0x12, 0x0,	/* FC_UP */
/* 744 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (708) */
/* 746 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 748 */	NdrFcShort( 0x2 ),	/* Offset= 2 (750) */
/* 750 */	
			0x12, 0x0,	/* FC_UP */
/* 752 */	NdrFcShort( 0x2 ),	/* Offset= 2 (754) */
/* 754 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 756 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 758 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 760 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 762 */	NdrFcShort( 0x2 ),	/* Offset= 2 (764) */
/* 764 */	NdrFcShort( 0x28 ),	/* 40 */
/* 766 */	NdrFcShort( 0x3005 ),	/* 12293 */
/* 768 */	NdrFcLong( 0x1 ),	/* 1 */
/* 772 */	NdrFcShort( 0x1c ),	/* Offset= 28 (800) */
/* 774 */	NdrFcLong( 0x2 ),	/* 2 */
/* 778 */	NdrFcShort( 0xfe98 ),	/* Offset= -360 (418) */
/* 780 */	NdrFcLong( 0x3 ),	/* 3 */
/* 784 */	NdrFcShort( 0x24 ),	/* Offset= 36 (820) */
/* 786 */	NdrFcLong( 0x4 ),	/* 4 */
/* 790 */	NdrFcShort( 0xfe8c ),	/* Offset= -372 (418) */
/* 792 */	NdrFcLong( 0x5 ),	/* 5 */
/* 796 */	NdrFcShort( 0x4 ),	/* Offset= 4 (800) */
/* 798 */	NdrFcShort( 0xffff ),	/* Offset= -1 (797) */
/* 800 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 802 */	NdrFcShort( 0x28 ),	/* 40 */
/* 804 */	NdrFcShort( 0x0 ),	/* 0 */
/* 806 */	NdrFcShort( 0x0 ),	/* Offset= 0 (806) */
/* 808 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 810 */	NdrFcShort( 0xfd3c ),	/* Offset= -708 (102) */
/* 812 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 814 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 816 */	NdrFcShort( 0xfd36 ),	/* Offset= -714 (102) */
/* 818 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 820 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 822 */	NdrFcShort( 0x4 ),	/* 4 */
/* 824 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 826 */	
			0x11, 0x0,	/* FC_RP */
/* 828 */	NdrFcShort( 0x2 ),	/* Offset= 2 (830) */
/* 830 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 832 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 834 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 836 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 838 */	NdrFcShort( 0xffb6 ),	/* Offset= -74 (764) */
/* 840 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 842 */	NdrFcShort( 0x2 ),	/* Offset= 2 (844) */
/* 844 */	
			0x12, 0x0,	/* FC_UP */
/* 846 */	NdrFcShort( 0x2 ),	/* Offset= 2 (848) */
/* 848 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 850 */	NdrFcShort( 0x18 ),	/* 24 */
/* 852 */	NdrFcShort( 0x0 ),	/* 0 */
/* 854 */	NdrFcShort( 0x8 ),	/* Offset= 8 (862) */
/* 856 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 858 */	0x36,		/* FC_POINTER */
			0x36,		/* FC_POINTER */
/* 860 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 862 */	
			0x12, 0x0,	/* FC_UP */
/* 864 */	NdrFcShort( 0xff04 ),	/* Offset= -252 (612) */
/* 866 */	
			0x12, 0x0,	/* FC_UP */
/* 868 */	NdrFcShort( 0xff00 ),	/* Offset= -256 (612) */
/* 870 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 872 */	NdrFcShort( 0x2 ),	/* Offset= 2 (874) */
/* 874 */	
			0x12, 0x0,	/* FC_UP */
/* 876 */	NdrFcShort( 0x2 ),	/* Offset= 2 (878) */
/* 878 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 880 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 882 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 884 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 886 */	NdrFcShort( 0x2 ),	/* Offset= 2 (888) */
/* 888 */	NdrFcShort( 0x28 ),	/* 40 */
/* 890 */	NdrFcShort( 0x3003 ),	/* 12291 */
/* 892 */	NdrFcLong( 0x1 ),	/* 1 */
/* 896 */	NdrFcShort( 0x10 ),	/* Offset= 16 (912) */
/* 898 */	NdrFcLong( 0x2 ),	/* 2 */
/* 902 */	NdrFcShort( 0xfe1c ),	/* Offset= -484 (418) */
/* 904 */	NdrFcLong( 0x3 ),	/* 3 */
/* 908 */	NdrFcShort( 0xfe16 ),	/* Offset= -490 (418) */
/* 910 */	NdrFcShort( 0xffff ),	/* Offset= -1 (909) */
/* 912 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 914 */	NdrFcShort( 0x28 ),	/* 40 */
/* 916 */	NdrFcShort( 0x0 ),	/* 0 */
/* 918 */	NdrFcShort( 0x0 ),	/* Offset= 0 (918) */
/* 920 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 922 */	NdrFcShort( 0xfccc ),	/* Offset= -820 (102) */
/* 924 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 926 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 928 */	NdrFcShort( 0xfcc6 ),	/* Offset= -826 (102) */
/* 930 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 932 */	
			0x11, 0x0,	/* FC_RP */
/* 934 */	NdrFcShort( 0x2 ),	/* Offset= 2 (936) */
/* 936 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 938 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 940 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 942 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 944 */	NdrFcShort( 0xffc8 ),	/* Offset= -56 (888) */
/* 946 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 948 */	NdrFcShort( 0x2 ),	/* Offset= 2 (950) */
/* 950 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 952 */	NdrFcShort( 0x10 ),	/* 16 */
/* 954 */	NdrFcShort( 0x0 ),	/* 0 */
/* 956 */	NdrFcShort( 0x6 ),	/* Offset= 6 (962) */
/* 958 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 960 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 962 */	
			0x12, 0x0,	/* FC_UP */
/* 964 */	NdrFcShort( 0xfe72 ),	/* Offset= -398 (566) */
/* 966 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 968 */	NdrFcShort( 0x2 ),	/* Offset= 2 (970) */
/* 970 */	
			0x12, 0x0,	/* FC_UP */
/* 972 */	NdrFcShort( 0x2 ),	/* Offset= 2 (974) */
/* 974 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 976 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 978 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 980 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 982 */	NdrFcShort( 0x2 ),	/* Offset= 2 (984) */
/* 984 */	NdrFcShort( 0x358 ),	/* 856 */
/* 986 */	NdrFcShort( 0x3017 ),	/* 12311 */
/* 988 */	NdrFcLong( 0x1 ),	/* 1 */
/* 992 */	NdrFcShort( 0x88 ),	/* Offset= 136 (1128) */
/* 994 */	NdrFcLong( 0x2 ),	/* 2 */
/* 998 */	NdrFcShort( 0x9e ),	/* Offset= 158 (1156) */
/* 1000 */	NdrFcLong( 0x3 ),	/* 3 */
/* 1004 */	NdrFcShort( 0xce ),	/* Offset= 206 (1210) */
/* 1006 */	NdrFcLong( 0x4 ),	/* 4 */
/* 1010 */	NdrFcShort( 0x10a ),	/* Offset= 266 (1276) */
/* 1012 */	NdrFcLong( 0x5 ),	/* 5 */
/* 1016 */	NdrFcShort( 0x112 ),	/* Offset= 274 (1290) */
/* 1018 */	NdrFcLong( 0x6 ),	/* 6 */
/* 1022 */	NdrFcShort( 0x14e ),	/* Offset= 334 (1356) */
/* 1024 */	NdrFcLong( 0x7 ),	/* 7 */
/* 1028 */	NdrFcShort( 0xfd9e ),	/* Offset= -610 (418) */
/* 1030 */	NdrFcLong( 0x8 ),	/* 8 */
/* 1034 */	NdrFcShort( 0xfd98 ),	/* Offset= -616 (418) */
/* 1036 */	NdrFcLong( 0x9 ),	/* 9 */
/* 1040 */	NdrFcShort( 0xff24 ),	/* Offset= -220 (820) */
/* 1042 */	NdrFcLong( 0xa ),	/* 10 */
/* 1046 */	NdrFcShort( 0x136 ),	/* Offset= 310 (1356) */
/* 1048 */	NdrFcLong( 0xb ),	/* 11 */
/* 1052 */	NdrFcShort( 0xfd86 ),	/* Offset= -634 (418) */
/* 1054 */	NdrFcLong( 0xc ),	/* 12 */
/* 1058 */	NdrFcShort( 0xfd80 ),	/* Offset= -640 (418) */
/* 1060 */	NdrFcLong( 0xd ),	/* 13 */
/* 1064 */	NdrFcShort( 0xfd7a ),	/* Offset= -646 (418) */
/* 1066 */	NdrFcLong( 0xe ),	/* 14 */
/* 1070 */	NdrFcShort( 0xfd74 ),	/* Offset= -652 (418) */
/* 1072 */	NdrFcLong( 0x10 ),	/* 16 */
/* 1076 */	NdrFcShort( 0xff00 ),	/* Offset= -256 (820) */
/* 1078 */	NdrFcLong( 0x11 ),	/* 17 */
/* 1082 */	NdrFcShort( 0xfd5e ),	/* Offset= -674 (408) */
/* 1084 */	NdrFcLong( 0x12 ),	/* 18 */
/* 1088 */	NdrFcShort( 0x12e ),	/* Offset= 302 (1390) */
/* 1090 */	NdrFcLong( 0x14 ),	/* 20 */
/* 1094 */	NdrFcShort( 0xfd5c ),	/* Offset= -676 (418) */
/* 1096 */	NdrFcLong( 0x15 ),	/* 21 */
/* 1100 */	NdrFcShort( 0x156 ),	/* Offset= 342 (1442) */
/* 1102 */	NdrFcLong( 0x17 ),	/* 23 */
/* 1106 */	NdrFcShort( 0x1ca ),	/* Offset= 458 (1564) */
/* 1108 */	NdrFcLong( 0x18 ),	/* 24 */
/* 1112 */	NdrFcShort( 0x1d6 ),	/* Offset= 470 (1582) */
/* 1114 */	NdrFcLong( 0x19 ),	/* 25 */
/* 1118 */	NdrFcShort( 0x1ea ),	/* Offset= 490 (1608) */
/* 1120 */	NdrFcLong( 0x1a ),	/* 26 */
/* 1124 */	NdrFcShort( 0x1f6 ),	/* Offset= 502 (1626) */
/* 1126 */	NdrFcShort( 0xffff ),	/* Offset= -1 (1125) */
/* 1128 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1130 */	NdrFcShort( 0x48 ),	/* 72 */
/* 1132 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1134 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1134) */
/* 1136 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1138 */	NdrFcShort( 0xfbf4 ),	/* Offset= -1036 (102) */
/* 1140 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1142 */	NdrFcShort( 0xfbf0 ),	/* Offset= -1040 (102) */
/* 1144 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1146 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1148 */	NdrFcShort( 0xfbea ),	/* Offset= -1046 (102) */
/* 1150 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1152 */	NdrFcShort( 0xfbe6 ),	/* Offset= -1050 (102) */
/* 1154 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1156 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1158 */	NdrFcShort( 0x28 ),	/* 40 */
/* 1160 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1162 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1162) */
/* 1164 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1166 */	NdrFcShort( 0xfbd8 ),	/* Offset= -1064 (102) */
/* 1168 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1170 */	NdrFcShort( 0xfbd4 ),	/* Offset= -1068 (102) */
/* 1172 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1174 */	0x40,		/* FC_STRUCTPAD4 */
			0x5b,		/* FC_END */
/* 1176 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 1178 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1180 */	0x40,		/* Corr desc:  constant, val=1260 */
			0x0,		/* 0 */
/* 1182 */	NdrFcShort( 0x4ec ),	/* 1260 */
/* 1184 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1186 */	0x10,		/* Corr desc:  field pointer,  */
			0x59,		/* FC_CALLBACK */
/* 1188 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1190 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1192 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1194 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1196 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1198 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1200 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1206) */
/* 1202 */	0x6,		/* FC_SHORT */
			0x42,		/* FC_STRUCTPAD6 */
/* 1204 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1206 */	
			0x12, 0x0,	/* FC_UP */
/* 1208 */	NdrFcShort( 0xffe0 ),	/* Offset= -32 (1176) */
/* 1210 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1212 */	NdrFcShort( 0xb8 ),	/* 184 */
/* 1214 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1216 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1216) */
/* 1218 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1220 */	NdrFcShort( 0xfba2 ),	/* Offset= -1118 (102) */
/* 1222 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1224 */	NdrFcShort( 0xfb9e ),	/* Offset= -1122 (102) */
/* 1226 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1228 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1230 */	NdrFcShort( 0xfb98 ),	/* Offset= -1128 (102) */
/* 1232 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1234 */	NdrFcShort( 0xfb94 ),	/* Offset= -1132 (102) */
/* 1236 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1238 */	NdrFcShort( 0xfb90 ),	/* Offset= -1136 (102) */
/* 1240 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1242 */	NdrFcShort( 0xfb8c ),	/* Offset= -1140 (102) */
/* 1244 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1246 */	NdrFcShort( 0xfb88 ),	/* Offset= -1144 (102) */
/* 1248 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1250 */	NdrFcShort( 0xfc7a ),	/* Offset= -902 (348) */
/* 1252 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1254 */	NdrFcShort( 0xfc76 ),	/* Offset= -906 (348) */
/* 1256 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1258 */	NdrFcShort( 0xfc72 ),	/* Offset= -910 (348) */
/* 1260 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1262 */	NdrFcShort( 0xfc6e ),	/* Offset= -914 (348) */
/* 1264 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1266 */	NdrFcShort( 0xfc6a ),	/* Offset= -918 (348) */
/* 1268 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1270 */	NdrFcShort( 0xffb4 ),	/* Offset= -76 (1194) */
/* 1272 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1274 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1276 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1278 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1280 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1282 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1282) */
/* 1284 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1286 */	NdrFcShort( 0xffa4 ),	/* Offset= -92 (1194) */
/* 1288 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1290 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1292 */	NdrFcShort( 0xc0 ),	/* 192 */
/* 1294 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1296 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1296) */
/* 1298 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1300 */	NdrFcShort( 0xfb52 ),	/* Offset= -1198 (102) */
/* 1302 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1304 */	NdrFcShort( 0xfb4e ),	/* Offset= -1202 (102) */
/* 1306 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1308 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1310 */	NdrFcShort( 0xfb48 ),	/* Offset= -1208 (102) */
/* 1312 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1314 */	NdrFcShort( 0xfb44 ),	/* Offset= -1212 (102) */
/* 1316 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1318 */	NdrFcShort( 0xfb40 ),	/* Offset= -1216 (102) */
/* 1320 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1322 */	NdrFcShort( 0xfb3c ),	/* Offset= -1220 (102) */
/* 1324 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1326 */	NdrFcShort( 0xfb38 ),	/* Offset= -1224 (102) */
/* 1328 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1330 */	NdrFcShort( 0xfb34 ),	/* Offset= -1228 (102) */
/* 1332 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1334 */	NdrFcShort( 0xfc26 ),	/* Offset= -986 (348) */
/* 1336 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1338 */	NdrFcShort( 0xfc22 ),	/* Offset= -990 (348) */
/* 1340 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1342 */	NdrFcShort( 0xff6c ),	/* Offset= -148 (1194) */
/* 1344 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1346 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1348 */	NdrFcShort( 0xfc18 ),	/* Offset= -1000 (348) */
/* 1350 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1352 */	NdrFcShort( 0xfc14 ),	/* Offset= -1004 (348) */
/* 1354 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 1356 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1358 */	NdrFcShort( 0x20 ),	/* 32 */
/* 1360 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1362 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1362) */
/* 1364 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1366 */	NdrFcShort( 0xfb10 ),	/* Offset= -1264 (102) */
/* 1368 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1370 */	NdrFcShort( 0xfb0c ),	/* Offset= -1268 (102) */
/* 1372 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1374 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 1376 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1378 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1380 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1382 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1384 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1386 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (1374) */
/* 1388 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1390 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1392 */	NdrFcShort( 0x23 ),	/* 35 */
/* 1394 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1396 */	NdrFcShort( 0xfff0 ),	/* Offset= -16 (1380) */
/* 1398 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1400 */	NdrFcShort( 0xffec ),	/* Offset= -20 (1380) */
/* 1402 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 1404 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1406 */	
			0x1c,		/* FC_CVARRAY */
			0x1,		/* 1 */
/* 1408 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1410 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1412 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1414 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1416 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x55,		/* FC_DIV_2 */
/* 1418 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1420 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1422 */	0x6,		/* FC_SHORT */
			0x5b,		/* FC_END */
/* 1424 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1426 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1428 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1430 */	NdrFcShort( 0x8 ),	/* Offset= 8 (1438) */
/* 1432 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1434 */	0x40,		/* FC_STRUCTPAD4 */
			0x36,		/* FC_POINTER */
/* 1436 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1438 */	
			0x12, 0x0,	/* FC_UP */
/* 1440 */	NdrFcShort( 0xffde ),	/* Offset= -34 (1406) */
/* 1442 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1444 */	NdrFcShort( 0x140 ),	/* 320 */
/* 1446 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1448 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1448) */
/* 1450 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1452 */	NdrFcShort( 0xfbb0 ),	/* Offset= -1104 (348) */
/* 1454 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1456 */	NdrFcShort( 0xfbac ),	/* Offset= -1108 (348) */
/* 1458 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1460 */	NdrFcShort( 0xfba8 ),	/* Offset= -1112 (348) */
/* 1462 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1464 */	NdrFcShort( 0xfba4 ),	/* Offset= -1116 (348) */
/* 1466 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1468 */	NdrFcShort( 0xfba0 ),	/* Offset= -1120 (348) */
/* 1470 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1472 */	NdrFcShort( 0xfb9c ),	/* Offset= -1124 (348) */
/* 1474 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1476 */	NdrFcShort( 0xfaa2 ),	/* Offset= -1374 (102) */
/* 1478 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1480 */	NdrFcShort( 0xfa9e ),	/* Offset= -1378 (102) */
/* 1482 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1484 */	NdrFcShort( 0xfa9a ),	/* Offset= -1382 (102) */
/* 1486 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1488 */	NdrFcShort( 0xfa96 ),	/* Offset= -1386 (102) */
/* 1490 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1492 */	NdrFcShort( 0xfa92 ),	/* Offset= -1390 (102) */
/* 1494 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1496 */	NdrFcShort( 0xfa8e ),	/* Offset= -1394 (102) */
/* 1498 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1500 */	NdrFcShort( 0xfa8a ),	/* Offset= -1398 (102) */
/* 1502 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1504 */	NdrFcShort( 0xfa86 ),	/* Offset= -1402 (102) */
/* 1506 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1508 */	NdrFcShort( 0xfa82 ),	/* Offset= -1406 (102) */
/* 1510 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1512 */	NdrFcShort( 0xfa7e ),	/* Offset= -1410 (102) */
/* 1514 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1516 */	NdrFcShort( 0xffa4 ),	/* Offset= -92 (1424) */
/* 1518 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1520 */	NdrFcShort( 0xffa0 ),	/* Offset= -96 (1424) */
/* 1522 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1524 */	NdrFcShort( 0xfa72 ),	/* Offset= -1422 (102) */
/* 1526 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1528 */	NdrFcShort( 0xfa3c ),	/* Offset= -1476 (52) */
/* 1530 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1532 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1534 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1536 */	NdrFcShort( 0xfeaa ),	/* Offset= -342 (1194) */
/* 1538 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1540 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1542 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 1544 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 1546 */	0x40,		/* FC_STRUCTPAD4 */
			0x5b,		/* FC_END */
/* 1548 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 1550 */	NdrFcShort( 0x204 ),	/* 516 */
/* 1552 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1554 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1556 */	NdrFcShort( 0x204 ),	/* 516 */
/* 1558 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1560 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (1548) */
/* 1562 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1564 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1566 */	NdrFcShort( 0x348 ),	/* 840 */
/* 1568 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1570 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1570) */
/* 1572 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1574 */	NdrFcShort( 0xff7c ),	/* Offset= -132 (1442) */
/* 1576 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1578 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (1554) */
/* 1580 */	0x40,		/* FC_STRUCTPAD4 */
			0x5b,		/* FC_END */
/* 1582 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1584 */	NdrFcShort( 0x205 ),	/* 517 */
/* 1586 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1588 */	NdrFcShort( 0xffde ),	/* Offset= -34 (1554) */
/* 1590 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1592 */	
			0x1d,		/* FC_SMFARRAY */
			0x0,		/* 0 */
/* 1594 */	NdrFcShort( 0x214 ),	/* 532 */
/* 1596 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1598 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1600 */	NdrFcShort( 0x214 ),	/* 532 */
/* 1602 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1604 */	NdrFcShort( 0xfff4 ),	/* Offset= -12 (1592) */
/* 1606 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1608 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1610 */	NdrFcShort( 0x358 ),	/* 856 */
/* 1612 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1614 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1614) */
/* 1616 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1618 */	NdrFcShort( 0xff50 ),	/* Offset= -176 (1442) */
/* 1620 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1622 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (1598) */
/* 1624 */	0x40,		/* FC_STRUCTPAD4 */
			0x5b,		/* FC_END */
/* 1626 */	
			0x15,		/* FC_STRUCT */
			0x0,		/* 0 */
/* 1628 */	NdrFcShort( 0x215 ),	/* 533 */
/* 1630 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1632 */	NdrFcShort( 0xffde ),	/* Offset= -34 (1598) */
/* 1634 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1636 */	
			0x11, 0x0,	/* FC_RP */
/* 1638 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1640) */
/* 1640 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1642 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1644 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1646 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1648 */	NdrFcShort( 0xfd68 ),	/* Offset= -664 (984) */
/* 1650 */	
			0x12, 0x0,	/* FC_UP */
/* 1652 */	NdrFcShort( 0xfef0 ),	/* Offset= -272 (1380) */
/* 1654 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 1656 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1658) */
/* 1658 */	
			0x12, 0x0,	/* FC_UP */
/* 1660 */	NdrFcShort( 0x18 ),	/* Offset= 24 (1684) */
/* 1662 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 1664 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1666 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1668 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1670 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1672 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 1676 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1678 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1680 */	NdrFcShort( 0xfacc ),	/* Offset= -1332 (348) */
/* 1682 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1684 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1686 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1688 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1690 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1696) */
/* 1692 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1694 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1696 */	
			0x12, 0x0,	/* FC_UP */
/* 1698 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (1662) */
/* 1700 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 1702 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1704) */
/* 1704 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 1706 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 1708 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 1710 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1712 */	NdrFcShort( 0x2 ),	/* Offset= 2 (1714) */
/* 1714 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1716 */	NdrFcShort( 0x3005 ),	/* 12293 */
/* 1718 */	NdrFcLong( 0x1 ),	/* 1 */
/* 1722 */	NdrFcShort( 0x4c ),	/* Offset= 76 (1798) */
/* 1724 */	NdrFcLong( 0x2 ),	/* 2 */
/* 1728 */	NdrFcShort( 0x82 ),	/* Offset= 130 (1858) */
/* 1730 */	NdrFcLong( 0x3 ),	/* 3 */
/* 1734 */	NdrFcShort( 0x8c ),	/* Offset= 140 (1874) */
/* 1736 */	NdrFcLong( 0x4 ),	/* 4 */
/* 1740 */	NdrFcShort( 0xe0 ),	/* Offset= 224 (1964) */
/* 1742 */	NdrFcLong( 0x5 ),	/* 5 */
/* 1746 */	NdrFcShort( 0xea ),	/* Offset= 234 (1980) */
/* 1748 */	NdrFcShort( 0xffff ),	/* Offset= -1 (1747) */
/* 1750 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1752 */	NdrFcShort( 0x40 ),	/* 64 */
/* 1754 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1756 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1756) */
/* 1758 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1760 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1762 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1764 */	NdrFcShort( 0xf982 ),	/* Offset= -1662 (102) */
/* 1766 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1768 */	NdrFcShort( 0xf97e ),	/* Offset= -1666 (102) */
/* 1770 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1772 */	NdrFcShort( 0xf97a ),	/* Offset= -1670 (102) */
/* 1774 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1776 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 1778 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1780 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1782 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1784 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1786 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 1790 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1792 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1794 */	NdrFcShort( 0xffd4 ),	/* Offset= -44 (1750) */
/* 1796 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1798 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1800 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1802 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1804 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1810) */
/* 1806 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1808 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1810 */	
			0x12, 0x0,	/* FC_UP */
/* 1812 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (1776) */
/* 1814 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1816 */	NdrFcShort( 0x30 ),	/* 48 */
/* 1818 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1820 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1820) */
/* 1822 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 1824 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1826 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1828 */	NdrFcShort( 0xf942 ),	/* Offset= -1726 (102) */
/* 1830 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1832 */	NdrFcShort( 0xf93e ),	/* Offset= -1730 (102) */
/* 1834 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1836 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 1838 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1840 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1842 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1844 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1846 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 1850 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1852 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1854 */	NdrFcShort( 0xffd8 ),	/* Offset= -40 (1814) */
/* 1856 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1858 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1860 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1862 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1864 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1870) */
/* 1866 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1868 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1870 */	
			0x12, 0x0,	/* FC_UP */
/* 1872 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (1836) */
/* 1874 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1876 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1878 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1880 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1886) */
/* 1882 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1884 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1886 */	
			0x12, 0x0,	/* FC_UP */
/* 1888 */	NdrFcShort( 0xffcc ),	/* Offset= -52 (1836) */
/* 1890 */	
			0x1c,		/* FC_CVARRAY */
			0x0,		/* 0 */
/* 1892 */	NdrFcShort( 0x1 ),	/* 1 */
/* 1894 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 1896 */	NdrFcShort( 0x2 ),	/* 2 */
/* 1898 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1900 */	0x17,		/* Corr desc:  field pointer, FC_USHORT */
			0x0,		/*  */
/* 1902 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1904 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1906 */	0x2,		/* FC_CHAR */
			0x5b,		/* FC_END */
/* 1908 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1910 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1912 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1914 */	NdrFcShort( 0x8 ),	/* Offset= 8 (1922) */
/* 1916 */	0x6,		/* FC_SHORT */
			0x6,		/* FC_SHORT */
/* 1918 */	0x40,		/* FC_STRUCTPAD4 */
			0x36,		/* FC_POINTER */
/* 1920 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1922 */	
			0x12, 0x0,	/* FC_UP */
/* 1924 */	NdrFcShort( 0xffde ),	/* Offset= -34 (1890) */
/* 1926 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1928 */	NdrFcShort( 0x18 ),	/* 24 */
/* 1930 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1932 */	NdrFcShort( 0x0 ),	/* Offset= 0 (1932) */
/* 1934 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1936 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1938 */	NdrFcShort( 0xffe2 ),	/* Offset= -30 (1908) */
/* 1940 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1942 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 1944 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1946 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 1948 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1950 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 1952 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 1956 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 1958 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 1960 */	NdrFcShort( 0xffde ),	/* Offset= -34 (1926) */
/* 1962 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 1964 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1966 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1968 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1970 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1976) */
/* 1972 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1974 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1976 */	
			0x12, 0x0,	/* FC_UP */
/* 1978 */	NdrFcShort( 0xffdc ),	/* Offset= -36 (1942) */
/* 1980 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 1982 */	NdrFcShort( 0x10 ),	/* 16 */
/* 1984 */	NdrFcShort( 0x0 ),	/* 0 */
/* 1986 */	NdrFcShort( 0x6 ),	/* Offset= 6 (1992) */
/* 1988 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 1990 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 1992 */	
			0x12, 0x0,	/* FC_UP */
/* 1994 */	NdrFcShort( 0xffcc ),	/* Offset= -52 (1942) */
/* 1996 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 1998 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2000) */
/* 2000 */	
			0x15,		/* FC_STRUCT */
			0x3,		/* 3 */
/* 2002 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2004 */	0x6,		/* FC_SHORT */
			0x3e,		/* FC_STRUCTPAD2 */
/* 2006 */	0x8,		/* FC_LONG */
			0x5b,		/* FC_END */
/* 2008 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2010 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2012) */
/* 2012 */	
			0x12, 0x0,	/* FC_UP */
/* 2014 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2016) */
/* 2016 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2018 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2020 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2022 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2024 */	NdrFcShort( 0xf926 ),	/* Offset= -1754 (270) */
/* 2026 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2028 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2030) */
/* 2030 */	
			0x12, 0x0,	/* FC_UP */
/* 2032 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2034) */
/* 2034 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2036 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2038 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2040 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2042 */	NdrFcShort( 0xfbde ),	/* Offset= -1058 (984) */
/* 2044 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2046 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2048) */
/* 2048 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2050 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2052 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2054 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2056 */	NdrFcShort( 0xfeaa ),	/* Offset= -342 (1714) */
/* 2058 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2060 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2062) */
/* 2062 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2064 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2066 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2068 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2070 */	NdrFcShort( 0xfe9c ),	/* Offset= -356 (1714) */
/* 2072 */	
			0x12, 0x0,	/* FC_UP */
/* 2074 */	NdrFcShort( 0xff5a ),	/* Offset= -166 (1908) */
/* 2076 */	
			0x11, 0x0,	/* FC_RP */
/* 2078 */	NdrFcShort( 0xff56 ),	/* Offset= -170 (1908) */
/* 2080 */	
			0x12, 0x0,	/* FC_UP */
/* 2082 */	NdrFcShort( 0xfdf0 ),	/* Offset= -528 (1554) */
/* 2084 */	
			0x12, 0x0,	/* FC_UP */
/* 2086 */	NdrFcShort( 0xf840 ),	/* Offset= -1984 (102) */
/* 2088 */	
			0x12, 0x8,	/* FC_UP [simple_pointer] */
/* 2090 */	
			0x25,		/* FC_C_WSTRING */
			0x5c,		/* FC_PAD */
/* 2092 */	
			0x11, 0x0,	/* FC_RP */
/* 2094 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2096) */
/* 2096 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2098 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2100 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2102 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2104 */	NdrFcShort( 0xfba0 ),	/* Offset= -1120 (984) */
/* 2106 */	
			0x11, 0x0,	/* FC_RP */
/* 2108 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2110) */
/* 2110 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 2112 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x0,		/*  */
/* 2114 */	NdrFcShort( 0x10 ),	/* X64 Stack size/offset = 16 */
/* 2116 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2118 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2120) */
/* 2120 */	NdrFcShort( 0x8 ),	/* 8 */
/* 2122 */	NdrFcShort( 0x3001 ),	/* 12289 */
/* 2124 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2128 */	NdrFcShort( 0xf90c ),	/* Offset= -1780 (348) */
/* 2130 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2129) */
/* 2132 */	
			0x11, 0x4,	/* FC_RP [alloced_on_stack] */
/* 2134 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2136) */
/* 2136 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0x9,		/* FC_ULONG */
/* 2138 */	0x29,		/* Corr desc:  parameter, FC_ULONG */
			0x54,		/* FC_DEREFERENCE */
/* 2140 */	NdrFcShort( 0x20 ),	/* X64 Stack size/offset = 32 */
/* 2142 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2144 */	NdrFcShort( 0xffe8 ),	/* Offset= -24 (2120) */
/* 2146 */	
			0x11, 0x0,	/* FC_RP */
/* 2148 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2150) */
/* 2150 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2152 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2154 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2156 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2158 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2160) */
/* 2160 */	NdrFcShort( 0x68 ),	/* 104 */
/* 2162 */	NdrFcShort( 0x7003 ),	/* 28675 */
/* 2164 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2168 */	NdrFcShort( 0x54 ),	/* Offset= 84 (2252) */
/* 2170 */	NdrFcLong( 0x2 ),	/* 2 */
/* 2174 */	NdrFcShort( 0x5e ),	/* Offset= 94 (2268) */
/* 2176 */	NdrFcLong( 0x3 ),	/* 3 */
/* 2180 */	NdrFcShort( 0x74 ),	/* Offset= 116 (2296) */
/* 2182 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2181) */
/* 2184 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x3,		/* 3 */
/* 2186 */	NdrFcShort( 0x10 ),	/* 16 */
/* 2188 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2190 */	NdrFcShort( 0x6 ),	/* Offset= 6 (2196) */
/* 2192 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 2194 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 2196 */	
			0x12, 0x0,	/* FC_UP */
/* 2198 */	NdrFcShort( 0xf792 ),	/* Offset= -2158 (40) */
/* 2200 */	
			0x21,		/* FC_BOGUS_ARRAY */
			0x3,		/* 3 */
/* 2202 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2204 */	0x19,		/* Corr desc:  field pointer, FC_ULONG */
			0x0,		/*  */
/* 2206 */	NdrFcShort( 0x24 ),	/* 36 */
/* 2208 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2210 */	NdrFcLong( 0xffffffff ),	/* -1 */
/* 2214 */	NdrFcShort( 0x0 ),	/* Corr flags:  */
/* 2216 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2218 */	NdrFcShort( 0xffde ),	/* Offset= -34 (2184) */
/* 2220 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2222 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2224 */	NdrFcShort( 0x30 ),	/* 48 */
/* 2226 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2228 */	NdrFcShort( 0x14 ),	/* Offset= 20 (2248) */
/* 2230 */	0x8,		/* FC_LONG */
			0x40,		/* FC_STRUCTPAD4 */
/* 2232 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2234 */	NdrFcShort( 0xf90e ),	/* Offset= -1778 (456) */
/* 2236 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2238 */	NdrFcShort( 0xf90a ),	/* Offset= -1782 (456) */
/* 2240 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2242 */	NdrFcShort( 0xf906 ),	/* Offset= -1786 (456) */
/* 2244 */	0x8,		/* FC_LONG */
			0x8,		/* FC_LONG */
/* 2246 */	0x36,		/* FC_POINTER */
			0x5b,		/* FC_END */
/* 2248 */	
			0x12, 0x0,	/* FC_UP */
/* 2250 */	NdrFcShort( 0xffce ),	/* Offset= -50 (2200) */
/* 2252 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2254 */	NdrFcShort( 0x38 ),	/* 56 */
/* 2256 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2258 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2258) */
/* 2260 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2262 */	NdrFcShort( 0xffd8 ),	/* Offset= -40 (2222) */
/* 2264 */	0x2,		/* FC_CHAR */
			0x43,		/* FC_STRUCTPAD7 */
/* 2266 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2268 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2270 */	NdrFcShort( 0x68 ),	/* 104 */
/* 2272 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2274 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2274) */
/* 2276 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2278 */	NdrFcShort( 0xffc8 ),	/* Offset= -56 (2222) */
/* 2280 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2282 */	NdrFcShort( 0xf77c ),	/* Offset= -2180 (102) */
/* 2284 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2286 */	NdrFcShort( 0xf778 ),	/* Offset= -2184 (102) */
/* 2288 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2290 */	NdrFcShort( 0xff96 ),	/* Offset= -106 (2184) */
/* 2292 */	0x2,		/* FC_CHAR */
			0x43,		/* FC_STRUCTPAD7 */
/* 2294 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */
/* 2296 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2298 */	NdrFcShort( 0x68 ),	/* 104 */
/* 2300 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2302 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2302) */
/* 2304 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2306 */	NdrFcShort( 0xffac ),	/* Offset= -84 (2222) */
/* 2308 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2310 */	NdrFcShort( 0xf760 ),	/* Offset= -2208 (102) */
/* 2312 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2314 */	NdrFcShort( 0xf75c ),	/* Offset= -2212 (102) */
/* 2316 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2318 */	NdrFcShort( 0xff7a ),	/* Offset= -134 (2184) */
/* 2320 */	0x2,		/* FC_CHAR */
			0x2,		/* FC_CHAR */
/* 2322 */	0x42,		/* FC_STRUCTPAD6 */
			0x5b,		/* FC_END */
/* 2324 */	
			0x11, 0x14,	/* FC_RP [alloced_on_stack] [pointer_deref] */
/* 2326 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2328) */
/* 2328 */	
			0x12, 0x0,	/* FC_UP */
/* 2330 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2332) */
/* 2332 */	
			0x2b,		/* FC_NON_ENCAPSULATED_UNION */
			0xd,		/* FC_ENUM16 */
/* 2334 */	0x26,		/* Corr desc:  parameter, FC_SHORT */
			0x0,		/*  */
/* 2336 */	NdrFcShort( 0x8 ),	/* X64 Stack size/offset = 8 */
/* 2338 */	NdrFcShort( 0x1 ),	/* Corr flags:  early, */
/* 2340 */	NdrFcShort( 0x2 ),	/* Offset= 2 (2342) */
/* 2342 */	NdrFcShort( 0x38 ),	/* 56 */
/* 2344 */	NdrFcShort( 0x7003 ),	/* 28675 */
/* 2346 */	NdrFcLong( 0x1 ),	/* 1 */
/* 2350 */	NdrFcShort( 0x10 ),	/* Offset= 16 (2366) */
/* 2352 */	NdrFcLong( 0x2 ),	/* 2 */
/* 2356 */	NdrFcShort( 0xa ),	/* Offset= 10 (2366) */
/* 2358 */	NdrFcLong( 0x3 ),	/* 3 */
/* 2362 */	NdrFcShort( 0x4 ),	/* Offset= 4 (2366) */
/* 2364 */	NdrFcShort( 0xffff ),	/* Offset= -1 (2363) */
/* 2366 */	
			0x1a,		/* FC_BOGUS_STRUCT */
			0x7,		/* 7 */
/* 2368 */	NdrFcShort( 0x38 ),	/* 56 */
/* 2370 */	NdrFcShort( 0x0 ),	/* 0 */
/* 2372 */	NdrFcShort( 0x0 ),	/* Offset= 0 (2372) */
/* 2374 */	0x4c,		/* FC_EMBEDDED_COMPLEX */
			0x0,		/* 0 */
/* 2376 */	NdrFcShort( 0xff66 ),	/* Offset= -154 (2222) */
/* 2378 */	0xd,		/* FC_ENUM16 */
			0x40,		/* FC_STRUCTPAD4 */
/* 2380 */	0x5c,		/* FC_PAD */
			0x5b,		/* FC_END */

			0x0
        ";
        #endregion
    }
}
