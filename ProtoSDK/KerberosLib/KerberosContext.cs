// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using Microsoft.Protocols.TestTools.StackSdk.Security.Cryptographic;
using Microsoft.Protocols.TestTools.StackSdk.Asn1;

namespace Microsoft.Protocols.TestTools.StackSdk.Security.KerberosLib
{
    /// <summary>
    /// Base class of KileClientContext and KileServerContext
    /// Maintain the important parameters during KILE transport.
    /// </summary>
    public class KerberosContext
    {
        #region Const Context
        /// <summary>
        /// The connection type, TCP or UDP.
        /// </summary>
        public TransportType TransportType
        {
            get;
            set;
        }

        /// <summary>
        /// Kerberos version
        /// </summary>
        public long Pvno
        {
            get;
            set;
        }

        /// <summary>
        /// Client supported encryption types
        /// </summary>
        public Asn1SequenceOf<KerbInt32> SupportedEType
        {
            get;
            set;
        }

        /// <summary>
        /// Host addresses
        /// </summary>
        public HostAddresses Addresses
        {
            get;
            set;
        }
        #endregion

        #region Common Context
        /// <summary>
        /// Nonce
        /// </summary>
        public KerbUInt32 Nonce
        {
            get;
            set;
        }

        /// <summary>
        /// Encryption type selected by client and used in all message exchange
        /// </summary>
        public EncryptionType SelectedEType
        {
            get;
            set;
        }

        /// <summary>
        /// The domain name which the user belongs to
        /// </summary>
        public Realm Realm
        {
            get;
            set;
        }
        
        /// <summary>
        /// Princial of client
        /// </summary>
        public Principal CName
        {
            get;
            set;
        }

        /// <summary>
        /// Reply key of message exchange, initial reply key is principal long term key
        /// </summary>
        public EncryptionKey ReplyKey
        {
            get;
            set;
        }

        /// <summary>
        /// TGS ticket received from response
        /// </summary>
        public KerberosTicket Ticket
        {
            get;
            set;
        }

        /// <summary>
        /// TGS Session Key received from AS response
        /// </summary>
        public EncryptionKey SessionKey
        {
            get;
            set;
        }

        /// <summary>
        /// Subkey, generated by client
        /// </summary>
        public EncryptionKey Subkey
        {
            get;
            set;
        }
        #endregion

        #region FAST Context
        /// <summary>
        /// TGS ticket used in FAST
        /// </summary>
        public KerberosTicket ArmorTicket
        {
            get;
            set;
        }

        /// <summary>
        /// Session key for the Armor Ticket.
        /// </summary>
        public EncryptionKey ArmorSessionKey
        {
            get;
            set;
        }

        /// <summary>
        /// Fast armor key, made by subkey and tgs session key
        /// </summary>
        public EncryptionKey FastArmorkey
        {
            get;
            set;
        }
        #endregion

        #region Constructor
        /// <summary>
        /// Create context
        /// </summary>
        public KerberosContext()
        {
            Pvno = KerberosConstValue.KERBEROSV5;
        }

        /// <summary>
        /// Create context
        /// </summary>
        /// <param name="domain">Domain name</param>
        /// <param name="cName">Principal name</param>
        /// <param name="password">Password of principal</param>
        /// <param name="accountType">Accoundtype, user or device</param>
        public KerberosContext(string domain, string cName, string password, KerberosAccountType accountType, string salt = null)
            : this()
        {
            if (domain == null)
            {
                throw new ArgumentNullException("domain");
            }
            if (cName == null)
            {
                throw new ArgumentNullException("cName");
            }
            if (password == null)
            {
                throw new ArgumentNullException("password");
            }

            this.Realm = new Realm(domain);
            PrincipalName name = new PrincipalName(new KerbInt32((int)PrincipalType.NT_PRINCIPAL), KerberosUtility.String2SeqKerbString(cName));
            if (null == salt)
            {
                if (accountType == KerberosAccountType.User)
                    salt = KerberosUtility.GenerateSalt(domain, cName, accountType);

                else if (accountType == KerberosAccountType.Device)
                    salt = KerberosUtility.GenerateSalt(domain, cName, accountType);

                else
                {
                    throw new ArgumentOutOfRangeException("Account type not support");
                }
            }

            this.CName = new Principal(accountType, this.Realm, name, password, salt);
        }

        /// <summary>
        /// Create context
        /// </summary>
        /// <param name="domain">Domain name</param>
        /// <param name="cName">Principal name</param>
        /// <param name="password">Password of principal</param>
        /// <param name="accountType">Accoundtype, user or device</param>
        /// <param name="armorTicket">Computer TGT as armor ticket</param>
        /// <param name="armorSessionKey">Computer TGS session key as armor session key</param>
        public KerberosContext(string domain, string cName, string password, KerberosAccountType accountType, string salt, KerberosTicket armorTicket, EncryptionKey armorSessionKey)
            : this(domain, cName, password, accountType, salt)
        {
            this.ArmorTicket = armorTicket;
            this.ArmorSessionKey = armorSessionKey;
            this.SelectedEType = (EncryptionType)this.ArmorTicket.SessionKey.keytype.Value;
        }
        #endregion
    }
}