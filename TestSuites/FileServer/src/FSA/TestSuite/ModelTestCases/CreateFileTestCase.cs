//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CreateFileTestCase : PtfTestClassBase {
        
        public CreateFileTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void GetOSInfoDelegate1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetOSInfoInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetOSInfo", typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS0() {
            this.Manager.BeginTest("CreateFileTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp0;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp0);
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp0, "securityContext of GetSystemConfig, state S78");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED," +
                    "FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp1 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1, "return of CreateFile, state S138");
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS10() {
            this.Manager.BeginTest("CreateFileTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S57\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp2;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp2);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp2, "securityContext of GetSystemConfig, state S83");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
            this.Manager.Comment("executing step \'call CreateFile(NOT_VALID_VALUE,NON_DIRECTORY_FILE,NULL,MAXIMUM_A" +
                    "LLOWED,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'" +
                    "");
            temp3 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NOT_VALID_VALUE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R404");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If FileAttributes are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp3, "return of CreateFile, state S143");
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS12() {
            this.Manager.BeginTest("CreateFileTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp4;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp4);
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp4, "securityContext of GetSystemConfig, state S84");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp5;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,DIRECTORY_FILE|NON_DIRECTORY_FILE,INDEX_" +
                    "ALLOCATION,MAXIMUM_ALLOWED,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLi" +
                    "nk,DataFile,Normal)\'");
            temp5 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(65u)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R368");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateOptions.FILE_NON_DIRECTORY_FILE.");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp5, "return of CreateFile, state S144");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS14() {
            this.Manager.BeginTest("CreateFileTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S59\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp6;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp6);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp6, "securityContext of GetSystemConfig, state S85");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,SYNCHRONOUS_IO_ALERT,NULL,FILE_LIST_DIRE" +
                    "CTORY,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp7 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.SYNCHRONOUS_IO_ALERT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R369");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_SYNCHRONOUS_IO_ALERT && !DesiredAccess.SYNCHRONIZE.");
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp7, "return of CreateFile, state S145");
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS16() {
            this.Manager.BeginTest("CreateFileTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp8;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp8);
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp8, "securityContext of GetSystemConfig, state S86");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,SYNCHRONOUS_IO_NONALERT,NULL,FILE_LIST_D" +
                    "IRECTORY,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal" +
                    ")\'");
            temp9 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.SYNCHRONOUS_IO_NONALERT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2373");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If Create.FILE_SYNCHRONOUS_IO_NONALERT&& !DesiredAccess.SYNCHRONIZE.");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp9, "return of CreateFile, state S146");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS18() {
            this.Manager.BeginTest("CreateFileTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S61\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp10;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp10);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp10, "securityContext of GetSystemConfig, state S87");
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp11;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,DELETE_ON_CLOSE,NULL,FILE_LIST_DIRECTORY,F" +
                    "ILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp11 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.DELETE_ON_CLOSE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R371");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DELETE_ON_CLOSE && !DesiredAccess.DELETE.");
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp11, "return of CreateFile, state S147");
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS2() {
            this.Manager.BeginTest("CreateFileTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S53\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp12;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp12);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp12, "securityContext of GetSystemConfig, state S79");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,None,FILE_SHARE_RE" +
                    "AD,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,BackslashName)\'");
            temp13 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus)(0)));
            this.Manager.Checkpoint("MS-FSA_R366");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]If any of the bits in the mask 0x0CE0FE00 are set, 
                    the operation MUST be failed with STATUS_ACCESS_DENIED.");
            this.Manager.Checkpoint("MS-FSA_R377");
            this.Manager.Checkpoint("[In Application Requests an Open of a File ,Pseudocode for the operation is as fo" +
                    "llows:\r\n                    Phase 1 - Parameter Validation:]If DesiredAccess is " +
                    "zero, the operation MUST be failed with STATUS_ACCESS_DENIED.");
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return CreateFile/ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp13, "return of CreateFile, state S139");
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS20() {
            this.Manager.BeginTest("CreateFileTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp14;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp14);
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp14, "securityContext of GetSystemConfig, state S88");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,SYNCHRONOUS_IO_ALERT|SYNCHRONOUS_IO_NONALE" +
                    "RT,NULL,FILE_LIST_DIRECTORY,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicL" +
                    "ink,DataFile,Normal)\'");
            temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(48u)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R373");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_SYNCHRONOUS_IO_ALERT && Create.FILE_SYNCHRONOUS_IO_NONALERT.");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp15, "return of CreateFile, state S148");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS22() {
            this.Manager.BeginTest("CreateFileTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S63\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp16;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp16);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp16, "securityContext of GetSystemConfig, state S89");
            this.Manager.Comment("reaching state \'S115\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,DIRECTORY_FILE,NULL,FILE_LIST_DIRECTORY,FI" +
                    "LE_SHARE_WRITE,OVERWRITE,StreamIsFound,IsNotSymbolicLink,DirectoryFile,Normal)\'");
            temp17 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2375");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == OVERWRITE.");
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp17, "return of CreateFile, state S149");
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS24() {
            this.Manager.BeginTest("CreateFileTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp18;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp18);
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp18, "securityContext of GetSystemConfig, state S90");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp19;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,DIRECTORY_FILE,NULL,FILE_LIST_DIRECTORY,FI" +
                    "LE_SHARE_WRITE,SUPERSEDE,StreamIsFound,IsNotSymbolicLink,DirectoryFile,Normal)\'");
            temp19 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2374");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == SUPERSEDE .");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp19, "return of CreateFile, state S150");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS26() {
            this.Manager.BeginTest("CreateFileTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp20;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp20);
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp20, "securityContext of GetSystemConfig, state S91");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,DIRECTORY_FILE,NULL,FILE_LIST_DIRECTORY,FI" +
                    "LE_SHARE_WRITE,OVERWRITE_IF,StreamIsFound,IsNotSymbolicLink,DirectoryFile,Normal" +
                    ")\'");
            temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2376");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == OVERWRITE_IF).");
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp21, "return of CreateFile, state S151");
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS28() {
            this.Manager.BeginTest("CreateFileTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp22;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp22);
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp22, "securityContext of GetSystemConfig, state S92");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,COMPLETE_IF_OPLOCKED|RESERVE_OPFILTER,NULL" +
                    ",FILE_LIST_DIRECTORY,FILE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,Dat" +
                    "aFile,Normal)\'");
            temp23 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1048832u)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R375");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.COMPLETE_IF_OPLOCKED && CreateOptions.FILE_RESERVE_OPFILTER.");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp23, "return of CreateFile, state S152");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS30() {
            this.Manager.BeginTest("CreateFileTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S67\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp24;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp24);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp24, "securityContext of GetSystemConfig, state S93");
            this.Manager.Comment("reaching state \'S119\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp25;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NO_INTERMEDIATE_BUFFERING,NULL,FILE_ADD_SU" +
                    "BDIRECTORY,FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Norma" +
                    "l)\'");
            temp25 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NO_INTERMEDIATE_BUFFERING, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.FILE_ADD_SUBDIRECTORY, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R376");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Phase 1 - Parameter Validation:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_NO_INTERMEDIATE_BUFFERING && DesiredAccess.FILE_APPEND_DATA.");
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp25, "return of CreateFile, state S153");
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS32() {
            this.Manager.BeginTest("CreateFileTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp26;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp26);
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp26, "securityContext of GetSystemConfig, state S94");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECT" +
                    "ORY,FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,NotPathNameV" +
                    "alid)\'");
            temp27 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus)(1)));
            this.Manager.Checkpoint("MS-FSA_R379");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_OBJECT_NAME_INVALID under any of the following conditions:
                    If PathName is not valid as specified in [MS-FSCC] section 2.1.5.");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_INVALID\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp27, "return of CreateFile, state S154");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS34() {
            this.Manager.BeginTest("CreateFileTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S69\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp28;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp28);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp28, "securityContext of GetSystemConfig, state S95");
            this.Manager.Comment("reaching state \'S121\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp29;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,BackslashName)" +
                    "\'");
            temp29 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus)(0)));
            this.Manager.Checkpoint("MS-FSA_R380");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_OBJECT_NAME_INVALID under any of the following conditions:
                    If PathName contains a trailing backslash and CreateOptions.FILE_NON_DIRECTORY_FILE is TRUE.");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_INVALID\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp29, "return of CreateFile, state S155");
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS38() {
            this.Manager.BeginTest("CreateFileTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp38;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp38);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp38);
            this.Manager.Comment("reaching state \'S97\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS38GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS38GetOSInfoChecker1)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                bool temp39;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp39);
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp39, "isFlagValue of CheckIsR507Implemented, state S158");
                this.Manager.Comment("reaching state \'S192\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp40;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp40);
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp40, "securityContext of GetSystemConfig, state S208");
                this.Manager.Comment("reaching state \'S224\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp41;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,OPEN,StreamIsNotFound,IsNotSymbolicLink,DataFile" +
                        ",Normal)\'");
                temp41 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R513");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]
                        If CreateDisposition == FILE_OPEN, the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_NOT_FOUND\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp41, "return of CreateFile, state S240");
                this.Manager.Comment("reaching state \'S256\'");
                goto label1;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S125\'");
                bool temp42;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp42);
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp42, "isFlagValue of CheckIsR507Implemented, state S159");
                this.Manager.Comment("reaching state \'S193\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp43;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp43);
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp43, "securityContext of GetSystemConfig, state S209");
                this.Manager.Comment("reaching state \'S225\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp44;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,OPEN,StreamIsNotFound,IsNotSymbolicLink,DataFile" +
                        ",Normal)\'");
                temp44 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R513");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]
                        If CreateDisposition == FILE_OPEN, the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_NOT_FOUND\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp44, "return of CreateFile, state S241");
                this.Manager.Comment("reaching state \'S257\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS38GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S97");
        }
        
        private void CreateFileTestCaseS38GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S97");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS4() {
            this.Manager.BeginTest("CreateFileTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp46;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp46);
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp46, "securityContext of GetSystemConfig, state S80");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp47;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED,NO" +
                    "T_VALID_VALUE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp47 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.NOT_VALID_VALUE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2370");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If ShareAccess are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp47, "return of CreateFile, state S140");
            this.Manager.Comment("reaching state \'S174\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS40() {
            this.Manager.BeginTest("CreateFileTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp48;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp48);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp48);
            this.Manager.Comment("reaching state \'S98\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS40GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS40GetOSInfoChecker1)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S126\'");
                bool temp49;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp49);
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp49, "isFlagValue of CheckIsR507Implemented, state S160");
                this.Manager.Comment("reaching state \'S194\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp50;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp50);
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp50, "securityContext of GetSystemConfig, state S210");
                this.Manager.Comment("reaching state \'S226\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,OVERWRITE,StreamIsNotFound,IsNotSymbolicLink,Dat" +
                        "aFile,Normal)\'");
                temp51 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R2395");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]If CreateDisposition == FILE_OVERWRITE), 
                        the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_NOT_FOUND\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp51, "return of CreateFile, state S242");
                this.Manager.Comment("reaching state \'S258\'");
                goto label2;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S127\'");
                bool temp52;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp52);
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp52, "isFlagValue of CheckIsR507Implemented, state S161");
                this.Manager.Comment("reaching state \'S195\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp53;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp53);
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp53, "securityContext of GetSystemConfig, state S211");
                this.Manager.Comment("reaching state \'S227\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp54;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,OVERWRITE,StreamIsNotFound,IsNotSymbolicLink,Dat" +
                        "aFile,Normal)\'");
                temp54 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R2395");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]If CreateDisposition == FILE_OVERWRITE), 
                        the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
                this.Manager.Comment("reaching state \'S243\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_NOT_FOUND\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp54, "return of CreateFile, state S243");
                this.Manager.Comment("reaching state \'S259\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS40GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S98");
        }
        
        private void CreateFileTestCaseS40GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S98");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS42() {
            this.Manager.BeginTest("CreateFileTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp56;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp56);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp56);
            this.Manager.Comment("reaching state \'S99\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS42GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS42GetOSInfoChecker1)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                bool temp57;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp57);
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp57, "isFlagValue of CheckIsR507Implemented, state S162");
                this.Manager.Comment("reaching state \'S196\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp58;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp58);
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp58, "securityContext of GetSystemConfig, state S212");
                this.Manager.Comment("reaching state \'S228\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp59;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,CREATE,StreamIsFound,IsSymbolicLink,DataFile,Nor" +
                        "mal)\'");
                temp59 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R399");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , 
                     Pseudocode for the operation is as follows:Phase 6 - Location of file:] 
                     Pseudocode for this search:For i = 1 to n-1:If Link.File.IsSymbolicLink is TRUE, 
                     the operation MUST be failed with Status set to STATUS_STOPPED_ON_SYMLINK .");
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("checking step \'return CreateFile/STOPPED_ON_SYMLINK\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.STOPPED_ON_SYMLINK, temp59, "return of CreateFile, state S244");
                this.Manager.Comment("reaching state \'S260\'");
                goto label3;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S129\'");
                bool temp60;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp60);
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp60, "isFlagValue of CheckIsR507Implemented, state S163");
                this.Manager.Comment("reaching state \'S197\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp61;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp61);
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp61, "securityContext of GetSystemConfig, state S213");
                this.Manager.Comment("reaching state \'S229\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp62;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,INDEX_ALLOCATION,FILE" +
                        "_LIST_DIRECTORY,FILE_SHARE_READ,CREATE,StreamIsFound,IsSymbolicLink,DataFile,Nor" +
                        "mal)\'");
                temp62 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R399");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , 
                     Pseudocode for the operation is as follows:Phase 6 - Location of file:] 
                     Pseudocode for this search:For i = 1 to n-1:If Link.File.IsSymbolicLink is TRUE, 
                     the operation MUST be failed with Status set to STATUS_STOPPED_ON_SYMLINK .");
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return CreateFile/STOPPED_ON_SYMLINK\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.STOPPED_ON_SYMLINK, temp62, "return of CreateFile, state S245");
                this.Manager.Comment("reaching state \'S261\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS42GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S99");
        }
        
        private void CreateFileTestCaseS42GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S99");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS44() {
            this.Manager.BeginTest("CreateFileTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp64;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp64);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp64);
            this.Manager.Comment("reaching state \'S100\'");
            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS44GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS44GetOSInfoChecker1)));
            if ((temp71 == 0)) {
                this.Manager.Comment("reaching state \'S130\'");
                bool temp65;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp65);
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp65, "isFlagValue of CheckIsR507Implemented, state S164");
                this.Manager.Comment("reaching state \'S198\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp66;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp66);
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp66, "securityContext of GetSystemConfig, state S214");
                this.Manager.Comment("reaching state \'S230\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp67;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECT" +
                        "ORY,FILE_SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DirectoryFile,OpenFileN" +
                        "otNull)\'");
                temp67 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.OpenFileNotNull);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R415");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                    Phase 7 -- Type of file to open:]If FileTypeToOpen is DataFile and StreamNameToOpen is empty and Open.File is not NULL 
                    and Open.File.FileType is DirectoryFile, the operation MUST be failed with STATUS_FILE_IS_A_DIRECTORY.");
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("checking step \'return CreateFile/FILE_IS_A_DIRECTORY\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_IS_A_DIRECTORY, temp67, "return of CreateFile, state S246");
                this.Manager.Comment("reaching state \'S262\'");
                goto label4;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S131\'");
                bool temp68;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp68);
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp68, "isFlagValue of CheckIsR507Implemented, state S165");
                this.Manager.Comment("reaching state \'S199\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp69;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp69);
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp69, "securityContext of GetSystemConfig, state S215");
                this.Manager.Comment("reaching state \'S231\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp70;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECT" +
                        "ORY,FILE_SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DirectoryFile,OpenFileN" +
                        "otNull)\'");
                temp70 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.OpenFileNotNull);
                this.Manager.Checkpoint("MS-FSA_R415");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                    Phase 7 -- Type of file to open:]If FileTypeToOpen is DataFile and StreamNameToOpen is empty and Open.File is not NULL 
                    and Open.File.FileType is DirectoryFile, the operation MUST be failed with STATUS_FILE_IS_A_DIRECTORY.");
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("checking step \'return CreateFile/FILE_IS_A_DIRECTORY\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_IS_A_DIRECTORY, temp70, "return of CreateFile, state S247");
                this.Manager.Comment("reaching state \'S263\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS44GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S100");
        }
        
        private void CreateFileTestCaseS44GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S100");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS46() {
            this.Manager.BeginTest("CreateFileTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp72;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp72);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp72);
            this.Manager.Comment("reaching state \'S101\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS46GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS46GetOSInfoChecker1)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                bool temp73;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp73);
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp73, "isFlagValue of CheckIsR507Implemented, state S166");
                this.Manager.Comment("reaching state \'S200\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp74;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp74);
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp74, "securityContext of GetSystemConfig, state S216");
                this.Manager.Comment("reaching state \'S232\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp75;
                this.Manager.Comment("executing step \'call CreateFile(TEMPORARY,DIRECTORY_FILE,NULL,FILE_LIST_DIRECTORY" +
                        ",FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DirectoryFile,Normal)\'");
                temp75 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.TEMPORARY, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R418");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If FileTyp" +
                        "eToOpen is DirectoryFile and DesiredFileAttributes.FILE_ATTRIBUTE_TEMPORARY is s" +
                        "et, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S248\'");
                this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp75, "return of CreateFile, state S248");
                this.Manager.Comment("reaching state \'S264\'");
                goto label5;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S133\'");
                bool temp76;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp76);
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp76, "isFlagValue of CheckIsR507Implemented, state S167");
                this.Manager.Comment("reaching state \'S201\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp77;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp77);
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp77, "securityContext of GetSystemConfig, state S217");
                this.Manager.Comment("reaching state \'S233\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp78;
                this.Manager.Comment("executing step \'call CreateFile(TEMPORARY,DIRECTORY_FILE,NULL,FILE_LIST_DIRECTORY" +
                        ",FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DirectoryFile,Normal)\'");
                temp78 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.TEMPORARY, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R418");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If FileTyp" +
                        "eToOpen is DirectoryFile and DesiredFileAttributes.FILE_ATTRIBUTE_TEMPORARY is s" +
                        "et, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp78, "return of CreateFile, state S249");
                this.Manager.Comment("reaching state \'S265\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS46GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S101");
        }
        
        private void CreateFileTestCaseS46GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S101");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS48() {
            this.Manager.BeginTest("CreateFileTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp80;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp80);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp80);
            this.Manager.Comment("reaching state \'S102\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS48GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS48GetOSInfoChecker1)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S134\'");
                bool temp81;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp81);
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp81, "isFlagValue of CheckIsR507Implemented, state S168");
                this.Manager.Comment("reaching state \'S202\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp82;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp82);
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp82, "securityContext of GetSystemConfig, state S218");
                this.Manager.Comment("reaching state \'S234\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp83;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,DELETE_ON_CLOSE,INDEX_ALLOCATION,DELETE," +
                        "FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
                temp83 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.DELETE_ON_CLOSE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R419");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If Desired" +
                        "FileAttributes.FILE_ATTRIBUTE_READONLY and CreateOptions.FILE_DELETE_ON_CLOSE ar" +
                        "e both set, the operation MUST be failed with STATUS_CANNOT_DELETE.");
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return CreateFile/CANNOT_DELETE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.CANNOT_DELETE, temp83, "return of CreateFile, state S250");
                this.Manager.Comment("reaching state \'S266\'");
                goto label6;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                bool temp84;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp84);
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp84, "isFlagValue of CheckIsR507Implemented, state S169");
                this.Manager.Comment("reaching state \'S203\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp85;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp85);
                this.Manager.Comment("reaching state \'S219\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp85, "securityContext of GetSystemConfig, state S219");
                this.Manager.Comment("reaching state \'S235\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp86;
                this.Manager.Comment("executing step \'call CreateFile(READONLY,DELETE_ON_CLOSE,INDEX_ALLOCATION,DELETE," +
                        "FILE_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
                temp86 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.DELETE_ON_CLOSE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R419");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If Desired" +
                        "FileAttributes.FILE_ATTRIBUTE_READONLY and CreateOptions.FILE_DELETE_ON_CLOSE ar" +
                        "e both set, the operation MUST be failed with STATUS_CANNOT_DELETE.");
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("checking step \'return CreateFile/CANNOT_DELETE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.CANNOT_DELETE, temp86, "return of CreateFile, state S251");
                this.Manager.Comment("reaching state \'S267\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS48GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S102");
        }
        
        private void CreateFileTestCaseS48GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S102");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS50() {
            this.Manager.BeginTest("CreateFileTestCaseS50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S77\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType temp88;
            this.Manager.Comment("executing step \'call GetOSInfo(out _)\'");
            this.IFSAAdapterInstance.GetOSInfo(out temp88);
            this.Manager.AddReturn(GetOSInfoInfo, null, temp88);
            this.Manager.Comment("reaching state \'S103\'");
            int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS50GetOSInfoChecker)), new ExpectedReturn(CreateFileTestCase.GetOSInfoInfo, null, new GetOSInfoDelegate1(this.CreateFileTestCaseS50GetOSInfoChecker1)));
            if ((temp95 == 0)) {
                this.Manager.Comment("reaching state \'S136\'");
                bool temp89;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp89);
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp89, "isFlagValue of CheckIsR507Implemented, state S170");
                this.Manager.Comment("reaching state \'S204\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp90;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp90);
                this.Manager.Comment("reaching state \'S220\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp90, "securityContext of GetSystemConfig, state S220");
                this.Manager.Comment("reaching state \'S236\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp91;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,RANDOM_ACCESS,Other,FILE_LIST_DIRECTORY,FI" +
                        "LE_SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
                temp91 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.RANDOM_ACCESS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.Other, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R420");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If StreamT" +
                        "ypeNameToOpen is non-empty and has a value other than \\\"$DATA\",the operation MUS" +
                        "T be failed with STATUS_OBJECT_NAME_INVALID.");
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_INVALID\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp91, "return of CreateFile, state S252");
                this.Manager.Comment("reaching state \'S268\'");
                goto label7;
            }
            if ((temp95 == 1)) {
                this.Manager.Comment("reaching state \'S137\'");
                bool temp92;
                this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
                this.IFSAAdapterInstance.CheckIsR507Implemented(out temp92);
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp92, "isFlagValue of CheckIsR507Implemented, state S171");
                this.Manager.Comment("reaching state \'S205\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp93;
                this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                this.IFSAAdapterInstance.GetSystemConfig(out temp93);
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                        "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                        "lse)]\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                "privilegeSet",
                                "isSecurityContextSIDsContainWellKnown",
                                "isImplementsEncryption"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                false,
                                false}), temp93, "securityContext of GetSystemConfig, state S221");
                this.Manager.Comment("reaching state \'S237\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp94;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,RANDOM_ACCESS,Other,FILE_LIST_DIRECTORY,FI" +
                        "LE_SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
                temp94 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.RANDOM_ACCESS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.Other, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
                this.Manager.Checkpoint("MS-FSA_R420");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]If StreamT" +
                        "ypeNameToOpen is non-empty and has a value other than \\\"$DATA\",the operation MUS" +
                        "T be failed with STATUS_OBJECT_NAME_INVALID.");
                this.Manager.Comment("reaching state \'S253\'");
                this.Manager.Comment("checking step \'return CreateFile/OBJECT_NAME_INVALID\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp94, "return of CreateFile, state S253");
                this.Manager.Comment("reaching state \'S269\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void CreateFileTestCaseS50GetOSInfoChecker(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out Windows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(0)), platformType, "platformType of GetOSInfo, state S103");
        }
        
        private void CreateFileTestCaseS50GetOSInfoChecker1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType) {
            this.Manager.Comment("checking step \'return GetOSInfo/[out NoneWindows]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType)(1)), platformType, "platformType of GetOSInfo, state S103");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS6() {
            this.Manager.BeginTest("CreateFileTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp96;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp96);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp96, "securityContext of GetSystemConfig, state S81");
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp97;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,NOT_VALID_VALUE,NULL,MAXIMUM_ALLOWED,FIL" +
                    "E_SHARE_READ,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp97 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NOT_VALID_VALUE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2371");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp97, "return of CreateFile, state S141");
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.CreateFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void CreateFileTestCaseS8() {
            this.Manager.BeginTest("CreateFileTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp98;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp98);
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp98, "securityContext of GetSystemConfig, state S82");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp99;
            this.Manager.Comment("executing step \'call CreateFile(READONLY,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED," +
                    "FILE_SHARE_WRITE,NOT_VALID_VALUE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal" +
                    ")\'");
            temp99 = this.IFSAAdapterInstance.CreateFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.NOT_VALID_VALUE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R2372");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateDisposition are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("checking step \'return CreateFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp99, "return of CreateFile, state S142");
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
