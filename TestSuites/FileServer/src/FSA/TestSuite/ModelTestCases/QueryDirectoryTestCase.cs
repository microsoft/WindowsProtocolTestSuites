// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryDirectoryTestCase : PtfTestClassBase {
        
        public QueryDirectoryTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetIfImplementQueryFileObjectIdInformationDelegate1(bool isImplemented);
        
        public delegate void GetIfImplementQueryFileReparsePointInformationDelegate1(bool isImplemented);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetIfImplementQueryFileObjectIdInformationInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfImplementQueryFileObjectIdInformation", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIfImplementQueryFileReparsePointInformationInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfImplementQueryFileReparsePointInformation", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS0() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S80\'");
            bool temp1;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp1);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp1);
            this.Manager.Comment("reaching state \'S100\'");
            int temp4 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS0GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS0GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S120\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp2;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty_LengthIsNotAMultipleOf4,NotRe" +
                        "startScan,FileNamePatternNotMatched,OutputBufferIsNotEnough)\'");
                temp2 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp2, "return of QueryFileObjectIdInfo, state S152");
                this.Manager.Comment("reaching state \'S176\'");
                goto label0;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S121\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(Empty,RestartScan,FileNamePatternMatch" +
                        "ed,OutputBufferIsEnough)\'");
                temp3 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R813");
                this.Manager.Checkpoint("[In Server Requests Querying a Directory]On completion, the object store MUST ret" +
                        "urn:\r\n                [Status,OutputBuffer,BytesReturned ].");
                this.Manager.Checkpoint("MS-FSA_R833");
                this.Manager.Checkpoint("[In FileObjectIdInformation, Pseudocode for the operation is as follows:\r\n       " +
                        "         If there is at least one match]The object store MUST return:Status set " +
                        "to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp3, "return of QueryFileObjectIdInfo, state S153");
                this.Manager.Comment("reaching state \'S177\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS0GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S100");
        }
        
        private void QueryDirectoryTestCaseS0GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S100");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS10() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");           
            this.Manager.Comment("reaching state \'S85\'");
            bool temp6;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp6);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp6);
            this.Manager.Comment("reaching state \'S105\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS10GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS10GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S130\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty_LengthIsNotAMultipleOf4,Resta" +
                        "rtScan,FileNamePatternMatched,OutputBufferIsEnough)\'");
                temp7 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp7, "return of QueryFileObjectIdInfo, state S162");
                this.Manager.Comment("reaching state \'S186\'");
                goto label1;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S131\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty_LengthIsNotAMultipleOf4,Resta" +
                        "rtScan,FileNamePatternNotMatched,OutputBufferIsEnough)\'");
                temp8 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R819");
                this.Manager.Checkpoint(@"[In FileObjectIdInformation,Pseudocode for the operation is as follows:] 
                    If FileNamePattern is not empty and FileNamePattern.Length (0 is a valid length) is not a multiple of 4, 
                    the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S163\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp8, "return of QueryFileObjectIdInfo, state S163");
                this.Manager.Comment("reaching state \'S187\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS10GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S105");
        }
        
        private void QueryDirectoryTestCaseS10GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S105");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS12() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");            
            this.Manager.Comment("reaching state \'S86\'");
            bool temp11;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp11);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp11);
            this.Manager.Comment("reaching state \'S106\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS12GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS12GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp12;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(NotValidFilenameComponent,R" +
                        "estartScan,FileNamePatternNotMatched,OutputBufferIsEnough)\'");
                temp12 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotValidFilenameComponent, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S164\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp12, "return of QueryFileReparsePointInformation, state S164");
                this.Manager.Comment("reaching state \'S188\'");
                goto label2;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S133\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Empty,RestartScan,FileNameP" +
                        "atternMatched,OutputBufferIsNotEnough)\'");
                temp13 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6289");
                this.Manager.Checkpoint("[In FileReparsePointInformation]The operation MUST fail with STATUS_BUFFER_OVERFL" +
                        "OW \r\n                    if OutputBuffer is not large enough to hold the first m" +
                        "atching entry.");
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INFO_LENGTH_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp13, "return of QueryFileReparsePointInformation, state S165");
                this.Manager.Comment("reaching state \'S189\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS12GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S106");
        }
        
        private void QueryDirectoryTestCaseS12GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S106");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS14() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S87\'");
            bool temp16;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp16);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp16);
            this.Manager.Comment("reaching state \'S107\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS14GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS14GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S134\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(NotValidFilenameComponent,N" +
                        "otRestartScan,FileNamePatternMatched,OutputBufferIsNotEnough)\'");
                temp17 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotValidFilenameComponent, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp17, "return of QueryFileReparsePointInformation, state S166");
                this.Manager.Comment("reaching state \'S190\'");
                goto label3;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S135\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp18;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Empty,NotRestartScan,FileNa" +
                        "mePatternMatched,OutputBufferIsEnough)\'");
                temp18 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R6290");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If there is at least one match, the operation is " +
                        "considered successful. \r\n                    The object store MUST return:[Statu" +
                        "s, OutputBuffer,ByteCount].");
                this.Manager.Checkpoint("MS-FSA_R6291");
                this.Manager.Checkpoint("[In FileReparsePointInformation]Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp18, "return of QueryFileReparsePointInformation, state S167");
                this.Manager.Comment("reaching state \'S191\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS14GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S107");
        }
        
        private void QueryDirectoryTestCaseS14GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S107");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS16() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S88\'");
            bool temp21;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp21);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp21);
            this.Manager.Comment("reaching state \'S108\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS16GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS16GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S136\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp22;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(LengthIsLessThanTheSizeOfAn" +
                        "ObjectId,NotRestartScan,FileNamePatternMatched,OutputBufferIsNotEnough)\'");
                temp22 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.LengthIsLessThanTheSizeOfAnObjectId, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp22, "return of QueryFileReparsePointInformation, state S168");
                this.Manager.Comment("reaching state \'S192\'");
                goto label4;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S137\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Empty,RestartScan,FileNameP" +
                        "atternNotMatched,OutputBufferIsEnough)\'");
                temp23 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R6288");
                this.Manager.Checkpoint("[In FileReparsePointInformation]The operation MUST fail with STATUS_NO_SUCH_FILE " +
                        "\r\n                    under any of the following conditions:EmptyPattern is TRUE" +
                        " and RestartScan is TRUE and there is no match.");
                this.Manager.Comment("reaching state \'S169\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/NO_SUCH_FILE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_SUCH_FILE, temp23, "return of QueryFileReparsePointInformation, state S169");
                this.Manager.Comment("reaching state \'S193\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS16GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S108");
        }
        
        private void QueryDirectoryTestCaseS16GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S108");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS18() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S89\'");
            bool temp26;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp26);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp26);
            this.Manager.Comment("reaching state \'S109\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS18GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS18GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S138\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(NotEmpty_LengthIsNotAMultip" +
                        "leOf4,NotRestartScan,FileNamePatternMatched,OutputBufferIsNotEnough)\'");
                temp27 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp27, "return of QueryFileReparsePointInformation, state S170");
                this.Manager.Comment("reaching state \'S194\'");
                goto label5;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S139\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp28;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(NotEmpty_LengthIsNotAMultip" +
                        "leOf4,NotRestartScan,FileNamePatternMatched,OutputBufferIsNotEnough)\'");
                temp28 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6280");
                this.Manager.Checkpoint(@"[In FileReparsePointInformation]Pseudocode for the operation is as follows:
                    If FileNamePattern is not empty and FileNamePattern.Length (0 is a valid length) is not a multiple of 4, the operation 
                    MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp28, "return of QueryFileReparsePointInformation, state S171");
                this.Manager.Comment("reaching state \'S195\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS18GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S109");
        }
        
        private void QueryDirectoryTestCaseS18GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S109");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS2() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S81\'");
            bool temp31;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp31);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp31);
            this.Manager.Comment("reaching state \'S101\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS2GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS2GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S122\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp32;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(Empty,RestartScan,FileNamePatternNotMa" +
                        "tched,OutputBufferIsEnough)\'");
                temp32 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp32, "return of QueryFileObjectIdInfo, state S154");
                this.Manager.Comment("reaching state \'S178\'");
                goto label6;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(Empty,RestartScan,FileNamePatternMatch" +
                        "ed,OutputBufferIsNotEnough)\'");
                temp33 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R830");
                this.Manager.Checkpoint("[In FileObjectIdInformation,Pseudocode for the operation is as follows:]The opera" +
                        "tion MUST fail with \r\n                    STATUS_BUFFER_OVERFLOW if OutputBuffer" +
                        " is not large enough to hold the first matching entry.");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INFO_LENGTH_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp33, "return of QueryFileObjectIdInfo, state S155");
                this.Manager.Comment("reaching state \'S179\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS2GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S101");
        }
        
        private void QueryDirectoryTestCaseS2GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S101");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS20() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S90\'");
            bool temp36;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp36);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp36);
            this.Manager.Comment("reaching state \'S110\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS20GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS20GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S140\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp37;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Empty,RestartScan,FileNameP" +
                        "atternNotMatched,OutputBufferIsEnough)\'");
                temp37 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp37, "return of QueryFileReparsePointInformation, state S172");
                this.Manager.Comment("reaching state \'S196\'");
                goto label7;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S141\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp38;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Skip,RestartScan,FileNamePa" +
                        "tternNotMatched,OutputBufferIsNotEnough)\'");
                temp38 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6287");
                this.Manager.Checkpoint("[In FileReparsePointInformation]The operation MUST fail with STATUS_NO_SUCH_FILE " +
                        "under \r\n                    any of the following conditions:EmptyPattern is FALS" +
                        "E and there is no match.");
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/NO_SUCH_FILE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_SUCH_FILE, temp38, "return of QueryFileReparsePointInformation, state S173");
                this.Manager.Comment("reaching state \'S197\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS20GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S110");
        }
        
        private void QueryDirectoryTestCaseS20GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S110");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS22() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S91\'");
            bool temp41;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileReparsePointInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileReparsePointInformation(out temp41);
            this.Manager.AddReturn(GetIfImplementQueryFileReparsePointInformationInfo, null, temp41);
            this.Manager.Comment("reaching state \'S111\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS22GetIfImplementQueryFileReparsePointInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileReparsePointInformationInfo, null, new GetIfImplementQueryFileReparsePointInformationDelegate1(this.QueryDirectoryTestCaseS22GetIfImplementQueryFileReparsePointInformationChecker1)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S142\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp42;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Skip,RestartScan,FileNamePa" +
                        "tternMatched,OutputBufferIsEnough)\'");
                temp42 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R6276");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If the object store does not implement this funct" +
                        "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                        "_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp42, "return of QueryFileReparsePointInformation, state S174");
                this.Manager.Comment("reaching state \'S198\'");
                goto label8;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S143\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
                this.Manager.Comment("executing step \'call QueryFileReparsePointInformation(Empty,NotRestartScan,FileNa" +
                        "mePatternNotMatched,OutputBufferIsNotEnough)\'");
                temp43 = this.IFSAAdapterInstance.QueryFileReparsePointInformation(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R6286");
                this.Manager.Checkpoint("[In FileReparsePointInformation]If RestartScan is FALSE and EmptyPattern is TRUE " +
                        "\r\n                    and there is no match, the operation MUST be failed with S" +
                        "TATUS_NO_MORE_FILES.");
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return QueryFileReparsePointInformation/NO_MORE_FILES\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_MORE_FILES, temp43, "return of QueryFileReparsePointInformation, state S175");
                this.Manager.Comment("reaching state \'S199\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS22GetIfImplementQueryFileReparsePointInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out False]\'" +
                    "");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S111");
        }
        
        private void QueryDirectoryTestCaseS22GetIfImplementQueryFileReparsePointInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileReparsePointInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileReparsePointInformation, state S111");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS24() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp46;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(Empty,False,True,True,FileBothDirectoryIn" +
                    "formation)\'");
            temp46 = this.IFSAAdapterInstance.QueryDirectoryInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), false, true, true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall)(0)));
            this.Manager.Checkpoint("MS-FSA_R4881");
            this.Manager.Checkpoint(@"[In FileBothDirectoryInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than FieldOffset( FILE_BOTH_DIR_INFORMATION.FileName ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp46, "return of QueryDirectoryInfo, state S112");
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS26() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S93\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp48;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(NotEmpty_LengthIsNotAMultipleOf4,True,Fal" +
                    "se,True,FileDirectoryInformation)\'");
            temp48 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, true, false, true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall)(1)));
            this.Manager.Checkpoint("MS-FSA_R4904");
            this.Manager.Checkpoint(@"[In FileDirectoryInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than FieldOffset( FILE_DIRECTORY_INFORMATION.FileName ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp48, "return of QueryDirectoryInfo, state S113");
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS28() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(NotValidFilenameComponent,False,False,Fal" +
                    "se,FileFullDirectoryInformation)\'");
            temp50 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotValidFilenameComponent, false, false, false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.FileFullDirectoryInformation);
            this.Manager.Checkpoint("MS-FSA_R849");
            this.Manager.Checkpoint(@"[In Directory Information Queries ,Pseudocode for the algorithm is as follows: 
                        If Open.QueryPattern is empty] else [if FileNamePattern is not empty]If FileNamePattern is not a valid filename component 
                        as described in [MS-FSCC] section 2.1.5, with the exceptions that wildcard characters described in section 3.1.4.3 
                        are permitted and the strings \"".\"" and \""..\"" are permitted, the operation MUST be failed with STATUS_OBJECT_NAME_INVALID.");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/OBJECT_NAME_INVALID\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp50, "return of QueryDirectoryInfo, state S114");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS30() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp52;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(LengthIsLessThanTheSizeOfAnObjectId,True," +
                    "True,False,FileIdFullDirectoryInformation)\'");
            temp52 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.LengthIsLessThanTheSizeOfAnObjectId, true, true, false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.FileIdFullDirectoryInformation);
            this.Manager.Checkpoint("MS-FSA_R4875");
            this.Manager.Checkpoint(@"[In Directory Information Queries,Pseudocode for the algorithm is as follows:]
                        If no records are being returned:If FirstQuery is TRUE:Set StatusToReturn to STATUS_NO_SUCH_FILE, which means no files were found 
                        in this directory that match the given wildcard pattern.");
            this.Manager.Checkpoint("MS-FSA_R865");
            this.Manager.Checkpoint("[In Directory Information Queries,Pseudocode for the algorithm is as follows:Add " +
                    "a context,\r\n                if the operation succeeds ]The object store MUST ret" +
                    "urn:Status set to StatusToReturn.");
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/NO_SUCH_FILE\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_SUCH_FILE, temp52, "return of QueryDirectoryInfo, state S115");
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS32() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp54;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(Skip,True,True,True,FileFullDirectoryInfo" +
                    "rmation)\'");
            temp54 = this.IFSAAdapterInstance.QueryDirectoryInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(0)), true, true, true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.FileFullDirectoryInformation);
            this.Manager.Checkpoint("MS-FSA_R4920");
            this.Manager.Checkpoint(@"[In FileFullDirectoryInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than FieldOffset( FILE_FULL_DIR_INFORMATION.FileName ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp54, "return of QueryDirectoryInfo, state S116");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS34() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp56;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(LengthIsNotAMultipleOf4,True,True,True,Fi" +
                    "leIdBothDirectoryInformation)\'");
            temp56 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.LengthIsNotAMultipleOf4, true, true, true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.FileIdBothDirectoryInformation);
            this.Manager.Checkpoint("MS-FSA_R4939");
            this.Manager.Checkpoint(@"[In FileIdBothDirectoryInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than FieldOffset( FILE_ID_BOTH_DIR_INFORMATION.FileName ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp56, "return of QueryDirectoryInfo, state S117");
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS36() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
           this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp58;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(LengthIsLessThanTheSizeOfAnObjectId,False" +
                    ",False,True,None)\'");
            temp58 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.LengthIsLessThanTheSizeOfAnObjectId, false, false, true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.None);
            this.Manager.Checkpoint("MS-FSA_R4836");
            this.Manager.Checkpoint(@"[In Directory Information Queries] Pseudocode for the algorithm is as follows:
                    If OutputBufferSize is less than the size needed to return a single entry, 
                    the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp58, "return of QueryDirectoryInfo, state S118");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS38() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp60;
            this.Manager.Comment("executing step \'call QueryDirectoryInfo(IndicateAll,False,False,True,FileNamesInf" +
                    "ormation)\'");
            temp60 = this.IFSAAdapterInstance.QueryDirectoryInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.IndicateAll, false, false, true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutBufferSmall.FileNamesInformation);
            this.Manager.Checkpoint("MS-FSA_R4983");
            this.Manager.Checkpoint(@"[In FileNamesInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than FieldOffset( FILE_NAMES_INFORMATION.FileName ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return QueryDirectoryInfo/INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp60, "return of QueryDirectoryInfo, state S119");
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS4() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S82\'");
            bool temp62;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp62);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp62);
            this.Manager.Comment("reaching state \'S102\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS4GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS4GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp65 == 0)) {
                this.Manager.Comment("reaching state \'S124\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty,NotRestartScan,FileNamePatter" +
                        "nMatched,OutputBufferIsEnough)\'");
                temp63 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp63, "return of QueryFileObjectIdInfo, state S156");
                this.Manager.Comment("reaching state \'S180\'");
                goto label9;
            }
            if ((temp65 == 1)) {
                this.Manager.Comment("reaching state \'S125\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp64;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(Empty,RestartScan,FileNamePatternNotMa" +
                        "tched,OutputBufferIsEnough)\'");
                temp64 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R829");
                this.Manager.Checkpoint(@"[In FileObjectIdInformation,Pseudocode for the operation is as follows:]The operation MUST fail with 
                    STATUS_NO_SUCH_FILE under any of the following conditions:EmptyPattern is TRUE and RestartScan is TRUE 
                    and there is no match[the volume for Files having File.ObjectId matching FileNamePattern].");
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/NO_SUCH_FILE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_SUCH_FILE, temp64, "return of QueryFileObjectIdInfo, state S157");
                this.Manager.Comment("reaching state \'S181\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS4GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S102");
        }
        
        private void QueryDirectoryTestCaseS4GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S102");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS6() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S83\'");
            bool temp67;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp67);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp67);
            this.Manager.Comment("reaching state \'S103\'");
            int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS6GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS6GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp70 == 0)) {
                this.Manager.Comment("reaching state \'S126\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp68;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty,RestartScan,FileNamePatternNo" +
                        "tMatched,OutputBufferIsNotEnough)\'");
                temp68 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(1)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp68, "return of QueryFileObjectIdInfo, state S158");
                this.Manager.Comment("reaching state \'S182\'");
                goto label10;
            }
            if ((temp70 == 1)) {
                this.Manager.Comment("reaching state \'S127\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp69;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(Empty,NotRestartScan,FileNamePatternNo" +
                        "tMatched,OutputBufferIsEnough)\'");
                temp69 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R826");
                this.Manager.Checkpoint(@"[In FileObjectIdInformation,Pseudocode for the operation is as follows:]
                    If RestartScan is FALSE and EmptyPattern is TRUE and there is no match[Any comparison where the ObjectId chunk is greater than 
                    or equal to the FileNamePattern.Buffer chunk], the operation MUST be failed with STATUS_NO_MORE_FILES.");
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/NO_MORE_FILES\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_MORE_FILES, temp69, "return of QueryFileObjectIdInfo, state S159");
                this.Manager.Comment("reaching state \'S183\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS6GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S103");
        }
        
        private void QueryDirectoryTestCaseS6GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S103");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryDirectory)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void QueryDirectoryTestCaseS8() {
            this.Manager.BeginTest("QueryDirectoryTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S84\'");
            bool temp72;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileObjectIdInformation(out temp72);
            this.Manager.AddReturn(GetIfImplementQueryFileObjectIdInformationInfo, null, temp72);
            this.Manager.Comment("reaching state \'S104\'");
            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS8GetIfImplementQueryFileObjectIdInformationChecker)), new ExpectedReturn(QueryDirectoryTestCase.GetIfImplementQueryFileObjectIdInformationInfo, null, new GetIfImplementQueryFileObjectIdInformationDelegate1(this.QueryDirectoryTestCaseS8GetIfImplementQueryFileObjectIdInformationChecker1)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S128\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp73;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty_LengthIsNotAMultipleOf4,Resta" +
                        "rtScan,FileNamePatternMatched,OutputBufferIsEnough)\'");
                temp73 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty_LengthIsNotAMultipleOf4, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R4817");
                this.Manager.Checkpoint("[In FileObjectIdInformation ] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp73, "return of QueryFileObjectIdInfo, state S160");
                this.Manager.Comment("reaching state \'S184\'");
                goto label11;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S129\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp74;
                this.Manager.Comment("executing step \'call QueryFileObjectIdInfo(NotEmpty,RestartScan,FileNamePatternNo" +
                        "tMatched,OutputBufferIsEnough)\'");
                temp74 = this.IFSAAdapterInstance.QueryFileObjectIdInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNamePattern.NotEmpty, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryScanType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryFileNameMatchType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.QueryDirectoryOutputBufferType)(0)));
                this.Manager.Checkpoint("MS-FSA_R828");
                this.Manager.Checkpoint(@"[In FileObjectIdInformation,Pseudocode for the operation is as follows:]The operation MUST fail with 
                    STATUS_NO_SUCH_FILE under any of the following conditions:EmptyPattern is FALSE and there is no match
                    [the volume for Files having File.ObjectId matching FileNamePattern].");
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return QueryFileObjectIdInfo/NO_SUCH_FILE\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_SUCH_FILE, temp74, "return of QueryFileObjectIdInfo, state S161");
                this.Manager.Comment("reaching state \'S185\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void QueryDirectoryTestCaseS8GetIfImplementQueryFileObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S104");
        }
        
        private void QueryDirectoryTestCaseS8GetIfImplementQueryFileObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileObjectIdInformation, state S104");
        }
        #endregion
    }
}
