//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class OpenFileTestCase : PtfTestClassBase {
        
        public OpenFileTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void GetOSInfoDelegate1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType platformType);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetOSInfoInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetOSInfo", typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PlatformType).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS0() {
            this.Manager.BeginTest("OpenFileTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp0;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp0);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp0, "securityContext of GetSystemConfig, state S93");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,None,StreamIsNotFound,IsNot" +
                    "SymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FILE_LIST_DIRECT" +
                    "ORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp1 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R366");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]If any of the bits in the mask 0x0CE0FE00 are set, 
                    the operation MUST be failed with STATUS_ACCESS_DENIED.");
            this.Manager.Checkpoint("MS-FSA_R377");
            this.Manager.Checkpoint("[In Application Requests an Open of a File ,Pseudocode for the operation is as fo" +
                    "llows:\r\n                    Phase 1 - Parameter Validation:]If DesiredAccess is " +
                    "zero, the operation MUST be failed with STATUS_ACCESS_DENIED.");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1, "return of OpenExistingFile, state S156");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS10() {
            this.Manager.BeginTest("OpenFileTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S67\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp2;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp2);
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp2, "securityContext of GetSystemConfig, state S98");
            this.Manager.Comment("reaching state \'S129\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,DIRECTORY_FILE|NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)" +
                    "\'");
            temp3 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(65u)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R368");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateOptions.FILE_NON_DIRECTORY_FILE.");
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp3, "return of OpenExistingFile, state S161");
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS12() {
            this.Manager.BeginTest("OpenFileTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp4;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp4);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp4, "securityContext of GetSystemConfig, state S99");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp5;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,SYNCHRONOUS_IO_ALERT,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp5 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.SYNCHRONOUS_IO_ALERT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R369");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_SYNCHRONOUS_IO_ALERT && !DesiredAccess.SYNCHRONIZE.");
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp5, "return of OpenExistingFile, state S162");
            this.Manager.Comment("reaching state \'S194\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS14() {
            this.Manager.BeginTest("OpenFileTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S69\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp6;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp6);
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp6, "securityContext of GetSystemConfig, state S100");
            this.Manager.Comment("reaching state \'S131\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,SYNCHRONOUS_IO_NONALERT,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp7 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.SYNCHRONOUS_IO_NONALERT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2373");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If Create.FILE_SYNCHRONOUS_IO_NONALERT&& !DesiredAccess.SYNCHRONIZE.");
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp7, "return of OpenExistingFile, state S163");
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS16() {
            this.Manager.BeginTest("OpenFileTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp8;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp8);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp8, "securityContext of GetSystemConfig, state S101");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,DELETE_ON_CLOSE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp9 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.DELETE_ON_CLOSE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R371");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DELETE_ON_CLOSE && !DesiredAccess.DELETE.");
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp9, "return of OpenExistingFile, state S164");
            this.Manager.Comment("reaching state \'S196\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS18() {
            this.Manager.BeginTest("OpenFileTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp10;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp10);
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp10, "securityContext of GetSystemConfig, state S102");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp11;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,SYNCHRONOUS_IO_ALERT|SYNCHRONOUS_IO_NONALERT,OPEN_IF,NULL,NOR" +
                    "MAL,NORMAL)\'");
            temp11 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(48u)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R373");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_SYNCHRONOUS_IO_ALERT && Create.FILE_SYNCHRONOUS_IO_NONALERT.");
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp11, "return of OpenExistingFile, state S165");
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS2() {
            this.Manager.BeginTest("OpenFileTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S63\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp12;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp12);
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp12, "securityContext of GetSystemConfig, state S94");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
            this.Manager.Comment("executing step \'call OpenExistingFile(NOT_VALID_VALUE,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,NOT_VALID_VALUE,F" +
                    "ILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp13 = this.IFSAAdapterInstance.OpenExistingFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.NOT_VALID_VALUE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.NOT_VALID_VALUE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2370");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If ShareAccess are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp13, "return of OpenExistingFile, state S157");
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS20() {
            this.Manager.BeginTest("OpenFileTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp14;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp14);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp14, "securityContext of GetSystemConfig, state S103");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,DIRECTORY_FILE,OVERWRITE,NULL,NORMAL,NORMAL)\'");
            temp15 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2375");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == OVERWRITE.");
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp15, "return of OpenExistingFile, state S166");
            this.Manager.Comment("reaching state \'S198\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS22() {
            this.Manager.BeginTest("OpenFileTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp16;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp16);
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp16, "securityContext of GetSystemConfig, state S104");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,DIRECTORY_FILE,SUPERSEDE,NULL,NORMAL,NORMAL)\'");
            temp17 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2374");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == SUPERSEDE .");
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp17, "return of OpenExistingFile, state S167");
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS24() {
            this.Manager.BeginTest("OpenFileTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp18;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp18);
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp18, "securityContext of GetSystemConfig, state S105");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp19;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,DIRECTORY_FILE,OVERWRITE_IF,NULL,NORMAL,NORMAL)\'");
            temp19 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2376");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_DIRECTORY_FILE && CreateDisposition == OVERWRITE_IF).");
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp19, "return of OpenExistingFile, state S168");
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS26() {
            this.Manager.BeginTest("OpenFileTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp20;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp20);
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp20, "securityContext of GetSystemConfig, state S106");
            this.Manager.Comment("reaching state \'S137\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,COMPLETE_IF_OPLOCKED|RESERVE_OPFILTER,OPEN_IF,NULL,NORMAL,NOR" +
                    "MAL)\'");
            temp21 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1048832u)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R375");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.COMPLETE_IF_OPLOCKED && CreateOptions.FILE_RESERVE_OPFILTER.");
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp21, "return of OpenExistingFile, state S169");
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS28() {
            this.Manager.BeginTest("OpenFileTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp22;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp22);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp22, "securityContext of GetSystemConfig, state S107");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_ADD_SUBDIRECTORY,Strea" +
                    "mIsNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ" +
                    ",FILE_LIST_DIRECTORY,NO_INTERMEDIATE_BUFFERING,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp23 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.FILE_ADD_SUBDIRECTORY, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NO_INTERMEDIATE_BUFFERING, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R376");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Phase 1 - Parameter Validation:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions.FILE_NO_INTERMEDIATE_BUFFERING && DesiredAccess.FILE_APPEND_DATA.");
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp23, "return of OpenExistingFile, state S170");
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS30() {
            this.Manager.BeginTest("OpenFileTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S77\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp24;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp24);
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp24, "securityContext of GetSystemConfig, state S108");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp25;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,NotPathNameValid,NON_DIRECTORY_FILE,FILE_SH" +
                    "ARE_READ,FILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp25 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R379");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_OBJECT_NAME_INVALID under any of the following conditions:
                    If PathName is not valid as specified in [MS-FSCC] section 2.1.5.");
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_INVALID\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp25, "return of OpenExistingFile, state S171");
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS32() {
            this.Manager.BeginTest("OpenFileTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp26;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp26);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp26, "securityContext of GetSystemConfig, state S109");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,BackslashName,NON_DIRECTORY_FILE,FILE_SHARE" +
                    "_READ,FILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp27 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R380");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_OBJECT_NAME_INVALID under any of the following conditions:
                    If PathName contains a trailing backslash and CreateOptions.FILE_NON_DIRECTORY_FILE is TRUE.");
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_INVALID\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_INVALID, temp27, "return of OpenExistingFile, state S172");
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS36() {
            this.Manager.BeginTest("OpenFileTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp36;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp36);
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp36, "securityContext of GetSystemConfig, state S111");
            this.Manager.Comment("reaching state \'S143\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp37;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,isprefixLinkNotFound,DIRECTORY_FILE,FILE_SH" +
                    "ARE_READ,FILE_LIST_DIRECTORY,DIRECTORY_FILE,OPEN,NULL,NORMAL,NORMAL)\'");
            temp37 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.isprefixLinkNotFound, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R513");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]
                        If CreateDisposition == FILE_OPEN, the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_NOT_FOUND\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp37, "return of OpenExistingFile, state S175");
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS38() {
            this.Manager.BeginTest("OpenFileTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S81\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp38;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp38);
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp38, "securityContext of GetSystemConfig, state S112");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp39;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OVERWRITE,NULL,NORMAL,NORMAL)\'");
            temp39 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2395");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Else:[If such a link is not found:]If CreateDisposition == FILE_OVERWRITE), 
                        the operation MUST be failed with STATUS_OBJECT_NAME_NOT_FOUND.");
            this.Manager.Comment("reaching state \'S176\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_NOT_FOUND\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_NOT_FOUND, temp39, "return of OpenExistingFile, state S176");
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS4() {
            this.Manager.BeginTest("OpenFileTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp40;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp40);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp40, "securityContext of GetSystemConfig, state S95");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp41;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,NOT_VALID_VALUE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp41 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NOT_VALID_VALUE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2371");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateOptions are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp41, "return of OpenExistingFile, state S158");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS40() {
            this.Manager.BeginTest("OpenFileTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp42;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp42);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp42, "securityContext of GetSystemConfig, state S113");
            this.Manager.Comment("reaching state \'S145\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FILE_LI" +
                    "ST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp43 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R399");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , 
                     Pseudocode for the operation is as follows:Phase 6 - Location of file:] 
                     Pseudocode for this search:For i = 1 to n-1:If Link.File.IsSymbolicLink is TRUE, 
                     the operation MUST be failed with Status set to STATUS_STOPPED_ON_SYMLINK .");
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/STOPPED_ON_SYMLINK\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.STOPPED_ON_SYMLINK, temp43, "return of OpenExistingFile, state S177");
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS42() {
            this.Manager.BeginTest("OpenFileTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S83\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp44;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp44);
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp44, "securityContext of GetSystemConfig, state S114");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp45;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsNotSymbolicLink,DataFile,OpenFileNotNull,NON_DIRECTORY_FILE,FILE_SHARE_" +
                    "READ,FILE_LIST_DIRECTORY,DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NORMAL)\'");
            temp45 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.OpenFileNotNull, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R2396");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Phase 7 -- Type of file to open:]
                        If FileTypeToOpen is DirectoryFile and Open.File is not NULL and Open.File.FileType is not DirectoryFile:
                        else[If CreateDisposition != FILE_CREATE] the operation MUST be failed with STATUS_NOT_A_DIRECTORY.");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/NOT_A_DIRECTORY\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_A_DIRECTORY, temp45, "return of OpenExistingFile, state S178");
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS44() {
            this.Manager.BeginTest("OpenFileTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp46;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp46);
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp46, "securityContext of GetSystemConfig, state S115");
            this.Manager.Comment("reaching state \'S147\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp47;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_ADD_SUBDIRECTORY,Strea" +
                    "mIsFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FI" +
                    "LE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,READONLY,NORMAL)\'");
            temp47 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.FILE_ADD_SUBDIRECTORY, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R53");
            this.Manager.Checkpoint(@"[In Algorithm to Check Access to an Existing File,Pseudocode for these checks is as follows:]
                    If Open.File.FileType is DataFile and (File.FileAttributes.FILE_ATTRIBUTE_READONLY && (DesiredAccess.FILE_WRITE_DATA )), then return STATUS_ACCESS_DENIED.");
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp47, "return of OpenExistingFile, state S179");
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS46() {
            this.Manager.BeginTest("OpenFileTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S85\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp48;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp48);
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp48, "securityContext of GetSystemConfig, state S116");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp49;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_ADD_FILE,StreamIsFound" +
                    ",IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FILE_LIST_" +
                    "DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,READONLY,NORMAL)\'");
            temp49 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.FILE_ADD_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R2422");
            this.Manager.Checkpoint(@"[In Algorithm to Check Access to an Existing File]Pseudocode for these checks is as follows:
                    If Open.File.FileType is DataFile and (File.FileAttributes.FILE_ATTRIBUTE_READONLY && (DesiredAccess.FILE_APPEND_DATA)), 
                    then return STATUS_ACCESS_DENIED.");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp49, "return of OpenExistingFile, state S180");
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS48() {
            this.Manager.BeginTest("OpenFileTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp50;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp50);
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp50, "securityContext of GetSystemConfig, state S117");
            this.Manager.Comment("reaching state \'S149\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,DELETE,StreamIsFound,IsNotS" +
                    "ymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FILE_LIST_DIRECTO" +
                    "RY,DELETE_ON_CLOSE,OPEN,NULL,READONLY,NORMAL)\'");
            temp51 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.DELETE_ON_CLOSE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R54");
            this.Manager.Checkpoint("[In Algorithm to Check Access to an Existing File,Pseudocode for these checks is " +
                    "as follows:]\r\n                    If ((File.FileAttributes.FILE_ATTRIBUTE_READON" +
                    "LY) && CreateOptions.FILE_DELETE_ON_CLOSE), then return STATUS_CANNOT_DELETE.");
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/CANNOT_DELETE\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.CANNOT_DELETE, temp51, "return of OpenExistingFile, state S181");
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS50() {
            this.Manager.BeginTest("OpenFileTestCaseS50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S87\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp52;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp52);
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp52, "securityContext of GetSystemConfig, state S118");
            this.Manager.Comment("reaching state \'S150\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp53;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_DELETE,FILE_LIST_DIRECTORY,Strea" +
                    "mIsFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,DE" +
                    "LETE,NON_DIRECTORY_FILE,OPEN,NULL,NORMAL,NORMAL)\'");
            temp53 = this.IFSAAdapterInstance.OpenExistingFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_DELETE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R65");
            this.Manager.Checkpoint("[In Algorithm to Check Access to an Existing File,Pseudocode for these checks is " +
                    "as follows:,\r\n                if the sharing conflicts check has no violation]Re" +
                    "turn STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R656");
            this.Manager.Checkpoint("[In Algorithm to Check Sharing Access to an Existing Stream or Directory]\r\n      " +
                    "          Pseudocode for these checks is as follows,if the sharing checks has no" +
                    " violation]Return STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R631");
            this.Manager.Checkpoint("[In Open of an Existing File,Pseudocode for these checks is as follows:]\r\n       " +
                    "         The object store MUST return :CreateAction set to FILE_OPENED.");
            this.Manager.Checkpoint("MS-FSA_R630");
            this.Manager.Checkpoint("[In Open of an Existing File,Pseudocode for these checks is as follows:]\r\n       " +
                    "         The object store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp53, "return of OpenExistingFile, state S182");
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS52() {
            this.Manager.BeginTest("OpenFileTestCaseS52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp54;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp54);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp54, "securityContext of GetSystemConfig, state S119");
            this.Manager.Comment("reaching state \'S151\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp55;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_ADD_FILE,StreamIsFound" +
                    ",IsNotSymbolicLink,DataFile,Normal,DIRECTORY_FILE,FILE_SHARE_READ,FILE_LIST_DIRE" +
                    "CTORY,DIRECTORY_FILE,OPEN_IF,NULL,READONLY,NORMAL)\'");
            temp55 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.FILE_ADD_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R65");
            this.Manager.Checkpoint("[In Algorithm to Check Access to an Existing File,Pseudocode for these checks is " +
                    "as follows:,\r\n                if the sharing conflicts check has no violation]Re" +
                    "turn STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R639");
            this.Manager.Checkpoint(@"[In Open of an Existing File,Pseudocode for the operation is as follows:
                            If FileTypeToOpen is DirectoryFile:If CreateDisposition is FILE_OPEN then:]
                            If this [Perform sharing access checks as described in section 3.1.5.1.2.2.]fails, the request MUST be failed with the same status.");
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_VIOLATION\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_VIOLATION, temp55, "return of OpenExistingFile, state S183");
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS54() {
            this.Manager.BeginTest("OpenFileTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S89\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp56;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp56);
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp56, "securityContext of GetSystemConfig, state S120");
            this.Manager.Comment("reaching state \'S152\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp57;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsNotSymbolicLink,DataFile,Normal,DIRECTORY_FILE,FILE_SHARE_WRITE,FILE_LI" +
                    "ST_DIRECTORY,DIRECTORY_FILE,OPEN,NULL,NORMAL,NORMAL)\'");
            temp57 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R65");
            this.Manager.Checkpoint("[In Algorithm to Check Access to an Existing File,Pseudocode for these checks is " +
                    "as follows:,\r\n                if the sharing conflicts check has no violation]Re" +
                    "turn STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R636");
            this.Manager.Checkpoint(@"[In Open of an Existing File,Pseudocode for the operation is as follows:
                            If OpenFileType is DirectoryFile:If CreateDisposition is FILE_OPEN_IF then:]
                            If this[Perform access checks as described in section 3.1.5.1.2.1.] fails, the request MUST be failed with the same status.");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_VIOLATION\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_VIOLATION, temp57, "return of OpenExistingFile, state S184");
            this.Manager.Comment("reaching state \'S216\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS56() {
            this.Manager.BeginTest("OpenFileTestCaseS56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp58;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp58);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp58, "securityContext of GetSystemConfig, state S121");
            this.Manager.Comment("reaching state \'S153\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp59;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,FILE" +
                    "_LIST_DIRECTORY,NON_DIRECTORY_FILE,CREATE,NULL,NORMAL,NORMAL)\'");
            temp59 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R584");
            this.Manager.Checkpoint(@"[In Open of an Existing File,Pseudocode for the operation is as follows:
                            Else if FileTypeToOpen is DataFile,If Stream was found,]If CreateDisposition is FILE_CREATE, 
                            then the operation MUST be failed with STATUS_OBJECT_NAME_COLLISION.");
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_COLLISION\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_COLLISION, temp59, "return of OpenExistingFile, state S185");
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS58() {
            this.Manager.BeginTest("OpenFileTestCaseS58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S91\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp60;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp60);
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp60, "securityContext of GetSystemConfig, state S122");
            this.Manager.Comment("reaching state \'S154\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp61;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsNotSymbolicLink,DataFile,StreamNameNull,NON_DIRECTORY_FILE,FILE_SHARE_R" +
                    "EAD,FILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OVERWRITE_IF,NULL,SYSTEM,NORMAL)\'");
            temp61 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.StreamNameNull, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OVERWRITE_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.SYSTEM, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R488");
            this.Manager.Checkpoint(@"[In Open of an Existing File,Pseudocode for these checks is as follows:
                                    Else if FileTypeToOpen is DataFile,If Stream was found,Else (CreateDisposition is not FILE_OPEN and is not FILE_OPEN_IF),
                                    If Stream.Name is empty:]If File.FileAttributes.FILE_ATTRIBUTE_SYSTEM is TRUE 
                                    and DesiredFileAttributes.FILE_ATTRIBUTE_SYSTEM is FALSE, then the operation MUST be failed with STATUS_ACCESS_DENIED.");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp61, "return of OpenExistingFile, state S186");
            this.Manager.Comment("reaching state \'S218\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS6() {
            this.Manager.BeginTest("OpenFileTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp62;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp62);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp62, "securityContext of GetSystemConfig, state S96");
            this.Manager.Comment("reaching state \'S127\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,NOT_VALID_VALUE,NULL,NORMAL,NORMAL)\'");
            temp63 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.NOT_VALID_VALUE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R2372");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If CreateDisposition are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp63, "return of OpenExistingFile, state S159");
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS60() {
            this.Manager.BeginTest("OpenFileTestCaseS60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp64;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp64);
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp64, "securityContext of GetSystemConfig, state S123");
            this.Manager.Comment("reaching state \'S155\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp65;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sFound,IsNotSymbolicLink,DataFile,OpenFileNotNull,NON_DIRECTORY_FILE,FILE_SHARE_" +
                    "READ,FILE_LIST_DIRECTORY,DIRECTORY_FILE,CREATE,NULL,NORMAL,NORMAL)\'");
            temp65 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.OpenFileNotNull, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R414");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 7 -- Type of file to open:]If FileTypeToOpen is DirectoryFile and Open.File is not NULL 
                        and Open.File.FileType is not DirectoryFile:If CreateDisposition == FILE_CREATE then the operation MUST be failed with STATUS_OBJECT_NAME_COLLISION.");
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/OBJECT_NAME_COLLISION\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_NAME_COLLISION, temp65, "return of OpenExistingFile, state S187");
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.OpenFile)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.NonSmb)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Positive)]
        public void OpenFileTestCaseS8() {
            this.Manager.BeginTest("OpenFileTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp66;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp66);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp66, "securityContext of GetSystemConfig, state S97");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp67;
            this.Manager.Comment("executing step \'call OpenExistingFile(FILE_SHARE_READ,FILE_LIST_DIRECTORY,StreamI" +
                    "sNotFound,IsNotSymbolicLink,DataFile,Normal,NON_DIRECTORY_FILE,FILE_SHARE_READ,F" +
                    "ILE_LIST_DIRECTORY,NON_DIRECTORY_FILE,OPEN_IF,NULL,NORMAL,NOT_VALID_VALUE)\'");
            temp67 = this.IFSAAdapterInstance.OpenExistingFile(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOpen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NOT_VALID_VALUE);
            this.Manager.Checkpoint("MS-FSA_R404");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File ,Pseudocode for the operation is as follows:
                    Phase 1 - Parameter Validation:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If FileAttributes are not valid values for a file object as specified in [MS-SMB2] section 2.2.13.");
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("checking step \'return OpenExistingFile/INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp67, "return of OpenExistingFile, state S160");
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
