// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class IoCtlRequestTestCase : PtfTestClassBase {
        
        public IoCtlRequestTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetIfOpenFileVolumeIsReadOnlyDelegate1(bool isReadOnly);
        
        public delegate void GetIfNtfsFileSystemDelegate1(bool isNtfsFileSystem);
        
        public delegate void GetIfImplementObjectIdIoCtlRequestDelegate1(bool isImplemented);
        
        public delegate void GetObjectFunctionalityDelegate1(bool isImplemented);
        
        public delegate void GetReparsePointsSupportedDelegate1(bool isSupported);
        
        public delegate void GetAdministratorDelegate1(bool isGet);
        
        public delegate void GetopenHasManageVolPrivilegeDelegate1(bool isSupported);
        
        public delegate void GetRestoreAccessDelegate1(bool isHas);
        
        public delegate void GetObjectIDsSupportedDelegate1(bool isSupported);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetIfNtfsFileSystemInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfNtfsFileSystem", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetObjectFunctionalityInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetObjectFunctionality", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetObjectIDsSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetObjectIDsSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIfOpenFileVolumeIsReadOnlyInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfOpenFileVolumeIsReadOnly", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIfImplementObjectIdIoCtlRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfImplementObjectIdIoCtlRequest", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetRestoreAccessInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetRestoreAccess", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetReparsePointsSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetReparsePointsSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetAdministratorInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetAdministrator", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetopenHasManageVolPrivilegeInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetopenHasManageVolPrivilege", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS0() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S142\'");
            bool temp0;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp0);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp0);
            this.Manager.Comment("reaching state \'S218\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS0GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS0GetIfNtfsFileSystemChecker1)));
            if ((temp93 == 0)) {
                this.Manager.Comment("reaching state \'S294\'");
                bool temp1;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1);
                this.Manager.Comment("reaching state \'S446\'");
                int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS0GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS0GetObjectFunctionalityChecker1)));
                if ((temp46 == 0)) {
                    this.Manager.Comment("reaching state \'S598\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp2);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S832\'");
                    int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker1)));
                    if ((temp23 == 0)) {
                        this.Manager.Comment("reaching state \'S1066\'");
                        bool temp3;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp3);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp3);
                        this.Manager.Comment("reaching state \'S1360\'");
                        int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S1604\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp4;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp4 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1928\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp4, "return of CreateFile, state S1928");
                            this.Manager.Comment("reaching state \'S2148\'");
                            bool temp5;
                            bool temp6;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp7 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp5, out temp6);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2368\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp5, "isBytesReturnedSet of FsCtlForEasyRequest, state S2368");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp6, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2368");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp7, "return of FsCtlForEasyRequest, state S2368");
                            this.Manager.Comment("reaching state \'S2528\'");
                            goto label0;
                        }
                        if ((temp12 == 1)) {
                            this.Manager.Comment("reaching state \'S1605\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp8 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1929\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp8, "return of CreateFile, state S1929");
                            this.Manager.Comment("reaching state \'S2149\'");
                            bool temp9;
                            bool temp10;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp11;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp11 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp9, out temp10);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2369\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp9, "isBytesReturnedSet of FsCtlForEasyRequest, state S2369");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp10, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2369");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp11, "return of FsCtlForEasyRequest, state S2369");
                            this.Manager.Comment("reaching state \'S2529\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp23 == 1)) {
                        this.Manager.Comment("reaching state \'S1067\'");
                        bool temp13;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp13);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp13);
                        this.Manager.Comment("reaching state \'S1361\'");
                        int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp22 == 0)) {
                            this.Manager.Comment("reaching state \'S1606\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp14;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp14 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1930\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp14, "return of CreateFile, state S1930");
                            this.Manager.Comment("reaching state \'S2150\'");
                            bool temp15;
                            bool temp16;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp17 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp15, out temp16);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2370\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp15, "isBytesReturnedSet of FsCtlForEasyRequest, state S2370");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp16, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2370");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp17, "return of FsCtlForEasyRequest, state S2370");
                            this.Manager.Comment("reaching state \'S2530\'");
                            goto label1;
                        }
                        if ((temp22 == 1)) {
                            this.Manager.Comment("reaching state \'S1607\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp18;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp18 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1931\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp18, "return of CreateFile, state S1931");
                            this.Manager.Comment("reaching state \'S2151\'");
                            bool temp19;
                            bool temp20;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp21 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp19, out temp20);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2371\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp19, "isBytesReturnedSet of FsCtlForEasyRequest, state S2371");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp20, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2371");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp21, "return of FsCtlForEasyRequest, state S2371");
                            this.Manager.Comment("reaching state \'S2531\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp46 == 1)) {
                    this.Manager.Comment("reaching state \'S599\'");
                    bool temp24;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp24);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp24);
                    this.Manager.Comment("reaching state \'S833\'");
                    int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker3)));
                    if ((temp45 == 0)) {
                        this.Manager.Comment("reaching state \'S1068\'");
                        bool temp25;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp25);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp25);
                        this.Manager.Comment("reaching state \'S1362\'");
                        int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp34 == 0)) {
                            this.Manager.Comment("reaching state \'S1608\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp26 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1932\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp26, "return of CreateFile, state S1932");
                            this.Manager.Comment("reaching state \'S2152\'");
                            bool temp27;
                            bool temp28;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp29;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp29 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp27, out temp28);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2372\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp27, "isBytesReturnedSet of FsCtlForEasyRequest, state S2372");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp28, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2372");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp29, "return of FsCtlForEasyRequest, state S2372");
                            this.Manager.Comment("reaching state \'S2532\'");
                            goto label3;
                        }
                        if ((temp34 == 1)) {
                            this.Manager.Comment("reaching state \'S1609\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp30;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp30 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1933\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp30, "return of CreateFile, state S1933");
                            this.Manager.Comment("reaching state \'S2153\'");
                            bool temp31;
                            bool temp32;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp33 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp31, out temp32);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2373\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp31, "isBytesReturnedSet of FsCtlForEasyRequest, state S2373");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp32, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2373");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp33, "return of FsCtlForEasyRequest, state S2373");
                            this.Manager.Comment("reaching state \'S2533\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp45 == 1)) {
                        this.Manager.Comment("reaching state \'S1069\'");
                        bool temp35;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp35);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp35);
                        this.Manager.Comment("reaching state \'S1363\'");
                        int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp44 == 0)) {
                            this.Manager.Comment("reaching state \'S1610\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp36;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp36 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1934\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp36, "return of CreateFile, state S1934");
                            this.Manager.Comment("reaching state \'S2154\'");
                            bool temp37;
                            bool temp38;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp39;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp39 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp37, out temp38);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2374\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp37, "isBytesReturnedSet of FsCtlForEasyRequest, state S2374");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp38, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2374");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp39, "return of FsCtlForEasyRequest, state S2374");
                            this.Manager.Comment("reaching state \'S2534\'");
                            goto label4;
                        }
                        if ((temp44 == 1)) {
                            this.Manager.Comment("reaching state \'S1611\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp40;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp40 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1935\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp40, "return of CreateFile, state S1935");
                            this.Manager.Comment("reaching state \'S2155\'");
                            bool temp41;
                            bool temp42;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp43 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp41, out temp42);
                            this.Manager.Checkpoint("MS-FSA_R4721");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION] If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<51>");
                            this.Manager.Comment("reaching state \'S2375\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp41, "isBytesReturnedSet of FsCtlForEasyRequest, state S2375");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp42, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2375");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp43, "return of FsCtlForEasyRequest, state S2375");
                            this.Manager.Comment("reaching state \'S2535\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label14;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S295\'");
                bool temp47;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp47);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp47);
                this.Manager.Comment("reaching state \'S447\'");
                int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS0GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS0GetObjectFunctionalityChecker3)));
                if ((temp92 == 0)) {
                    this.Manager.Comment("reaching state \'S600\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp48);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp48);
                    this.Manager.Comment("reaching state \'S834\'");
                    int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker5)));
                    if ((temp69 == 0)) {
                        this.Manager.Comment("reaching state \'S1070\'");
                        bool temp49;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp49);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp49);
                        this.Manager.Comment("reaching state \'S1364\'");
                        int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp58 == 0)) {
                            this.Manager.Comment("reaching state \'S1612\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp50 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1936\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp50, "return of CreateFile, state S1936");
                            this.Manager.Comment("reaching state \'S2156\'");
                            bool temp51;
                            bool temp52;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp53;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp53 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp51, out temp52);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2376\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp51, "isBytesReturnedSet of FsCtlForEasyRequest, state S2376");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp52, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2376");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp53, "return of FsCtlForEasyRequest, state S2376");
                            this.Manager.Comment("reaching state \'S2536\'");
                            goto label7;
                        }
                        if ((temp58 == 1)) {
                            this.Manager.Comment("reaching state \'S1613\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp54;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp54 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1937\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp54, "return of CreateFile, state S1937");
                            this.Manager.Comment("reaching state \'S2157\'");
                            bool temp55;
                            bool temp56;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp57;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp57 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp55, out temp56);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2377\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp55, "isBytesReturnedSet of FsCtlForEasyRequest, state S2377");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp56, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2377");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp57, "return of FsCtlForEasyRequest, state S2377");
                            this.Manager.Comment("reaching state \'S2537\'");
                            goto label7;
                        }
                        throw new InvalidOperationException("never reached");
                    label7:
;
                        goto label9;
                    }
                    if ((temp69 == 1)) {
                        this.Manager.Comment("reaching state \'S1071\'");
                        bool temp59;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp59);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp59);
                        this.Manager.Comment("reaching state \'S1365\'");
                        int temp68 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp68 == 0)) {
                            this.Manager.Comment("reaching state \'S1614\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp60;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp60 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1938\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp60, "return of CreateFile, state S1938");
                            this.Manager.Comment("reaching state \'S2158\'");
                            bool temp61;
                            bool temp62;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp63 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp61, out temp62);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2378\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp61, "isBytesReturnedSet of FsCtlForEasyRequest, state S2378");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp62, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2378");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp63, "return of FsCtlForEasyRequest, state S2378");
                            this.Manager.Comment("reaching state \'S2538\'");
                            goto label8;
                        }
                        if ((temp68 == 1)) {
                            this.Manager.Comment("reaching state \'S1615\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp64;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp64 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1939\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp64, "return of CreateFile, state S1939");
                            this.Manager.Comment("reaching state \'S2159\'");
                            bool temp65;
                            bool temp66;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp67;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp67 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp65, out temp66);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2379\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp65, "isBytesReturnedSet of FsCtlForEasyRequest, state S2379");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp66, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2379");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp67, "return of FsCtlForEasyRequest, state S2379");
                            this.Manager.Comment("reaching state \'S2539\'");
                            goto label8;
                        }
                        throw new InvalidOperationException("never reached");
                    label8:
;
                        goto label9;
                    }
                    throw new InvalidOperationException("never reached");
                label9:
;
                    goto label13;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S601\'");
                    bool temp70;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp70);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp70);
                    this.Manager.Comment("reaching state \'S835\'");
                    int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker7)));
                    if ((temp91 == 0)) {
                        this.Manager.Comment("reaching state \'S1072\'");
                        bool temp71;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp71);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp71);
                        this.Manager.Comment("reaching state \'S1366\'");
                        int temp80 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp80 == 0)) {
                            this.Manager.Comment("reaching state \'S1616\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp72;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp72 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1940\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp72, "return of CreateFile, state S1940");
                            this.Manager.Comment("reaching state \'S2160\'");
                            bool temp73;
                            bool temp74;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp75;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp75 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp73, out temp74);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2380\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp73, "isBytesReturnedSet of FsCtlForEasyRequest, state S2380");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp74, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2380");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp75, "return of FsCtlForEasyRequest, state S2380");
                            this.Manager.Comment("reaching state \'S2540\'");
                            goto label10;
                        }
                        if ((temp80 == 1)) {
                            this.Manager.Comment("reaching state \'S1617\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp76;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp76 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1941\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp76, "return of CreateFile, state S1941");
                            this.Manager.Comment("reaching state \'S2161\'");
                            bool temp77;
                            bool temp78;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp79;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp79 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp77, out temp78);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2381\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp77, "isBytesReturnedSet of FsCtlForEasyRequest, state S2381");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp78, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2381");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp79, "return of FsCtlForEasyRequest, state S2381");
                            this.Manager.Comment("reaching state \'S2541\'");
                            goto label10;
                        }
                        throw new InvalidOperationException("never reached");
                    label10:
;
                        goto label12;
                    }
                    if ((temp91 == 1)) {
                        this.Manager.Comment("reaching state \'S1073\'");
                        bool temp81;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp81);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp81);
                        this.Manager.Comment("reaching state \'S1367\'");
                        int temp90 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp90 == 0)) {
                            this.Manager.Comment("reaching state \'S1618\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp82;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp82 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1942\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp82, "return of CreateFile, state S1942");
                            this.Manager.Comment("reaching state \'S2162\'");
                            bool temp83;
                            bool temp84;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp85;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp85 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp83, out temp84);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2382\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp83, "isBytesReturnedSet of FsCtlForEasyRequest, state S2382");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp84, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2382");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp85, "return of FsCtlForEasyRequest, state S2382");
                            this.Manager.Comment("reaching state \'S2542\'");
                            goto label11;
                        }
                        if ((temp90 == 1)) {
                            this.Manager.Comment("reaching state \'S1619\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp86;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp86 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1943\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp86, "return of CreateFile, state S1943");
                            this.Manager.Comment("reaching state \'S2163\'");
                            bool temp87;
                            bool temp88;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp89;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(SET_ZERO_ON_DEALLOCATION,BufferSizeSucce" +
                                    "ss,out _,out _)\'");
                            temp89 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_ZERO_ON_DEALLOCATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp87, out temp88);
                            this.Manager.Checkpoint("MS-FSA_R1394");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION,Pseudocode for the operation is as follows:]\r\n" +
                                    "                            TUpon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1388");
                            this.Manager.Checkpoint("[In FSCTL_SET_ZERO_ON_DEALLOCATION]On completion the object store MUST return:[St" +
                                    "atus].");
                            this.Manager.Comment("reaching state \'S2383\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp87, "isBytesReturnedSet of FsCtlForEasyRequest, state S2383");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp88, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2383");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp89, "return of FsCtlForEasyRequest, state S2383");
                            this.Manager.Comment("reaching state \'S2543\'");
                            goto label11;
                        }
                        throw new InvalidOperationException("never reached");
                    label11:
;
                        goto label12;
                    }
                    throw new InvalidOperationException("never reached");
                label12:
;
                    goto label13;
                }
                throw new InvalidOperationException("never reached");
            label13:
;
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS0GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S218");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S446");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S832");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1360");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1360");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S832");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1361");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1361");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S446");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S833");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1362");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1362");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S833");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1363");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1363");
        }
        
        private void IoCtlRequestTestCaseS0GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S218");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S447");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S834");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1364");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1364");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S834");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1365");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1365");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S447");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S835");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1366");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1366");
        }
        
        private void IoCtlRequestTestCaseS0GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S835");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1367");
        }
        
        private void IoCtlRequestTestCaseS0GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1367");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS10() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S147\'");
            bool temp94;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp94);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp94);
            this.Manager.Comment("reaching state \'S223\'");
            int temp187 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS10GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS10GetIfNtfsFileSystemChecker1)));
            if ((temp187 == 0)) {
                this.Manager.Comment("reaching state \'S304\'");
                bool temp95;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp95);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp95);
                this.Manager.Comment("reaching state \'S456\'");
                int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS10GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS10GetObjectFunctionalityChecker1)));
                if ((temp140 == 0)) {
                    this.Manager.Comment("reaching state \'S618\'");
                    bool temp96;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp96);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp96);
                    this.Manager.Comment("reaching state \'S852\'");
                    int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker1)));
                    if ((temp117 == 0)) {
                        this.Manager.Comment("reaching state \'S1106\'");
                        bool temp97;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp97);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp97);
                        this.Manager.Comment("reaching state \'S1400\'");
                        int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp106 == 0)) {
                            this.Manager.Comment("reaching state \'S1684\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp98;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp98 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2008\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp98, "return of CreateFile, state S2008");
                            this.Manager.Comment("reaching state \'S2228\'");
                            bool temp99;
                            bool temp100;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp101;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp101 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp99, out temp100);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2448\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp99, "isBytesReturnedSet of FsCtlForEasyRequest, state S2448");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp100, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2448");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp101, "return of FsCtlForEasyRequest, state S2448");
                            this.Manager.Comment("reaching state \'S2608\'");
                            goto label15;
                        }
                        if ((temp106 == 1)) {
                            this.Manager.Comment("reaching state \'S1685\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp102;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp102 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2009\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp102, "return of CreateFile, state S2009");
                            this.Manager.Comment("reaching state \'S2229\'");
                            bool temp103;
                            bool temp104;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp105;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp105 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp103, out temp104);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2449\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp103, "isBytesReturnedSet of FsCtlForEasyRequest, state S2449");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp104, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2449");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp105, "return of FsCtlForEasyRequest, state S2449");
                            this.Manager.Comment("reaching state \'S2609\'");
                            goto label15;
                        }
                        throw new InvalidOperationException("never reached");
                    label15:
;
                        goto label17;
                    }
                    if ((temp117 == 1)) {
                        this.Manager.Comment("reaching state \'S1107\'");
                        bool temp107;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp107);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp107);
                        this.Manager.Comment("reaching state \'S1401\'");
                        int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp116 == 0)) {
                            this.Manager.Comment("reaching state \'S1686\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp108;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp108 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2010\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp108, "return of CreateFile, state S2010");
                            this.Manager.Comment("reaching state \'S2230\'");
                            bool temp109;
                            bool temp110;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp111;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp111 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp109, out temp110);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2450\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp109, "isBytesReturnedSet of FsCtlForEasyRequest, state S2450");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp110, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2450");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp111, "return of FsCtlForEasyRequest, state S2450");
                            this.Manager.Comment("reaching state \'S2610\'");
                            goto label16;
                        }
                        if ((temp116 == 1)) {
                            this.Manager.Comment("reaching state \'S1687\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp112;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp112 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2011\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp112, "return of CreateFile, state S2011");
                            this.Manager.Comment("reaching state \'S2231\'");
                            bool temp113;
                            bool temp114;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp115;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp115 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp113, out temp114);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2451\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp113, "isBytesReturnedSet of FsCtlForEasyRequest, state S2451");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp114, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2451");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp115, "return of FsCtlForEasyRequest, state S2451");
                            this.Manager.Comment("reaching state \'S2611\'");
                            goto label16;
                        }
                        throw new InvalidOperationException("never reached");
                    label16:
;
                        goto label17;
                    }
                    throw new InvalidOperationException("never reached");
                label17:
;
                    goto label21;
                }
                if ((temp140 == 1)) {
                    this.Manager.Comment("reaching state \'S619\'");
                    bool temp118;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp118);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp118);
                    this.Manager.Comment("reaching state \'S853\'");
                    int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker3)));
                    if ((temp139 == 0)) {
                        this.Manager.Comment("reaching state \'S1108\'");
                        bool temp119;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp119);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp119);
                        this.Manager.Comment("reaching state \'S1402\'");
                        int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp128 == 0)) {
                            this.Manager.Comment("reaching state \'S1688\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp120;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp120 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2012\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp120, "return of CreateFile, state S2012");
                            this.Manager.Comment("reaching state \'S2232\'");
                            bool temp121;
                            bool temp122;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp123;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp123 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp121, out temp122);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2452\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp121, "isBytesReturnedSet of FsCtlForEasyRequest, state S2452");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp122, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2452");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp123, "return of FsCtlForEasyRequest, state S2452");
                            this.Manager.Comment("reaching state \'S2612\'");
                            goto label18;
                        }
                        if ((temp128 == 1)) {
                            this.Manager.Comment("reaching state \'S1689\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp124;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp124 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2013\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp124, "return of CreateFile, state S2013");
                            this.Manager.Comment("reaching state \'S2233\'");
                            bool temp125;
                            bool temp126;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp127;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp127 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp125, out temp126);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2453\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp125, "isBytesReturnedSet of FsCtlForEasyRequest, state S2453");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp126, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2453");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp127, "return of FsCtlForEasyRequest, state S2453");
                            this.Manager.Comment("reaching state \'S2613\'");
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label20;
                    }
                    if ((temp139 == 1)) {
                        this.Manager.Comment("reaching state \'S1109\'");
                        bool temp129;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp129);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp129);
                        this.Manager.Comment("reaching state \'S1403\'");
                        int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp138 == 0)) {
                            this.Manager.Comment("reaching state \'S1690\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp130;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp130 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2014\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp130, "return of CreateFile, state S2014");
                            this.Manager.Comment("reaching state \'S2234\'");
                            bool temp131;
                            bool temp132;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp133;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp133 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp131, out temp132);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2454\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp131, "isBytesReturnedSet of FsCtlForEasyRequest, state S2454");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp132, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2454");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp133, "return of FsCtlForEasyRequest, state S2454");
                            this.Manager.Comment("reaching state \'S2614\'");
                            goto label19;
                        }
                        if ((temp138 == 1)) {
                            this.Manager.Comment("reaching state \'S1691\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp134;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp134 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2015\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp134, "return of CreateFile, state S2015");
                            this.Manager.Comment("reaching state \'S2235\'");
                            bool temp135;
                            bool temp136;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp137;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(RECALL_FILE,BufferSizeSuccess,out _,out " +
                                    "_)\'");
                            temp137 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.RECALL_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp135, out temp136);
                            this.Manager.Checkpoint("MS-FSA_R1263");
                            this.Manager.Checkpoint("[ In FSCTL_RECALL_FILE]On completion, the object store MUST return:[Status].");
                            this.Manager.Checkpoint("MS-FSA_R1136");
                            this.Manager.Checkpoint("[ In FSCTL_RECALL_FILE,If Open.File.FileAttributes.FILE_ATTRIBUTE_OFFLINE is set]" +
                                    "\r\n                            Upon successful completion of the operation, the o" +
                                    "bject store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2455\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp135, "isBytesReturnedSet of FsCtlForEasyRequest, state S2455");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp136, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2455");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp137, "return of FsCtlForEasyRequest, state S2455");
                            this.Manager.Comment("reaching state \'S2615\'");
                            goto label19;
                        }
                        throw new InvalidOperationException("never reached");
                    label19:
;
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label21;
                }
                throw new InvalidOperationException("never reached");
            label21:
;
                goto label29;
            }
            if ((temp187 == 1)) {
                this.Manager.Comment("reaching state \'S305\'");
                bool temp141;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp141);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp141);
                this.Manager.Comment("reaching state \'S457\'");
                int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS10GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS10GetObjectFunctionalityChecker3)));
                if ((temp186 == 0)) {
                    this.Manager.Comment("reaching state \'S620\'");
                    bool temp142;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp142);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp142);
                    this.Manager.Comment("reaching state \'S854\'");
                    int temp163 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker5)));
                    if ((temp163 == 0)) {
                        this.Manager.Comment("reaching state \'S1110\'");
                        bool temp143;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp143);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp143);
                        this.Manager.Comment("reaching state \'S1404\'");
                        int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp152 == 0)) {
                            this.Manager.Comment("reaching state \'S1692\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp144;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp144 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2016\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp144, "return of CreateFile, state S2016");
                            this.Manager.Comment("reaching state \'S2236\'");
                            bool temp145;
                            bool temp146;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp147;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp147 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp145, out temp146);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2456\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp145, "isBytesReturnedSet of FsCtlForEasyRequest, state S2456");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp146, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2456");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp147, "return of FsCtlForEasyRequest, state S2456");
                            this.Manager.Comment("reaching state \'S2616\'");
                            goto label22;
                        }
                        if ((temp152 == 1)) {
                            this.Manager.Comment("reaching state \'S1693\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp148;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp148 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2017\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp148, "return of CreateFile, state S2017");
                            this.Manager.Comment("reaching state \'S2237\'");
                            bool temp149;
                            bool temp150;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp151;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp151 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp149, out temp150);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2457\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp149, "isBytesReturnedSet of FsCtlForEasyRequest, state S2457");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp150, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2457");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp151, "return of FsCtlForEasyRequest, state S2457");
                            this.Manager.Comment("reaching state \'S2617\'");
                            goto label22;
                        }
                        throw new InvalidOperationException("never reached");
                    label22:
;
                        goto label24;
                    }
                    if ((temp163 == 1)) {
                        this.Manager.Comment("reaching state \'S1111\'");
                        bool temp153;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp153);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp153);
                        this.Manager.Comment("reaching state \'S1405\'");
                        int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp162 == 0)) {
                            this.Manager.Comment("reaching state \'S1694\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp154;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp154 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2018\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp154, "return of CreateFile, state S2018");
                            this.Manager.Comment("reaching state \'S2238\'");
                            bool temp155;
                            bool temp156;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp157;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp157 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp155, out temp156);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2458\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp155, "isBytesReturnedSet of FsCtlForEasyRequest, state S2458");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp156, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2458");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp157, "return of FsCtlForEasyRequest, state S2458");
                            this.Manager.Comment("reaching state \'S2618\'");
                            goto label23;
                        }
                        if ((temp162 == 1)) {
                            this.Manager.Comment("reaching state \'S1695\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp158;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp158 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2019\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp158, "return of CreateFile, state S2019");
                            this.Manager.Comment("reaching state \'S2239\'");
                            bool temp159;
                            bool temp160;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp161;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp161 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp159, out temp160);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2459\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp159, "isBytesReturnedSet of FsCtlForEasyRequest, state S2459");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp160, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2459");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp161, "return of FsCtlForEasyRequest, state S2459");
                            this.Manager.Comment("reaching state \'S2619\'");
                            goto label23;
                        }
                        throw new InvalidOperationException("never reached");
                    label23:
;
                        goto label24;
                    }
                    throw new InvalidOperationException("never reached");
                label24:
;
                    goto label28;
                }
                if ((temp186 == 1)) {
                    this.Manager.Comment("reaching state \'S621\'");
                    bool temp164;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp164);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp164);
                    this.Manager.Comment("reaching state \'S855\'");
                    int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker7)));
                    if ((temp185 == 0)) {
                        this.Manager.Comment("reaching state \'S1112\'");
                        bool temp165;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp165);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp165);
                        this.Manager.Comment("reaching state \'S1406\'");
                        int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp174 == 0)) {
                            this.Manager.Comment("reaching state \'S1696\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp166;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp166 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2020\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp166, "return of CreateFile, state S2020");
                            this.Manager.Comment("reaching state \'S2240\'");
                            bool temp167;
                            bool temp168;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp169;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp169 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp167, out temp168);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2460\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp167, "isBytesReturnedSet of FsCtlForEasyRequest, state S2460");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp168, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2460");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp169, "return of FsCtlForEasyRequest, state S2460");
                            this.Manager.Comment("reaching state \'S2620\'");
                            goto label25;
                        }
                        if ((temp174 == 1)) {
                            this.Manager.Comment("reaching state \'S1697\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp170;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp170 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2021\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp170, "return of CreateFile, state S2021");
                            this.Manager.Comment("reaching state \'S2241\'");
                            bool temp171;
                            bool temp172;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp173;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp173 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp171, out temp172);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2461\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp171, "isBytesReturnedSet of FsCtlForEasyRequest, state S2461");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp172, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2461");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp173, "return of FsCtlForEasyRequest, state S2461");
                            this.Manager.Comment("reaching state \'S2621\'");
                            goto label25;
                        }
                        throw new InvalidOperationException("never reached");
                    label25:
;
                        goto label27;
                    }
                    if ((temp185 == 1)) {
                        this.Manager.Comment("reaching state \'S1113\'");
                        bool temp175;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp175);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp175);
                        this.Manager.Comment("reaching state \'S1407\'");
                        int temp184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp184 == 0)) {
                            this.Manager.Comment("reaching state \'S1698\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp176;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp176 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2022\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp176, "return of CreateFile, state S2022");
                            this.Manager.Comment("reaching state \'S2242\'");
                            bool temp177;
                            bool temp178;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp179;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp179 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp177, out temp178);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2462\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp177, "isBytesReturnedSet of FsCtlForEasyRequest, state S2462");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp178, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2462");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp179, "return of FsCtlForEasyRequest, state S2462");
                            this.Manager.Comment("reaching state \'S2622\'");
                            goto label26;
                        }
                        if ((temp184 == 1)) {
                            this.Manager.Comment("reaching state \'S1699\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp180;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp180 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2023\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp180, "return of CreateFile, state S2023");
                            this.Manager.Comment("reaching state \'S2243\'");
                            bool temp181;
                            bool temp182;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp183;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp183 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp181, out temp182);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2463\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp181, "isBytesReturnedSet of FsCtlForEasyRequest, state S2463");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp182, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2463");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp183, "return of FsCtlForEasyRequest, state S2463");
                            this.Manager.Comment("reaching state \'S2623\'");
                            goto label26;
                        }
                        throw new InvalidOperationException("never reached");
                    label26:
;
                        goto label27;
                    }
                    throw new InvalidOperationException("never reached");
                label27:
;
                    goto label28;
                }
                throw new InvalidOperationException("never reached");
            label28:
;
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS10GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S223");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S456");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S852");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1400");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1400");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S852");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1401");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1401");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S456");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S853");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1402");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1402");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S853");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1403");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1403");
        }
        
        private void IoCtlRequestTestCaseS10GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S223");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S457");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S854");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1404");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1404");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S854");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1405");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1405");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S457");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S855");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1406");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1406");
        }
        
        private void IoCtlRequestTestCaseS10GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S855");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1407");
        }
        
        private void IoCtlRequestTestCaseS10GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1407");
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS100() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS100");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S197\'");
            bool temp188;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp188);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp188);
            this.Manager.Comment("reaching state \'S273\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS100GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS100GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp201 == 0)) {
                this.Manager.Comment("reaching state \'S404\'");
                bool temp189;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp189);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp189);
                this.Manager.Comment("reaching state \'S556\'");
                int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS100GetRestoreAccessChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS100GetRestoreAccessChecker1)));
                if ((temp194 == 0)) {
                    this.Manager.Comment("reaching state \'S748\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp190;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp190 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S982\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp190, "return of CreateFile, state S982");
                    this.Manager.Comment("reaching state \'S1256\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp191;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,NotEqualFILE_OBJECTID_BUFFER)\'");
                    temp191 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R4326");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID] If the object store does not implement this functionali" +
                            "ty, \r\n                                the operation MUST be failed with STATUS_I" +
                            "NVALID_DEVICE_REQUEST.<42>");
                    this.Manager.Comment("reaching state \'S1500\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp191, "return of FsCtlSetObjID, state S1500");
                    this.Manager.Comment("reaching state \'S1824\'");
                    goto label30;
                }
                if ((temp194 == 1)) {
                    this.Manager.Comment("reaching state \'S749\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp192;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp192 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S983\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp192, "return of CreateFile, state S983");
                    this.Manager.Comment("reaching state \'S1257\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp193;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,NotEqualFILE_OBJECTID_BUFFER)\'");
                    temp193 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R4326");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID] If the object store does not implement this functionali" +
                            "ty, \r\n                                the operation MUST be failed with STATUS_I" +
                            "NVALID_DEVICE_REQUEST.<42>");
                    this.Manager.Comment("reaching state \'S1501\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp193, "return of FsCtlSetObjID, state S1501");
                    this.Manager.Comment("reaching state \'S1825\'");
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label32;
            }
            if ((temp201 == 1)) {
                this.Manager.Comment("reaching state \'S405\'");
                bool temp195;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp195);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp195);
                this.Manager.Comment("reaching state \'S557\'");
                int temp200 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS100GetRestoreAccessChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS100GetRestoreAccessChecker3)));
                if ((temp200 == 0)) {
                    this.Manager.Comment("reaching state \'S750\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp196;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp196 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S984\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp196, "return of CreateFile, state S984");
                    this.Manager.Comment("reaching state \'S1258\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp197;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,NotEqualFILE_OBJECTID_BUFFER)\'");
                    temp197 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R1188");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID]Pseudocode for the operation is as follows:\r\n           " +
                            "                     If InputBufferSize is not equal to sizeof( FILE_OBJECTID_BU" +
                            "FFER ), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S1502\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp197, "return of FsCtlSetObjID, state S1502");
                    this.Manager.Comment("reaching state \'S1826\'");
                    goto label31;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S751\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp198;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp198 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S985\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp198, "return of CreateFile, state S985");
                    this.Manager.Comment("reaching state \'S1259\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp199;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,NotEqualFILE_OBJECTID_BUFFER)\'");
                    temp199 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R1188");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID]Pseudocode for the operation is as follows:\r\n           " +
                            "                     If InputBufferSize is not equal to sizeof( FILE_OBJECTID_BU" +
                            "FFER ), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S1503\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp199, "return of FsCtlSetObjID, state S1503");
                    this.Manager.Comment("reaching state \'S1827\'");
                    goto label31;
                }
                throw new InvalidOperationException("never reached");
            label31:
;
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS100GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S273");
        }
        
        private void IoCtlRequestTestCaseS100GetRestoreAccessChecker(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S556");
        }
        
        private void IoCtlRequestTestCaseS100GetRestoreAccessChecker1(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S556");
        }
        
        private void IoCtlRequestTestCaseS100GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S273");
        }
        
        private void IoCtlRequestTestCaseS100GetRestoreAccessChecker2(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S557");
        }
        
        private void IoCtlRequestTestCaseS100GetRestoreAccessChecker3(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S557");
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS102() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS102");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S198\'");
            bool temp202;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp202);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp202);
            this.Manager.Comment("reaching state \'S274\'");
            int temp215 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS102GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS102GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp215 == 0)) {
                this.Manager.Comment("reaching state \'S406\'");
                bool temp203;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp203);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp203);
                this.Manager.Comment("reaching state \'S558\'");
                int temp208 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS102GetRestoreAccessChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS102GetRestoreAccessChecker1)));
                if ((temp208 == 0)) {
                    this.Manager.Comment("reaching state \'S752\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp204;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp204 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S986\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp204, "return of CreateFile, state S986");
                    this.Manager.Comment("reaching state \'S1260\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp205;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqualFILE_OBJECTID_B" +
                            "UFFER)\'");
                    temp205 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R4329");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED] If the object store does not implement this functionality," +
                            " \r\n                                the operation MUST be failed with" +
                            " STATUS_INVALID_DEVICE_REQUEST.<44>");
                    this.Manager.Comment("reaching state \'S1504\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp205, "return of FsCtlSetObjID, state S1504");
                    this.Manager.Comment("reaching state \'S1828\'");
                    goto label33;
                }
                if ((temp208 == 1)) {
                    this.Manager.Comment("reaching state \'S753\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp206;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp206 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S987\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp206, "return of CreateFile, state S987");
                    this.Manager.Comment("reaching state \'S1261\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp207;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqualFILE_OBJECTID_B" +
                            "UFFER)\'");
                    temp207 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R4329");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED] If the object store does not implement this functionality," +
                            " \r\n                                the operation MUST be failed with" +
                            " STATUS_INVALID_DEVICE_REQUEST.<44>");
                    this.Manager.Comment("reaching state \'S1505\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp207, "return of FsCtlSetObjID, state S1505");
                    this.Manager.Comment("reaching state \'S1829\'");
                    goto label33;
                }
                throw new InvalidOperationException("never reached");
            label33:
;
                goto label35;
            }
            if ((temp215 == 1)) {
                this.Manager.Comment("reaching state \'S407\'");
                bool temp209;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp209);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp209);
                this.Manager.Comment("reaching state \'S559\'");
                int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS102GetRestoreAccessChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS102GetRestoreAccessChecker3)));
                if ((temp214 == 0)) {
                    this.Manager.Comment("reaching state \'S754\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp210;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp210 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S988\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp210, "return of CreateFile, state S988");
                    this.Manager.Comment("reaching state \'S1262\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp211;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqualFILE_OBJECTID_B" +
                            "UFFER)\'");
                    temp211 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R1190");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID,Pseudocode for the operation is as follows:]\r\n          " +
                            "                      If Open.HasRestoreAccess is FALSE, the operation MUST be f" +
                            "ailed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S1506\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp211, "return of FsCtlSetObjID, state S1506");
                    this.Manager.Comment("reaching state \'S1830\'");
                    goto label34;
                }
                if ((temp214 == 1)) {
                    this.Manager.Comment("reaching state \'S755\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp212;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp212 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S989\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp212, "return of CreateFile, state S989");
                    this.Manager.Comment("reaching state \'S1263\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp213;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqualFILE_OBJECTID_B" +
                            "UFFER)\'");
                    temp213 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualFILE_OBJECTID_BUFFER);
                    this.Manager.Checkpoint("MS-FSA_R1217");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED]Upon successful completion of this operation, \r" +
                            "\n                            the object store MUST return:Status set to STATUS_S" +
                            "UCCESS.");
                    this.Manager.Checkpoint("MS-FSA_R1206");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED]On completion, the object store MUST return:\r\n " +
                            "                           Status ¨C An NTSTATUS code that specifies the result." +
                            "");
                    this.Manager.Comment("reaching state \'S1507\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp213, "return of FsCtlSetObjID, state S1507");
                    this.Manager.Comment("reaching state \'S1831\'");
                    goto label34;
                }
                throw new InvalidOperationException("never reached");
            label34:
;
                goto label35;
            }
            throw new InvalidOperationException("never reached");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS102GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S274");
        }
        
        private void IoCtlRequestTestCaseS102GetRestoreAccessChecker(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S558");
        }
        
        private void IoCtlRequestTestCaseS102GetRestoreAccessChecker1(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S558");
        }
        
        private void IoCtlRequestTestCaseS102GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S274");
        }
        
        private void IoCtlRequestTestCaseS102GetRestoreAccessChecker2(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S559");
        }
        
        private void IoCtlRequestTestCaseS102GetRestoreAccessChecker3(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S559");
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS104() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS104");
            this.Manager.Comment("reaching state \'S104\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S199\'");
            bool temp216;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp216);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp216);
            this.Manager.Comment("reaching state \'S275\'");
            int temp229 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS104GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS104GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp229 == 0)) {
                this.Manager.Comment("reaching state \'S408\'");
                bool temp217;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp217);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp217);
                this.Manager.Comment("reaching state \'S560\'");
                int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS104GetRestoreAccessChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS104GetRestoreAccessChecker1)));
                if ((temp222 == 0)) {
                    this.Manager.Comment("reaching state \'S756\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp218;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp218 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S990\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp218, "return of CreateFile, state S990");
                    this.Manager.Comment("reaching state \'S1264\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp219;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqual48Bytes)\'");
                    temp219 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqual48Bytes);
                    this.Manager.Checkpoint("MS-FSA_R4329");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED] If the object store does not implement this functionality," +
                            " \r\n                                the operation MUST be failed with" +
                            " STATUS_INVALID_DEVICE_REQUEST.<44>");
                    this.Manager.Comment("reaching state \'S1508\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp219, "return of FsCtlSetObjID, state S1508");
                    this.Manager.Comment("reaching state \'S1832\'");
                    goto label36;
                }
                if ((temp222 == 1)) {
                    this.Manager.Comment("reaching state \'S757\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp220;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp220 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S991\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp220, "return of CreateFile, state S991");
                    this.Manager.Comment("reaching state \'S1265\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp221;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqual48Bytes)\'");
                    temp221 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqual48Bytes);
                    this.Manager.Checkpoint("MS-FSA_R4329");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID_EXTENDED] If the object store does not implement this functionality," +
                            " \r\n                                the operation MUST be failed with" +
                            " STATUS_INVALID_DEVICE_REQUEST.<44>");
                    this.Manager.Comment("reaching state \'S1509\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp221, "return of FsCtlSetObjID, state S1509");
                    this.Manager.Comment("reaching state \'S1833\'");
                    goto label36;
                }
                throw new InvalidOperationException("never reached");
            label36:
;
                goto label38;
            }
            if ((temp229 == 1)) {
                this.Manager.Comment("reaching state \'S409\'");
                bool temp223;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp223);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp223);
                this.Manager.Comment("reaching state \'S561\'");
                int temp228 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS104GetRestoreAccessChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS104GetRestoreAccessChecker3)));
                if ((temp228 == 0)) {
                    this.Manager.Comment("reaching state \'S758\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp224;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp224 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S992\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp224, "return of CreateFile, state S992");
                    this.Manager.Comment("reaching state \'S1266\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp225;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqual48Bytes)\'");
                    temp225 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqual48Bytes);
                    this.Manager.Checkpoint("MS-FSA_R1207");
                    this.Manager.Checkpoint(@"[ In FSCTL_SET_OBJECT_ID_EXTENDED]Pseudocode for the operation is as follows:
                                If InputBufferSize is not equal to sizeof( ObjectId.ExtendedInfo ) (48 bytes), 
                                the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S1510\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp225, "return of FsCtlSetObjID, state S1510");
                    this.Manager.Comment("reaching state \'S1834\'");
                    goto label37;
                }
                if ((temp228 == 1)) {
                    this.Manager.Comment("reaching state \'S759\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp226;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp226 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S993\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp226, "return of CreateFile, state S993");
                    this.Manager.Comment("reaching state \'S1267\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp227;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID_EXTENDED,NotEqual48Bytes)\'");
                    temp227 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID_EXTENDED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqual48Bytes);
                    this.Manager.Checkpoint("MS-FSA_R1207");
                    this.Manager.Checkpoint(@"[ In FSCTL_SET_OBJECT_ID_EXTENDED]Pseudocode for the operation is as follows:
                                If InputBufferSize is not equal to sizeof( ObjectId.ExtendedInfo ) (48 bytes), 
                                the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S1511\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp227, "return of FsCtlSetObjID, state S1511");
                    this.Manager.Comment("reaching state \'S1835\'");
                    goto label37;
                }
                throw new InvalidOperationException("never reached");
            label37:
;
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS104GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S275");
        }
        
        private void IoCtlRequestTestCaseS104GetRestoreAccessChecker(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S560");
        }
        
        private void IoCtlRequestTestCaseS104GetRestoreAccessChecker1(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S560");
        }
        
        private void IoCtlRequestTestCaseS104GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S275");
        }
        
        private void IoCtlRequestTestCaseS104GetRestoreAccessChecker2(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S561");
        }
        
        private void IoCtlRequestTestCaseS104GetRestoreAccessChecker3(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S561");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS106() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS106");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S200\'");
            bool temp230;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp230);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp230);
            this.Manager.Comment("reaching state \'S276\'");
            int temp243 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS106GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS106GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp243 == 0)) {
                this.Manager.Comment("reaching state \'S410\'");
                bool temp231;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp231);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp231);
                this.Manager.Comment("reaching state \'S562\'");
                int temp236 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS106GetRestoreAccessChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS106GetRestoreAccessChecker1)));
                if ((temp236 == 0)) {
                    this.Manager.Comment("reaching state \'S760\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp232;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp232 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S994\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp232, "return of CreateFile, state S994");
                    this.Manager.Comment("reaching state \'S1268\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp233;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,BufferSizeSuccess)\'");
                    temp233 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                    this.Manager.Checkpoint("MS-FSA_R4326");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID] If the object store does not implement this functionali" +
                            "ty, \r\n                                the operation MUST be failed with STATUS_I" +
                            "NVALID_DEVICE_REQUEST.<42>");
                    this.Manager.Comment("reaching state \'S1512\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp233, "return of FsCtlSetObjID, state S1512");
                    this.Manager.Comment("reaching state \'S1836\'");
                    goto label39;
                }
                if ((temp236 == 1)) {
                    this.Manager.Comment("reaching state \'S761\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp234;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp234 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S995\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp234, "return of CreateFile, state S995");
                    this.Manager.Comment("reaching state \'S1269\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp235;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,BufferSizeSuccess)\'");
                    temp235 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                    this.Manager.Checkpoint("MS-FSA_R4326");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID] If the object store does not implement this functionali" +
                            "ty, \r\n                                the operation MUST be failed with STATUS_I" +
                            "NVALID_DEVICE_REQUEST.<42>");
                    this.Manager.Comment("reaching state \'S1513\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp235, "return of FsCtlSetObjID, state S1513");
                    this.Manager.Comment("reaching state \'S1837\'");
                    goto label39;
                }
                throw new InvalidOperationException("never reached");
            label39:
;
                goto label41;
            }
            if ((temp243 == 1)) {
                this.Manager.Comment("reaching state \'S411\'");
                bool temp237;
                this.Manager.Comment("executing step \'call GetRestoreAccess(out _)\'");
                this.IFSAAdapterInstance.GetRestoreAccess(out temp237);
                this.Manager.AddReturn(GetRestoreAccessInfo, null, temp237);
                this.Manager.Comment("reaching state \'S563\'");
                int temp242 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS106GetRestoreAccessChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetRestoreAccessInfo, null, new GetRestoreAccessDelegate1(this.IoCtlRequestTestCaseS106GetRestoreAccessChecker3)));
                if ((temp242 == 0)) {
                    this.Manager.Comment("reaching state \'S762\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp238;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp238 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S996\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp238, "return of CreateFile, state S996");
                    this.Manager.Comment("reaching state \'S1270\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp239;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,BufferSizeSuccess)\'");
                    temp239 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                    this.Manager.Checkpoint("MS-FSA_R1190");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID,Pseudocode for the operation is as follows:]\r\n          " +
                            "                      If Open.HasRestoreAccess is FALSE, the operation MUST be f" +
                            "ailed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S1514\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp239, "return of FsCtlSetObjID, state S1514");
                    this.Manager.Comment("reaching state \'S1838\'");
                    goto label40;
                }
                if ((temp242 == 1)) {
                    this.Manager.Comment("reaching state \'S763\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp240;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp240 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S997\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp240, "return of CreateFile, state S997");
                    this.Manager.Comment("reaching state \'S1271\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp241;
                    this.Manager.Comment("executing step \'call FsCtlSetObjID(SET_OBJECT_ID,BufferSizeSuccess)\'");
                    temp241 = this.IFSAAdapterInstance.FsCtlSetObjID(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.SET_OBJECT_ID, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                    this.Manager.Checkpoint("MS-FSA_R1200");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID]Upon successful completion of the operation, \r\n         " +
                            "                   the object store MUST return:Status set to STATUS_SUCCESS.");
                    this.Manager.Checkpoint("MS-FSA_R1187");
                    this.Manager.Checkpoint("[ In FSCTL_SET_OBJECT_ID]On completion, the object store MUST return:\r\n          " +
                            "                  Status ¨C An NTSTATUS code that specifies the result.");
                    this.Manager.Comment("reaching state \'S1515\'");
                    this.Manager.Comment("checking step \'return FsCtlSetObjID/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp241, "return of FsCtlSetObjID, state S1515");
                    this.Manager.Comment("reaching state \'S1839\'");
                    goto label40;
                }
                throw new InvalidOperationException("never reached");
            label40:
;
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS106GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S276");
        }
        
        private void IoCtlRequestTestCaseS106GetRestoreAccessChecker(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S562");
        }
        
        private void IoCtlRequestTestCaseS106GetRestoreAccessChecker1(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S562");
        }
        
        private void IoCtlRequestTestCaseS106GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S276");
        }
        
        private void IoCtlRequestTestCaseS106GetRestoreAccessChecker2(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isHas, "isHas of GetRestoreAccess, state S563");
        }
        
        private void IoCtlRequestTestCaseS106GetRestoreAccessChecker3(bool isHas) {
            this.Manager.Comment("checking step \'return GetRestoreAccess/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isHas, "isHas of GetRestoreAccess, state S563");
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS108() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS108");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S201\'");
            bool temp244;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp244);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp244);
            this.Manager.Comment("reaching state \'S277\'");
            int temp257 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS108GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS108GetReparsePointsSupportedChecker1)));
            if ((temp257 == 0)) {
                this.Manager.Comment("reaching state \'S412\'");
                bool temp245;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp245);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp245);
                this.Manager.Comment("reaching state \'S564\'");
                int temp250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS108GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS108GetObjectFunctionalityChecker1)));
                if ((temp250 == 0)) {
                    this.Manager.Comment("reaching state \'S764\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp246;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp246 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S998\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp246, "return of CreateFile, state S998");
                    this.Manager.Comment("reaching state \'S1272\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp247;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp247 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1516\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp247, "return of FsCtlSetReparsePoint, state S1516");
                    this.Manager.Comment("reaching state \'S1840\'");
                    goto label42;
                }
                if ((temp250 == 1)) {
                    this.Manager.Comment("reaching state \'S765\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp248;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp248 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S999\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp248, "return of CreateFile, state S999");
                    this.Manager.Comment("reaching state \'S1273\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp249;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp249 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4332");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:] \r\n     " +
                            "               If Open.File.Volume.IsReparsePointsSupported is FALSE, the operat" +
                            "ion MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1517\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp249, "return of FsCtlSetReparsePoint, state S1517");
                    this.Manager.Comment("reaching state \'S1841\'");
                    goto label42;
                }
                throw new InvalidOperationException("never reached");
            label42:
;
                goto label44;
            }
            if ((temp257 == 1)) {
                this.Manager.Comment("reaching state \'S413\'");
                bool temp251;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp251);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp251);
                this.Manager.Comment("reaching state \'S565\'");
                int temp256 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS108GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS108GetObjectFunctionalityChecker3)));
                if ((temp256 == 0)) {
                    this.Manager.Comment("reaching state \'S766\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp252;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp252 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1000\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp252, "return of CreateFile, state S1000");
                    this.Manager.Comment("reaching state \'S1274\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp253;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp253 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1518\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp253, "return of FsCtlSetReparsePoint, state S1518");
                    this.Manager.Comment("reaching state \'S1842\'");
                    goto label43;
                }
                if ((temp256 == 1)) {
                    this.Manager.Comment("reaching state \'S767\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp254;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp254 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1001\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp254, "return of CreateFile, state S1001");
                    this.Manager.Comment("reaching state \'S1275\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp255;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,True,False)\'" +
                            "");
                    temp255 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, true, false);
                    this.Manager.Checkpoint("MS-FSA_R1226");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:]\r\n      " +
                            "              If InputBufferSize is smaller than 8 bytes, the operation MUST be " +
                            "failed with STATUS_IO_REPARSE_DATA_INVALID.");
                    this.Manager.Comment("reaching state \'S1519\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/IO_REPARSE_DATA_INVALID\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_DATA_INVALID, temp255, "return of FsCtlSetReparsePoint, state S1519");
                    this.Manager.Comment("reaching state \'S1843\'");
                    goto label43;
                }
                throw new InvalidOperationException("never reached");
            label43:
;
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS108GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S277");
        }
        
        private void IoCtlRequestTestCaseS108GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S564");
        }
        
        private void IoCtlRequestTestCaseS108GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S564");
        }
        
        private void IoCtlRequestTestCaseS108GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S277");
        }
        
        private void IoCtlRequestTestCaseS108GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S565");
        }
        
        private void IoCtlRequestTestCaseS108GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S565");
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS110() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS110");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S202\'");
            bool temp258;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp258);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp258);
            this.Manager.Comment("reaching state \'S278\'");
            int temp271 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS110GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS110GetReparsePointsSupportedChecker1)));
            if ((temp271 == 0)) {
                this.Manager.Comment("reaching state \'S414\'");
                bool temp259;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp259);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp259);
                this.Manager.Comment("reaching state \'S566\'");
                int temp264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS110GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS110GetObjectFunctionalityChecker1)));
                if ((temp264 == 0)) {
                    this.Manager.Comment("reaching state \'S768\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp260;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp260 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1002\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp260, "return of CreateFile, state S1002");
                    this.Manager.Comment("reaching state \'S1276\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp261;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(SYMLINK,BufferSizeSuccess,True,False)\'");
                    temp261 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.SYMLINK, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1520\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp261, "return of FsCtlSetReparsePoint, state S1520");
                    this.Manager.Comment("reaching state \'S1844\'");
                    goto label45;
                }
                if ((temp264 == 1)) {
                    this.Manager.Comment("reaching state \'S769\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp262;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp262 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1003\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp262, "return of CreateFile, state S1003");
                    this.Manager.Comment("reaching state \'S1277\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp263;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(SYMLINK,BufferSizeSuccess,True,False)\'");
                    temp263 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.SYMLINK, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, false);
                    this.Manager.Checkpoint("MS-FSA_R4332");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:] \r\n     " +
                            "               If Open.File.Volume.IsReparsePointsSupported is FALSE, the operat" +
                            "ion MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1521\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp263, "return of FsCtlSetReparsePoint, state S1521");
                    this.Manager.Comment("reaching state \'S1845\'");
                    goto label45;
                }
                throw new InvalidOperationException("never reached");
            label45:
;
                goto label47;
            }
            if ((temp271 == 1)) {
                this.Manager.Comment("reaching state \'S415\'");
                bool temp265;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp265);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp265);
                this.Manager.Comment("reaching state \'S567\'");
                int temp270 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS110GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS110GetObjectFunctionalityChecker3)));
                if ((temp270 == 0)) {
                    this.Manager.Comment("reaching state \'S770\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp266;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp266 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1004\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp266, "return of CreateFile, state S1004");
                    this.Manager.Comment("reaching state \'S1278\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp267;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp267 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1522\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp267, "return of FsCtlSetReparsePoint, state S1522");
                    this.Manager.Comment("reaching state \'S1846\'");
                    goto label46;
                }
                if ((temp270 == 1)) {
                    this.Manager.Comment("reaching state \'S771\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp268;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp268 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1005\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp268, "return of CreateFile, state S1005");
                    this.Manager.Comment("reaching state \'S1279\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp269;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(EMPTY,NotEqualReparseDataLengthPlus24,T" +
                            "rue,True)\'");
                    temp269 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, true, true);
                    this.Manager.Checkpoint("MS-FSA_R1222");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT]On completion, the object store MUST return:Status:\r" +
                            "\n                 An NTSTATUS code that specifies the result.");
                    this.Manager.Checkpoint("MS-FSA_R1246");
                    this.Manager.Checkpoint("[In FSCTL_SET_SHORT_NAME_BEHAVIOR]the object store MUST return STATUS_INVALID_DEV" +
                            "ICE_REQUEST.");
                    this.Manager.Comment("reaching state \'S1523\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp269, "return of FsCtlSetReparsePoint, state S1523");
                    this.Manager.Comment("reaching state \'S1847\'");
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS110GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S278");
        }
        
        private void IoCtlRequestTestCaseS110GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S566");
        }
        
        private void IoCtlRequestTestCaseS110GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S566");
        }
        
        private void IoCtlRequestTestCaseS110GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S278");
        }
        
        private void IoCtlRequestTestCaseS110GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S567");
        }
        
        private void IoCtlRequestTestCaseS110GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S567");
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS112() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS112");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S203\'");
            bool temp272;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp272);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp272);
            this.Manager.Comment("reaching state \'S279\'");
            int temp285 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS112GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS112GetReparsePointsSupportedChecker1)));
            if ((temp285 == 0)) {
                this.Manager.Comment("reaching state \'S416\'");
                bool temp273;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp273);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp273);
                this.Manager.Comment("reaching state \'S568\'");
                int temp278 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS112GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS112GetObjectFunctionalityChecker1)));
                if ((temp278 == 0)) {
                    this.Manager.Comment("reaching state \'S772\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp274;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp274 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1006\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp274, "return of CreateFile, state S1006");
                    this.Manager.Comment("reaching state \'S1280\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp275;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,LessThan8B" +
                            "ytes,True,True)\'");
                    temp275 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, true, true);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1524\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp275, "return of FsCtlSetReparsePoint, state S1524");
                    this.Manager.Comment("reaching state \'S1848\'");
                    goto label48;
                }
                if ((temp278 == 1)) {
                    this.Manager.Comment("reaching state \'S773\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp276;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp276 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1007\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp276, "return of CreateFile, state S1007");
                    this.Manager.Comment("reaching state \'S1281\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp277;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,LessThan8B" +
                            "ytes,True,True)\'");
                    temp277 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, true, true);
                    this.Manager.Checkpoint("MS-FSA_R4332");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:] \r\n     " +
                            "               If Open.File.Volume.IsReparsePointsSupported is FALSE, the operat" +
                            "ion MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1525\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp277, "return of FsCtlSetReparsePoint, state S1525");
                    this.Manager.Comment("reaching state \'S1849\'");
                    goto label48;
                }
                throw new InvalidOperationException("never reached");
            label48:
;
                goto label50;
            }
            if ((temp285 == 1)) {
                this.Manager.Comment("reaching state \'S417\'");
                bool temp279;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp279);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp279);
                this.Manager.Comment("reaching state \'S569\'");
                int temp284 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS112GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS112GetObjectFunctionalityChecker3)));
                if ((temp284 == 0)) {
                    this.Manager.Comment("reaching state \'S774\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp280;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp280 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1008\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp280, "return of CreateFile, state S1008");
                    this.Manager.Comment("reaching state \'S1282\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp281;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp281 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1526\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp281, "return of FsCtlSetReparsePoint, state S1526");
                    this.Manager.Comment("reaching state \'S1850\'");
                    goto label49;
                }
                if ((temp284 == 1)) {
                    this.Manager.Comment("reaching state \'S775\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp282;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp282 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1009\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp282, "return of CreateFile, state S1009");
                    this.Manager.Comment("reaching state \'S1283\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp283;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(SYMLINK,BufferSizeSuccess,True,False)\'");
                    temp283 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.SYMLINK, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, false);
                    this.Manager.Checkpoint("MS-FSA_R1231");
                    this.Manager.Checkpoint(@"[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:]
                    If InputBuffer.ReparseTag == IO_REPARSE_TAG_SYMLINK and Open.HasCreateSymbolicLinkAccess is FALSE, 
                    the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S1527\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp283, "return of FsCtlSetReparsePoint, state S1527");
                    this.Manager.Comment("reaching state \'S1851\'");
                    goto label49;
                }
                throw new InvalidOperationException("never reached");
            label49:
;
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS112GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S279");
        }
        
        private void IoCtlRequestTestCaseS112GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S568");
        }
        
        private void IoCtlRequestTestCaseS112GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S568");
        }
        
        private void IoCtlRequestTestCaseS112GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S279");
        }
        
        private void IoCtlRequestTestCaseS112GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S569");
        }
        
        private void IoCtlRequestTestCaseS112GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S569");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS114() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS114");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S204\'");
            bool temp286;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp286);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp286);
            this.Manager.Comment("reaching state \'S280\'");
            int temp299 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS114GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS114GetReparsePointsSupportedChecker1)));
            if ((temp299 == 0)) {
                this.Manager.Comment("reaching state \'S418\'");
                bool temp287;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp287);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp287);
                this.Manager.Comment("reaching state \'S570\'");
                int temp292 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS114GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS114GetObjectFunctionalityChecker1)));
                if ((temp292 == 0)) {
                    this.Manager.Comment("reaching state \'S776\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp288;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp288 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1010\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp288, "return of CreateFile, state S1010");
                    this.Manager.Comment("reaching state \'S1284\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp289;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,NotEqualRe" +
                            "parseDataLengthPlus24,False,False)\'");
                    temp289 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1528\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp289, "return of FsCtlSetReparsePoint, state S1528");
                    this.Manager.Comment("reaching state \'S1852\'");
                    goto label51;
                }
                if ((temp292 == 1)) {
                    this.Manager.Comment("reaching state \'S777\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp290;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp290 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1011\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp290, "return of CreateFile, state S1011");
                    this.Manager.Comment("reaching state \'S1285\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp291;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,NotEqualRe" +
                            "parseDataLengthPlus24,False,False)\'");
                    temp291 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4332");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:] \r\n     " +
                            "               If Open.File.Volume.IsReparsePointsSupported is FALSE, the operat" +
                            "ion MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1529\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp291, "return of FsCtlSetReparsePoint, state S1529");
                    this.Manager.Comment("reaching state \'S1853\'");
                    goto label51;
                }
                throw new InvalidOperationException("never reached");
            label51:
;
                goto label53;
            }
            if ((temp299 == 1)) {
                this.Manager.Comment("reaching state \'S419\'");
                bool temp293;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp293);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp293);
                this.Manager.Comment("reaching state \'S571\'");
                int temp298 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS114GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS114GetObjectFunctionalityChecker3)));
                if ((temp298 == 0)) {
                    this.Manager.Comment("reaching state \'S778\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp294;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp294 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1012\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp294, "return of CreateFile, state S1012");
                    this.Manager.Comment("reaching state \'S1286\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp295;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp295 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1530\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp295, "return of FsCtlSetReparsePoint, state S1530");
                    this.Manager.Comment("reaching state \'S1854\'");
                    goto label52;
                }
                if ((temp298 == 1)) {
                    this.Manager.Comment("reaching state \'S779\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp296;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp296 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1013\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp296, "return of CreateFile, state S1013");
                    this.Manager.Comment("reaching state \'S1287\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp297;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,BufferSizeSuccess,False,Tru" +
                            "e)\'");
                    temp297 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, true);
                    this.Manager.Checkpoint("MS-FSA_R1237");
                    this.Manager.Checkpoint(@"[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:
                        Phase 2 -- Update the File]If Open.File.ReparseTag is not empty (indicating that a reparse point is already assigned):
                        If Open.File.ReparseTag != InputBuffer.ReparseTag, the operation MUST be failed with STATUS_IO_REPARSE_TAG_MISMATCH.");
                    this.Manager.Comment("reaching state \'S1531\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/IO_REPARSE_TAG_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_TAG_MISMATCH, temp297, "return of FsCtlSetReparsePoint, state S1531");
                    this.Manager.Comment("reaching state \'S1855\'");
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS114GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S280");
        }
        
        private void IoCtlRequestTestCaseS114GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S570");
        }
        
        private void IoCtlRequestTestCaseS114GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S570");
        }
        
        private void IoCtlRequestTestCaseS114GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S280");
        }
        
        private void IoCtlRequestTestCaseS114GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S571");
        }
        
        private void IoCtlRequestTestCaseS114GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S571");
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS116() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS116");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S205\'");
            bool temp300;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp300);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp300);
            this.Manager.Comment("reaching state \'S281\'");
            int temp313 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS116GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS116GetReparsePointsSupportedChecker1)));
            if ((temp313 == 0)) {
                this.Manager.Comment("reaching state \'S420\'");
                bool temp301;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp301);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp301);
                this.Manager.Comment("reaching state \'S572\'");
                int temp306 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS116GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS116GetObjectFunctionalityChecker1)));
                if ((temp306 == 0)) {
                    this.Manager.Comment("reaching state \'S780\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp302;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp302 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1014\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp302, "return of CreateFile, state S1014");
                    this.Manager.Comment("reaching state \'S1288\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp303;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(NON_MICROSOFT_RANGE_TAG,NotEqualReparse" +
                            "DataLengthPlus24,False,False)\'");
                    temp303 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1532\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp303, "return of FsCtlSetReparsePoint, state S1532");
                    this.Manager.Comment("reaching state \'S1856\'");
                    goto label54;
                }
                if ((temp306 == 1)) {
                    this.Manager.Comment("reaching state \'S781\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp304;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp304 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1015\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp304, "return of CreateFile, state S1015");
                    this.Manager.Comment("reaching state \'S1289\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp305;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(NON_MICROSOFT_RANGE_TAG,NotEqualReparse" +
                            "DataLengthPlus24,False,False)\'");
                    temp305 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4332");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:] \r\n     " +
                            "               If Open.File.Volume.IsReparsePointsSupported is FALSE, the operat" +
                            "ion MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1533\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp305, "return of FsCtlSetReparsePoint, state S1533");
                    this.Manager.Comment("reaching state \'S1857\'");
                    goto label54;
                }
                throw new InvalidOperationException("never reached");
            label54:
;
                goto label56;
            }
            if ((temp313 == 1)) {
                this.Manager.Comment("reaching state \'S421\'");
                bool temp307;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp307);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp307);
                this.Manager.Comment("reaching state \'S573\'");
                int temp312 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS116GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS116GetObjectFunctionalityChecker3)));
                if ((temp312 == 0)) {
                    this.Manager.Comment("reaching state \'S782\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp308;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp308 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1016\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp308, "return of CreateFile, state S1016");
                    this.Manager.Comment("reaching state \'S1290\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp309;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(MOUNT_POINT,LessThan8Bytes,False,False)" +
                            "\'");
                    temp309 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.MOUNT_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan8Bytes, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4331");
                    this.Manager.Checkpoint("[ In FSCTL_SET_REPARSE_POINT] If the object store does not implement this functio" +
                            "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                            "EVICE_REQUEST.<46>");
                    this.Manager.Comment("reaching state \'S1534\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp309, "return of FsCtlSetReparsePoint, state S1534");
                    this.Manager.Comment("reaching state \'S1858\'");
                    goto label55;
                }
                if ((temp312 == 1)) {
                    this.Manager.Comment("reaching state \'S783\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp310;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp310 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1017\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp310, "return of CreateFile, state S1017");
                    this.Manager.Comment("reaching state \'S1291\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp311;
                    this.Manager.Comment("executing step \'call FsCtlSetReparsePoint(NON_MICROSOFT_RANGE_TAG,NotEqualReparse" +
                            "DataLengthPlus24,False,False)\'");
                    temp311 = this.IFSAAdapterInstance.FsCtlSetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.NotEqualReparseDataLengthPlus24, false, false);
                    this.Manager.Checkpoint("MS-FSA_R1238");
                    this.Manager.Checkpoint(@"[ In FSCTL_SET_REPARSE_POINT,Pseudocode for the operation is as follows:
                        Phase 2 -- Update the File]If Open.File.ReparseTag is not empty (indicating that a reparse point is already assigned)
                        If Open.File.ReparseTag is a non-Microsoft tag and Open.File.ReparseGUID is not equal to InputBuffer.ReparseGUID, 
                        the operation MUST be failed with STATUS_REPARSE_ATTRIBUTE_CONFLICT.");
                    this.Manager.Comment("reaching state \'S1535\'");
                    this.Manager.Comment("checking step \'return FsCtlSetReparsePoint/REPARSE_ATTRIBUTE_CONFLICT\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.REPARSE_ATTRIBUTE_CONFLICT, temp311, "return of FsCtlSetReparsePoint, state S1535");
                    this.Manager.Comment("reaching state \'S1859\'");
                    goto label55;
                }
                throw new InvalidOperationException("never reached");
            label55:
;
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS116GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S281");
        }
        
        private void IoCtlRequestTestCaseS116GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S572");
        }
        
        private void IoCtlRequestTestCaseS116GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S572");
        }
        
        private void IoCtlRequestTestCaseS116GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S281");
        }
        
        private void IoCtlRequestTestCaseS116GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S573");
        }
        
        private void IoCtlRequestTestCaseS116GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S573");
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS118() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS118");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S206\'");
            bool temp314;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp314);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp314);
            this.Manager.Comment("reaching state \'S282\'");
            int temp343 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS118GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS118GetReparsePointsSupportedChecker1)));
            if ((temp343 == 0)) {
                this.Manager.Comment("reaching state \'S422\'");
                bool temp315;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp315);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp315);
                this.Manager.Comment("reaching state \'S574\'");
                int temp328 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS118GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS118GetObjectFunctionalityChecker1)));
                if ((temp328 == 0)) {
                    this.Manager.Comment("reaching state \'S784\'");
                    bool temp316;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp316);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp316);
                    this.Manager.Comment("reaching state \'S1018\'");
                    int temp321 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker1)));
                    if ((temp321 == 0)) {
                        this.Manager.Comment("reaching state \'S1292\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp317;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp317 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1536\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp317, "return of CreateFile, state S1536");
                        this.Manager.Comment("reaching state \'S1860\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp318;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BufferSu" +
                                "ccess,True,True)\'");
                        temp318 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2108\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp318, "return of FsCtlSetZeroData, state S2108");
                        this.Manager.Comment("reaching state \'S2328\'");
                        goto label57;
                    }
                    if ((temp321 == 1)) {
                        this.Manager.Comment("reaching state \'S1293\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp319;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp319 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1537\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp319, "return of CreateFile, state S1537");
                        this.Manager.Comment("reaching state \'S1861\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp320;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,False)\'");
                        temp320 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2109\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp320, "return of FsCtlSetZeroData, state S2109");
                        this.Manager.Comment("reaching state \'S2329\'");
                        goto label57;
                    }
                    throw new InvalidOperationException("never reached");
                label57:
;
                    goto label59;
                }
                if ((temp328 == 1)) {
                    this.Manager.Comment("reaching state \'S785\'");
                    bool temp322;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp322);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp322);
                    this.Manager.Comment("reaching state \'S1019\'");
                    int temp327 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker3)));
                    if ((temp327 == 0)) {
                        this.Manager.Comment("reaching state \'S1294\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp323;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp323 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1538\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp323, "return of CreateFile, state S1538");
                        this.Manager.Comment("reaching state \'S1862\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp324;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etGreatThanBeyondFinalZero,True,True)\'");
                        temp324 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, true);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2110\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp324, "return of FsCtlSetZeroData, state S2110");
                        this.Manager.Comment("reaching state \'S2330\'");
                        goto label58;
                    }
                    if ((temp327 == 1)) {
                        this.Manager.Comment("reaching state \'S1295\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp325;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp325 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1539\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp325, "return of CreateFile, state S1539");
                        this.Manager.Comment("reaching state \'S1863\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp326;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,True)\'" +
                                "");
                        temp326 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R1307");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]Pseudocode for the operation is as follows:\r\n            " +
                                "        If Open.File.Volume.IsReadOnly is TRUE, the operation MUST be failed wit" +
                                "h STATUS_MEDIA_WRITE_PROTECTED.");
                        this.Manager.Comment("reaching state \'S2111\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/MEDIA_WRITE_PROTECTED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp326, "return of FsCtlSetZeroData, state S2111");
                        this.Manager.Comment("reaching state \'S2331\'");
                        goto label58;
                    }
                    throw new InvalidOperationException("never reached");
                label58:
;
                    goto label59;
                }
                throw new InvalidOperationException("never reached");
            label59:
;
                goto label63;
            }
            if ((temp343 == 1)) {
                this.Manager.Comment("reaching state \'S423\'");
                bool temp329;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp329);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp329);
                this.Manager.Comment("reaching state \'S575\'");
                int temp342 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS118GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS118GetObjectFunctionalityChecker3)));
                if ((temp342 == 0)) {
                    this.Manager.Comment("reaching state \'S786\'");
                    bool temp330;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp330);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp330);
                    this.Manager.Comment("reaching state \'S1020\'");
                    int temp335 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker5)));
                    if ((temp335 == 0)) {
                        this.Manager.Comment("reaching state \'S1296\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp331;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp331 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1540\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp331, "return of CreateFile, state S1540");
                        this.Manager.Comment("reaching state \'S1864\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp332;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,True)\'" +
                                "");
                        temp332 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2112\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp332, "return of FsCtlSetZeroData, state S2112");
                        this.Manager.Comment("reaching state \'S2332\'");
                        goto label60;
                    }
                    if ((temp335 == 1)) {
                        this.Manager.Comment("reaching state \'S1297\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp333;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp333 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1541\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp333, "return of CreateFile, state S1541");
                        this.Manager.Comment("reaching state \'S1865\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp334;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,False)\'");
                        temp334 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2113\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp334, "return of FsCtlSetZeroData, state S2113");
                        this.Manager.Comment("reaching state \'S2333\'");
                        goto label60;
                    }
                    throw new InvalidOperationException("never reached");
                label60:
;
                    goto label62;
                }
                if ((temp342 == 1)) {
                    this.Manager.Comment("reaching state \'S787\'");
                    bool temp336;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp336);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp336);
                    this.Manager.Comment("reaching state \'S1021\'");
                    int temp341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker7)));
                    if ((temp341 == 0)) {
                        this.Manager.Comment("reaching state \'S1298\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp337;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp337 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1542\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp337, "return of CreateFile, state S1542");
                        this.Manager.Comment("reaching state \'S1866\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp338;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,False,False)\'");
                        temp338 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R1365");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:]\r\n           " +
                                "     Upon successful completion of the operation, the object store MUST return:S" +
                                "tatus set to STATUS_SUCCESS.");
                        this.Manager.Checkpoint("MS-FSA_R1569");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]On completion, the object store MUST return[Status].");
                        this.Manager.Comment("reaching state \'S2114\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp338, "return of FsCtlSetZeroData, state S2114");
                        this.Manager.Comment("reaching state \'S2334\'");
                        goto label61;
                    }
                    if ((temp341 == 1)) {
                        this.Manager.Comment("reaching state \'S1299\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp339;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp339 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1543\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp339, "return of CreateFile, state S1543");
                        this.Manager.Comment("reaching state \'S1867\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp340;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,True)\'" +
                                "");
                        temp340 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R1307");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]Pseudocode for the operation is as follows:\r\n            " +
                                "        If Open.File.Volume.IsReadOnly is TRUE, the operation MUST be failed wit" +
                                "h STATUS_MEDIA_WRITE_PROTECTED.");
                        this.Manager.Comment("reaching state \'S2115\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/MEDIA_WRITE_PROTECTED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp340, "return of FsCtlSetZeroData, state S2115");
                        this.Manager.Comment("reaching state \'S2335\'");
                        goto label61;
                    }
                    throw new InvalidOperationException("never reached");
                label61:
;
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS118GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S282");
        }
        
        private void IoCtlRequestTestCaseS118GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S574");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1018");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1018");
        }
        
        private void IoCtlRequestTestCaseS118GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S574");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1019");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1019");
        }
        
        private void IoCtlRequestTestCaseS118GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S282");
        }
        
        private void IoCtlRequestTestCaseS118GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S575");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1020");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1020");
        }
        
        private void IoCtlRequestTestCaseS118GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S575");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1021");
        }
        
        private void IoCtlRequestTestCaseS118GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1021");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS12() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S148\'");
            bool temp344;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp344);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp344);
            this.Manager.Comment("reaching state \'S224\'");
            int temp437 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS12GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS12GetIfNtfsFileSystemChecker1)));
            if ((temp437 == 0)) {
                this.Manager.Comment("reaching state \'S306\'");
                bool temp345;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp345);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp345);
                this.Manager.Comment("reaching state \'S458\'");
                int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS12GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS12GetObjectFunctionalityChecker1)));
                if ((temp390 == 0)) {
                    this.Manager.Comment("reaching state \'S622\'");
                    bool temp346;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp346);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp346);
                    this.Manager.Comment("reaching state \'S856\'");
                    int temp367 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker1)));
                    if ((temp367 == 0)) {
                        this.Manager.Comment("reaching state \'S1114\'");
                        bool temp347;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp347);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp347);
                        this.Manager.Comment("reaching state \'S1408\'");
                        int temp356 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp356 == 0)) {
                            this.Manager.Comment("reaching state \'S1700\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp348;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp348 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2024\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp348, "return of CreateFile, state S2024");
                            this.Manager.Comment("reaching state \'S2244\'");
                            bool temp349;
                            bool temp350;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp351;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp351 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp349, out temp350);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2464\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp349, "isBytesReturnedSet of FsCtlForEasyRequest, state S2464");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp350, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2464");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp351, "return of FsCtlForEasyRequest, state S2464");
                            this.Manager.Comment("reaching state \'S2624\'");
                            goto label64;
                        }
                        if ((temp356 == 1)) {
                            this.Manager.Comment("reaching state \'S1701\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp352;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp352 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2025\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp352, "return of CreateFile, state S2025");
                            this.Manager.Comment("reaching state \'S2245\'");
                            bool temp353;
                            bool temp354;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp355;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp355 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp353, out temp354);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2465\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp353, "isBytesReturnedSet of FsCtlForEasyRequest, state S2465");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp354, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2465");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp355, "return of FsCtlForEasyRequest, state S2465");
                            this.Manager.Comment("reaching state \'S2625\'");
                            goto label64;
                        }
                        throw new InvalidOperationException("never reached");
                    label64:
;
                        goto label66;
                    }
                    if ((temp367 == 1)) {
                        this.Manager.Comment("reaching state \'S1115\'");
                        bool temp357;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp357);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp357);
                        this.Manager.Comment("reaching state \'S1409\'");
                        int temp366 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp366 == 0)) {
                            this.Manager.Comment("reaching state \'S1702\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp358;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp358 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2026\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp358, "return of CreateFile, state S2026");
                            this.Manager.Comment("reaching state \'S2246\'");
                            bool temp359;
                            bool temp360;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp361;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp361 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp359, out temp360);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2466\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp359, "isBytesReturnedSet of FsCtlForEasyRequest, state S2466");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp360, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2466");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp361, "return of FsCtlForEasyRequest, state S2466");
                            this.Manager.Comment("reaching state \'S2626\'");
                            goto label65;
                        }
                        if ((temp366 == 1)) {
                            this.Manager.Comment("reaching state \'S1703\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp362;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp362 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2027\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp362, "return of CreateFile, state S2027");
                            this.Manager.Comment("reaching state \'S2247\'");
                            bool temp363;
                            bool temp364;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp365;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(RECALL_FILE,BufferSizeSuccess,out _,out " +
                                    "_)\'");
                            temp365 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.RECALL_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp363, out temp364);
                            this.Manager.Checkpoint("MS-FSA_R1132");
                            this.Manager.Checkpoint("[ In FSCTL_RECALL_FILE] If the object store does not implement this functionality" +
                                    ", \r\n                                the operation MUST be failed with STATUS_INV" +
                                    "ALID_DEVICE_REQUEST.<37>");
                            this.Manager.Comment("reaching state \'S2467\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp363, "isBytesReturnedSet of FsCtlForEasyRequest, state S2467");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp364, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2467");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp365, "return of FsCtlForEasyRequest, state S2467");
                            this.Manager.Comment("reaching state \'S2627\'");
                            goto label65;
                        }
                        throw new InvalidOperationException("never reached");
                    label65:
;
                        goto label66;
                    }
                    throw new InvalidOperationException("never reached");
                label66:
;
                    goto label70;
                }
                if ((temp390 == 1)) {
                    this.Manager.Comment("reaching state \'S623\'");
                    bool temp368;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp368);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp368);
                    this.Manager.Comment("reaching state \'S857\'");
                    int temp389 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker3)));
                    if ((temp389 == 0)) {
                        this.Manager.Comment("reaching state \'S1116\'");
                        bool temp369;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp369);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp369);
                        this.Manager.Comment("reaching state \'S1410\'");
                        int temp378 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp378 == 0)) {
                            this.Manager.Comment("reaching state \'S1704\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp370;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp370 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2028\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp370, "return of CreateFile, state S2028");
                            this.Manager.Comment("reaching state \'S2248\'");
                            bool temp371;
                            bool temp372;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp373;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp373 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp371, out temp372);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2468\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp371, "isBytesReturnedSet of FsCtlForEasyRequest, state S2468");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp372, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2468");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp373, "return of FsCtlForEasyRequest, state S2468");
                            this.Manager.Comment("reaching state \'S2628\'");
                            goto label67;
                        }
                        if ((temp378 == 1)) {
                            this.Manager.Comment("reaching state \'S1705\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp374;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp374 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2029\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp374, "return of CreateFile, state S2029");
                            this.Manager.Comment("reaching state \'S2249\'");
                            bool temp375;
                            bool temp376;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp377;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp377 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp375, out temp376);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2469\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp375, "isBytesReturnedSet of FsCtlForEasyRequest, state S2469");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp376, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2469");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp377, "return of FsCtlForEasyRequest, state S2469");
                            this.Manager.Comment("reaching state \'S2629\'");
                            goto label67;
                        }
                        throw new InvalidOperationException("never reached");
                    label67:
;
                        goto label69;
                    }
                    if ((temp389 == 1)) {
                        this.Manager.Comment("reaching state \'S1117\'");
                        bool temp379;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp379);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp379);
                        this.Manager.Comment("reaching state \'S1411\'");
                        int temp388 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp388 == 0)) {
                            this.Manager.Comment("reaching state \'S1706\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp380;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp380 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2030\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp380, "return of CreateFile, state S2030");
                            this.Manager.Comment("reaching state \'S2250\'");
                            bool temp381;
                            bool temp382;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp383;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp383 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp381, out temp382);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2470\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp381, "isBytesReturnedSet of FsCtlForEasyRequest, state S2470");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp382, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2470");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp383, "return of FsCtlForEasyRequest, state S2470");
                            this.Manager.Comment("reaching state \'S2630\'");
                            goto label68;
                        }
                        if ((temp388 == 1)) {
                            this.Manager.Comment("reaching state \'S1707\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp384;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp384 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2031\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp384, "return of CreateFile, state S2031");
                            this.Manager.Comment("reaching state \'S2251\'");
                            bool temp385;
                            bool temp386;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp387;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp387 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp385, out temp386);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2471\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp385, "isBytesReturnedSet of FsCtlForEasyRequest, state S2471");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp386, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2471");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp387, "return of FsCtlForEasyRequest, state S2471");
                            this.Manager.Comment("reaching state \'S2631\'");
                            goto label68;
                        }
                        throw new InvalidOperationException("never reached");
                    label68:
;
                        goto label69;
                    }
                    throw new InvalidOperationException("never reached");
                label69:
;
                    goto label70;
                }
                throw new InvalidOperationException("never reached");
            label70:
;
                goto label78;
            }
            if ((temp437 == 1)) {
                this.Manager.Comment("reaching state \'S307\'");
                bool temp391;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp391);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp391);
                this.Manager.Comment("reaching state \'S459\'");
                int temp436 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS12GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS12GetObjectFunctionalityChecker3)));
                if ((temp436 == 0)) {
                    this.Manager.Comment("reaching state \'S624\'");
                    bool temp392;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp392);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp392);
                    this.Manager.Comment("reaching state \'S858\'");
                    int temp413 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker5)));
                    if ((temp413 == 0)) {
                        this.Manager.Comment("reaching state \'S1118\'");
                        bool temp393;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp393);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp393);
                        this.Manager.Comment("reaching state \'S1412\'");
                        int temp402 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp402 == 0)) {
                            this.Manager.Comment("reaching state \'S1708\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp394;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp394 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2032\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp394, "return of CreateFile, state S2032");
                            this.Manager.Comment("reaching state \'S2252\'");
                            bool temp395;
                            bool temp396;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp397;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp397 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp395, out temp396);
                            this.Manager.Checkpoint("MS-FSA_R5033");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:BytesReturned set to sizeof( NTFS_VOLUME_DATA_BUFFER ).");
                            this.Manager.Checkpoint("MS-FSA_R5012");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] On completion, the object store MUST return:\r\n   " +
                                    "                         [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R5034");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2472\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp395, "isBytesReturnedSet of FsCtlForEasyRequest, state S2472");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp396, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2472");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp397, "return of FsCtlForEasyRequest, state S2472");
                            this.Manager.Comment("reaching state \'S2632\'");
                            goto label71;
                        }
                        if ((temp402 == 1)) {
                            this.Manager.Comment("reaching state \'S1709\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp398;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp398 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2033\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp398, "return of CreateFile, state S2033");
                            this.Manager.Comment("reaching state \'S2253\'");
                            bool temp399;
                            bool temp400;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp401;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp401 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp399, out temp400);
                            this.Manager.Checkpoint("MS-FSA_R5033");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:BytesReturned set to sizeof( NTFS_VOLUME_DATA_BUFFER ).");
                            this.Manager.Checkpoint("MS-FSA_R5012");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] On completion, the object store MUST return:\r\n   " +
                                    "                         [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R5034");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2473\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp399, "isBytesReturnedSet of FsCtlForEasyRequest, state S2473");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp400, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2473");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp401, "return of FsCtlForEasyRequest, state S2473");
                            this.Manager.Comment("reaching state \'S2633\'");
                            goto label71;
                        }
                        throw new InvalidOperationException("never reached");
                    label71:
;
                        goto label73;
                    }
                    if ((temp413 == 1)) {
                        this.Manager.Comment("reaching state \'S1119\'");
                        bool temp403;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp403);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp403);
                        this.Manager.Comment("reaching state \'S1413\'");
                        int temp412 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp412 == 0)) {
                            this.Manager.Comment("reaching state \'S1710\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp404;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp404 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2034\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp404, "return of CreateFile, state S2034");
                            this.Manager.Comment("reaching state \'S2254\'");
                            bool temp405;
                            bool temp406;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp407;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp407 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp405, out temp406);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2474\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp405, "isBytesReturnedSet of FsCtlForEasyRequest, state S2474");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp406, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2474");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp407, "return of FsCtlForEasyRequest, state S2474");
                            this.Manager.Comment("reaching state \'S2634\'");
                            goto label72;
                        }
                        if ((temp412 == 1)) {
                            this.Manager.Comment("reaching state \'S1711\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp408;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp408 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2035\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp408, "return of CreateFile, state S2035");
                            this.Manager.Comment("reaching state \'S2255\'");
                            bool temp409;
                            bool temp410;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp411;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp411 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp409, out temp410);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2475\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp409, "isBytesReturnedSet of FsCtlForEasyRequest, state S2475");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp410, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2475");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp411, "return of FsCtlForEasyRequest, state S2475");
                            this.Manager.Comment("reaching state \'S2635\'");
                            goto label72;
                        }
                        throw new InvalidOperationException("never reached");
                    label72:
;
                        goto label73;
                    }
                    throw new InvalidOperationException("never reached");
                label73:
;
                    goto label77;
                }
                if ((temp436 == 1)) {
                    this.Manager.Comment("reaching state \'S625\'");
                    bool temp414;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp414);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp414);
                    this.Manager.Comment("reaching state \'S859\'");
                    int temp435 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker7)));
                    if ((temp435 == 0)) {
                        this.Manager.Comment("reaching state \'S1120\'");
                        bool temp415;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp415);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp415);
                        this.Manager.Comment("reaching state \'S1414\'");
                        int temp424 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp424 == 0)) {
                            this.Manager.Comment("reaching state \'S1712\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp416;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp416 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2036\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp416, "return of CreateFile, state S2036");
                            this.Manager.Comment("reaching state \'S2256\'");
                            bool temp417;
                            bool temp418;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp419;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp419 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp417, out temp418);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2476\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp417, "isBytesReturnedSet of FsCtlForEasyRequest, state S2476");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp418, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2476");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp419, "return of FsCtlForEasyRequest, state S2476");
                            this.Manager.Comment("reaching state \'S2636\'");
                            goto label74;
                        }
                        if ((temp424 == 1)) {
                            this.Manager.Comment("reaching state \'S1713\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp420;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp420 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2037\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp420, "return of CreateFile, state S2037");
                            this.Manager.Comment("reaching state \'S2257\'");
                            bool temp421;
                            bool temp422;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp423;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp423 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp421, out temp422);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2477\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp421, "isBytesReturnedSet of FsCtlForEasyRequest, state S2477");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp422, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2477");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp423, "return of FsCtlForEasyRequest, state S2477");
                            this.Manager.Comment("reaching state \'S2637\'");
                            goto label74;
                        }
                        throw new InvalidOperationException("never reached");
                    label74:
;
                        goto label76;
                    }
                    if ((temp435 == 1)) {
                        this.Manager.Comment("reaching state \'S1121\'");
                        bool temp425;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp425);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp425);
                        this.Manager.Comment("reaching state \'S1415\'");
                        int temp434 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp434 == 0)) {
                            this.Manager.Comment("reaching state \'S1714\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp426;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp426 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2038\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp426, "return of CreateFile, state S2038");
                            this.Manager.Comment("reaching state \'S2258\'");
                            bool temp427;
                            bool temp428;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp429;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp429 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp427, out temp428);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2478\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp427, "isBytesReturnedSet of FsCtlForEasyRequest, state S2478");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp428, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2478");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp429, "return of FsCtlForEasyRequest, state S2478");
                            this.Manager.Comment("reaching state \'S2638\'");
                            goto label75;
                        }
                        if ((temp434 == 1)) {
                            this.Manager.Comment("reaching state \'S1715\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp430;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp430 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2039\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp430, "return of CreateFile, state S2039");
                            this.Manager.Comment("reaching state \'S2259\'");
                            bool temp431;
                            bool temp432;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp433;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp433 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp431, out temp432);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2479\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp431, "isBytesReturnedSet of FsCtlForEasyRequest, state S2479");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp432, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2479");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp433, "return of FsCtlForEasyRequest, state S2479");
                            this.Manager.Comment("reaching state \'S2639\'");
                            goto label75;
                        }
                        throw new InvalidOperationException("never reached");
                    label75:
;
                        goto label76;
                    }
                    throw new InvalidOperationException("never reached");
                label76:
;
                    goto label77;
                }
                throw new InvalidOperationException("never reached");
            label77:
;
                goto label78;
            }
            throw new InvalidOperationException("never reached");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS12GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S224");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S458");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S856");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1408");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1408");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S856");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1409");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1409");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S458");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S857");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1410");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1410");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S857");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1411");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1411");
        }
        
        private void IoCtlRequestTestCaseS12GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S224");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S459");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S858");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1412");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1412");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S858");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1413");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1413");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S459");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S859");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1414");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1414");
        }
        
        private void IoCtlRequestTestCaseS12GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S859");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1415");
        }
        
        private void IoCtlRequestTestCaseS12GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1415");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS120() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS120");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S207\'");
            bool temp438;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp438);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp438);
            this.Manager.Comment("reaching state \'S283\'");
            int temp467 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS120GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS120GetReparsePointsSupportedChecker1)));
            if ((temp467 == 0)) {
                this.Manager.Comment("reaching state \'S424\'");
                bool temp439;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp439);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp439);
                this.Manager.Comment("reaching state \'S576\'");
                int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS120GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS120GetObjectFunctionalityChecker1)));
                if ((temp452 == 0)) {
                    this.Manager.Comment("reaching state \'S788\'");
                    bool temp440;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp440);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp440);
                    this.Manager.Comment("reaching state \'S1022\'");
                    int temp445 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker1)));
                    if ((temp445 == 0)) {
                        this.Manager.Comment("reaching state \'S1300\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp441;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp441 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1544\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp441, "return of CreateFile, state S1544");
                        this.Manager.Comment("reaching state \'S1868\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp442;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BufferSu" +
                                "ccess,True,True)\'");
                        temp442 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2116\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp442, "return of FsCtlSetZeroData, state S2116");
                        this.Manager.Comment("reaching state \'S2336\'");
                        goto label79;
                    }
                    if ((temp445 == 1)) {
                        this.Manager.Comment("reaching state \'S1301\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp443;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp443 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1545\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp443, "return of CreateFile, state S1545");
                        this.Manager.Comment("reaching state \'S1869\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp444;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,False)\'");
                        temp444 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2117\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp444, "return of FsCtlSetZeroData, state S2117");
                        this.Manager.Comment("reaching state \'S2337\'");
                        goto label79;
                    }
                    throw new InvalidOperationException("never reached");
                label79:
;
                    goto label81;
                }
                if ((temp452 == 1)) {
                    this.Manager.Comment("reaching state \'S789\'");
                    bool temp446;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp446);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp446);
                    this.Manager.Comment("reaching state \'S1023\'");
                    int temp451 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker3)));
                    if ((temp451 == 0)) {
                        this.Manager.Comment("reaching state \'S1302\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp447;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp447 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1546\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp447, "return of CreateFile, state S1546");
                        this.Manager.Comment("reaching state \'S1870\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp448;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BeyondFi" +
                                "nalZeroLessThanZero,False,False)\'");
                        temp448 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2118\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp448, "return of FsCtlSetZeroData, state S2118");
                        this.Manager.Comment("reaching state \'S2338\'");
                        goto label80;
                    }
                    if ((temp451 == 1)) {
                        this.Manager.Comment("reaching state \'S1303\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp449;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp449 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1547\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp449, "return of CreateFile, state S1547");
                        this.Manager.Comment("reaching state \'S1871\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp450;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etLessThanZero,False,False)\'");
                        temp450 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), false, false);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2119\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp450, "return of FsCtlSetZeroData, state S2119");
                        this.Manager.Comment("reaching state \'S2339\'");
                        goto label80;
                    }
                    throw new InvalidOperationException("never reached");
                label80:
;
                    goto label81;
                }
                throw new InvalidOperationException("never reached");
            label81:
;
                goto label85;
            }
            if ((temp467 == 1)) {
                this.Manager.Comment("reaching state \'S425\'");
                bool temp453;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp453);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp453);
                this.Manager.Comment("reaching state \'S577\'");
                int temp466 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS120GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS120GetObjectFunctionalityChecker3)));
                if ((temp466 == 0)) {
                    this.Manager.Comment("reaching state \'S790\'");
                    bool temp454;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp454);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp454);
                    this.Manager.Comment("reaching state \'S1024\'");
                    int temp459 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker5)));
                    if ((temp459 == 0)) {
                        this.Manager.Comment("reaching state \'S1304\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp455;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp455 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1548\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp455, "return of CreateFile, state S1548");
                        this.Manager.Comment("reaching state \'S1872\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp456;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,True)\'");
                        temp456 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2120\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp456, "return of FsCtlSetZeroData, state S2120");
                        this.Manager.Comment("reaching state \'S2340\'");
                        goto label82;
                    }
                    if ((temp459 == 1)) {
                        this.Manager.Comment("reaching state \'S1305\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp457;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp457 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1549\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp457, "return of CreateFile, state S1549");
                        this.Manager.Comment("reaching state \'S1873\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp458;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,False)" +
                                "\'");
                        temp458 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2121\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp458, "return of FsCtlSetZeroData, state S2121");
                        this.Manager.Comment("reaching state \'S2341\'");
                        goto label82;
                    }
                    throw new InvalidOperationException("never reached");
                label82:
;
                    goto label84;
                }
                if ((temp466 == 1)) {
                    this.Manager.Comment("reaching state \'S791\'");
                    bool temp460;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp460);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp460);
                    this.Manager.Comment("reaching state \'S1025\'");
                    int temp465 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker7)));
                    if ((temp465 == 0)) {
                        this.Manager.Comment("reaching state \'S1306\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp461;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp461 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1550\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp461, "return of CreateFile, state S1550");
                        this.Manager.Comment("reaching state \'S1874\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp462;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,False,True)\'");
                        temp462 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R1316");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:While TRUE :]\r" +
                                "\n                    If a conflict is detected the operation MUST be failed with" +
                                " STATUS_FILE_LOCK_CONFLICT.");
                        this.Manager.Comment("reaching state \'S2122\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/FILE_LOCK_CONFLICT\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_LOCK_CONFLICT, temp462, "return of FsCtlSetZeroData, state S2122");
                        this.Manager.Comment("reaching state \'S2342\'");
                        goto label83;
                    }
                    if ((temp465 == 1)) {
                        this.Manager.Comment("reaching state \'S1307\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp463;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp463 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1551\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp463, "return of CreateFile, state S1551");
                        this.Manager.Comment("reaching state \'S1875\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp464;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BeyondFi" +
                                "nalZeroLessThanZero,False,True)\'");
                        temp464 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2123\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp464, "return of FsCtlSetZeroData, state S2123");
                        this.Manager.Comment("reaching state \'S2343\'");
                        goto label83;
                    }
                    throw new InvalidOperationException("never reached");
                label83:
;
                    goto label84;
                }
                throw new InvalidOperationException("never reached");
            label84:
;
                goto label85;
            }
            throw new InvalidOperationException("never reached");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS120GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S283");
        }
        
        private void IoCtlRequestTestCaseS120GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S576");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1022");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1022");
        }
        
        private void IoCtlRequestTestCaseS120GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S576");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1023");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1023");
        }
        
        private void IoCtlRequestTestCaseS120GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S283");
        }
        
        private void IoCtlRequestTestCaseS120GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S577");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1024");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1024");
        }
        
        private void IoCtlRequestTestCaseS120GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S577");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1025");
        }
        
        private void IoCtlRequestTestCaseS120GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1025");
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS122() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS122");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S208\'");
            bool temp468;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp468);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp468);
            this.Manager.Comment("reaching state \'S284\'");
            int temp497 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS122GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS122GetReparsePointsSupportedChecker1)));
            if ((temp497 == 0)) {
                this.Manager.Comment("reaching state \'S426\'");
                bool temp469;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp469);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp469);
                this.Manager.Comment("reaching state \'S578\'");
                int temp482 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS122GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS122GetObjectFunctionalityChecker1)));
                if ((temp482 == 0)) {
                    this.Manager.Comment("reaching state \'S792\'");
                    bool temp470;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp470);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp470);
                    this.Manager.Comment("reaching state \'S1026\'");
                    int temp475 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker1)));
                    if ((temp475 == 0)) {
                        this.Manager.Comment("reaching state \'S1308\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp471;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp471 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1552\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp471, "return of CreateFile, state S1552");
                        this.Manager.Comment("reaching state \'S1876\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp472;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,True)\'");
                        temp472 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2124\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp472, "return of FsCtlSetZeroData, state S2124");
                        this.Manager.Comment("reaching state \'S2344\'");
                        goto label86;
                    }
                    if ((temp475 == 1)) {
                        this.Manager.Comment("reaching state \'S1309\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp473;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp473 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1553\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp473, "return of CreateFile, state S1553");
                        this.Manager.Comment("reaching state \'S1877\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp474;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etLessThanZero,False,False)\'");
                        temp474 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2125\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp474, "return of FsCtlSetZeroData, state S2125");
                        this.Manager.Comment("reaching state \'S2345\'");
                        goto label86;
                    }
                    throw new InvalidOperationException("never reached");
                label86:
;
                    goto label88;
                }
                if ((temp482 == 1)) {
                    this.Manager.Comment("reaching state \'S793\'");
                    bool temp476;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp476);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp476);
                    this.Manager.Comment("reaching state \'S1027\'");
                    int temp481 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker3)));
                    if ((temp481 == 0)) {
                        this.Manager.Comment("reaching state \'S1310\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp477;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp477 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1554\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp477, "return of CreateFile, state S1554");
                        this.Manager.Comment("reaching state \'S1878\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp478;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etLessThanZero,True,True)\'");
                        temp478 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2126\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp478, "return of FsCtlSetZeroData, state S2126");
                        this.Manager.Comment("reaching state \'S2346\'");
                        goto label87;
                    }
                    if ((temp481 == 1)) {
                        this.Manager.Comment("reaching state \'S1311\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp479;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp479 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1555\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp479, "return of CreateFile, state S1555");
                        this.Manager.Comment("reaching state \'S1879\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp480;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,True,False)\'");
                        temp480 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R1307");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]Pseudocode for the operation is as follows:\r\n            " +
                                "        If Open.File.Volume.IsReadOnly is TRUE, the operation MUST be failed wit" +
                                "h STATUS_MEDIA_WRITE_PROTECTED.");
                        this.Manager.Comment("reaching state \'S2127\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/MEDIA_WRITE_PROTECTED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp480, "return of FsCtlSetZeroData, state S2127");
                        this.Manager.Comment("reaching state \'S2347\'");
                        goto label87;
                    }
                    throw new InvalidOperationException("never reached");
                label87:
;
                    goto label88;
                }
                throw new InvalidOperationException("never reached");
            label88:
;
                goto label92;
            }
            if ((temp497 == 1)) {
                this.Manager.Comment("reaching state \'S427\'");
                bool temp483;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp483);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp483);
                this.Manager.Comment("reaching state \'S579\'");
                int temp496 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS122GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS122GetObjectFunctionalityChecker3)));
                if ((temp496 == 0)) {
                    this.Manager.Comment("reaching state \'S794\'");
                    bool temp484;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp484);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp484);
                    this.Manager.Comment("reaching state \'S1028\'");
                    int temp489 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker5)));
                    if ((temp489 == 0)) {
                        this.Manager.Comment("reaching state \'S1312\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp485;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp485 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1556\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp485, "return of CreateFile, state S1556");
                        this.Manager.Comment("reaching state \'S1880\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp486;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etLessThanZero,False,False)\'");
                        temp486 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2128\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp486, "return of FsCtlSetZeroData, state S2128");
                        this.Manager.Comment("reaching state \'S2348\'");
                        goto label89;
                    }
                    if ((temp489 == 1)) {
                        this.Manager.Comment("reaching state \'S1313\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp487;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp487 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1557\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp487, "return of CreateFile, state S1557");
                        this.Manager.Comment("reaching state \'S1881\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp488;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etLessThanZero,False,False)\'");
                        temp488 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), false, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2129\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp488, "return of FsCtlSetZeroData, state S2129");
                        this.Manager.Comment("reaching state \'S2349\'");
                        goto label89;
                    }
                    throw new InvalidOperationException("never reached");
                label89:
;
                    goto label91;
                }
                if ((temp496 == 1)) {
                    this.Manager.Comment("reaching state \'S795\'");
                    bool temp490;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp490);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp490);
                    this.Manager.Comment("reaching state \'S1029\'");
                    int temp495 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker7)));
                    if ((temp495 == 0)) {
                        this.Manager.Comment("reaching state \'S1314\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp491;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp491 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1558\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp491, "return of CreateFile, state S1558");
                        this.Manager.Comment("reaching state \'S1882\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp492;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,True)\'" +
                                "");
                        temp492 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R1309");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:]While TRUE :\r" +
                                "\n                    If Open.Stream.IsDeleted is TRUE, the operation MUST be fai" +
                                "led with STATUS_FILE_DELETED.");
                        this.Manager.Comment("reaching state \'S2130\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/FILE_DELETED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_DELETED, temp492, "return of FsCtlSetZeroData, state S2130");
                        this.Manager.Comment("reaching state \'S2350\'");
                        goto label90;
                    }
                    if ((temp495 == 1)) {
                        this.Manager.Comment("reaching state \'S1315\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp493;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp493 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1559\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp493, "return of CreateFile, state S1559");
                        this.Manager.Comment("reaching state \'S1883\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp494;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,False,False)\'");
                        temp494 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R1307");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]Pseudocode for the operation is as follows:\r\n            " +
                                "        If Open.File.Volume.IsReadOnly is TRUE, the operation MUST be failed wit" +
                                "h STATUS_MEDIA_WRITE_PROTECTED.");
                        this.Manager.Comment("reaching state \'S2131\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/MEDIA_WRITE_PROTECTED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp494, "return of FsCtlSetZeroData, state S2131");
                        this.Manager.Comment("reaching state \'S2351\'");
                        goto label90;
                    }
                    throw new InvalidOperationException("never reached");
                label90:
;
                    goto label91;
                }
                throw new InvalidOperationException("never reached");
            label91:
;
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS122GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S284");
        }
        
        private void IoCtlRequestTestCaseS122GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S578");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1026");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1026");
        }
        
        private void IoCtlRequestTestCaseS122GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S578");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1027");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1027");
        }
        
        private void IoCtlRequestTestCaseS122GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S284");
        }
        
        private void IoCtlRequestTestCaseS122GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S579");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1028");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1028");
        }
        
        private void IoCtlRequestTestCaseS122GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S579");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1029");
        }
        
        private void IoCtlRequestTestCaseS122GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1029");
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS124() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS124");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S209\'");
            bool temp498;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp498);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp498);
            this.Manager.Comment("reaching state \'S285\'");
            int temp527 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS124GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS124GetReparsePointsSupportedChecker1)));
            if ((temp527 == 0)) {
                this.Manager.Comment("reaching state \'S428\'");
                bool temp499;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp499);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp499);
                this.Manager.Comment("reaching state \'S580\'");
                int temp512 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS124GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS124GetObjectFunctionalityChecker1)));
                if ((temp512 == 0)) {
                    this.Manager.Comment("reaching state \'S796\'");
                    bool temp500;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp500);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp500);
                    this.Manager.Comment("reaching state \'S1030\'");
                    int temp505 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker1)));
                    if ((temp505 == 0)) {
                        this.Manager.Comment("reaching state \'S1316\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp501;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp501 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1560\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp501, "return of CreateFile, state S1560");
                        this.Manager.Comment("reaching state \'S1884\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp502;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etGreatThanBeyondFinalZero,False,True)\'");
                        temp502 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2132\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp502, "return of FsCtlSetZeroData, state S2132");
                        this.Manager.Comment("reaching state \'S2352\'");
                        goto label93;
                    }
                    if ((temp505 == 1)) {
                        this.Manager.Comment("reaching state \'S1317\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp503;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp503 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1561\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp503, "return of CreateFile, state S1561");
                        this.Manager.Comment("reaching state \'S1885\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp504;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetLessThanZero,Tr" +
                                "ue,True)\'");
                        temp504 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2133\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp504, "return of FsCtlSetZeroData, state S2133");
                        this.Manager.Comment("reaching state \'S2353\'");
                        goto label93;
                    }
                    throw new InvalidOperationException("never reached");
                label93:
;
                    goto label95;
                }
                if ((temp512 == 1)) {
                    this.Manager.Comment("reaching state \'S797\'");
                    bool temp506;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp506);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp506);
                    this.Manager.Comment("reaching state \'S1031\'");
                    int temp511 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker3)));
                    if ((temp511 == 0)) {
                        this.Manager.Comment("reaching state \'S1318\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp507;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp507 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1562\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp507, "return of CreateFile, state S1562");
                        this.Manager.Comment("reaching state \'S1886\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp508;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,False,False)\'");
                        temp508 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, false, false);
                        this.Manager.Checkpoint("MS-FSA_R1365");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:]\r\n           " +
                                "     Upon successful completion of the operation, the object store MUST return:S" +
                                "tatus set to STATUS_SUCCESS.");
                        this.Manager.Checkpoint("MS-FSA_R1569");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]On completion, the object store MUST return[Status].");
                        this.Manager.Comment("reaching state \'S2134\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp508, "return of FsCtlSetZeroData, state S2134");
                        this.Manager.Comment("reaching state \'S2354\'");
                        goto label94;
                    }
                    if ((temp511 == 1)) {
                        this.Manager.Comment("reaching state \'S1319\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp509;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp509 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1563\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp509, "return of CreateFile, state S1563");
                        this.Manager.Comment("reaching state \'S1887\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp510;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,False,True)\'");
                        temp510 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, false, true);
                        this.Manager.Checkpoint("MS-FSA_R1304");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBuffer.Beyond" +
                                "FinalZero is less than 0.");
                        this.Manager.Comment("reaching state \'S2135\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp510, "return of FsCtlSetZeroData, state S2135");
                        this.Manager.Comment("reaching state \'S2355\'");
                        goto label94;
                    }
                    throw new InvalidOperationException("never reached");
                label94:
;
                    goto label95;
                }
                throw new InvalidOperationException("never reached");
            label95:
;
                goto label99;
            }
            if ((temp527 == 1)) {
                this.Manager.Comment("reaching state \'S429\'");
                bool temp513;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp513);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp513);
                this.Manager.Comment("reaching state \'S581\'");
                int temp526 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS124GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS124GetObjectFunctionalityChecker3)));
                if ((temp526 == 0)) {
                    this.Manager.Comment("reaching state \'S798\'");
                    bool temp514;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp514);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp514);
                    this.Manager.Comment("reaching state \'S1032\'");
                    int temp519 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker5)));
                    if ((temp519 == 0)) {
                        this.Manager.Comment("reaching state \'S1320\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp515;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp515 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1564\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp515, "return of CreateFile, state S1564");
                        this.Manager.Comment("reaching state \'S1888\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp516;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etGreatThanBeyondFinalZero,True,False)\'");
                        temp516 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2136\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp516, "return of FsCtlSetZeroData, state S2136");
                        this.Manager.Comment("reaching state \'S2356\'");
                        goto label96;
                    }
                    if ((temp519 == 1)) {
                        this.Manager.Comment("reaching state \'S1321\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp517;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp517 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1565\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp517, "return of CreateFile, state S1565");
                        this.Manager.Comment("reaching state \'S1889\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp518;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etGreatThanBeyondFinalZero,True,False)\'");
                        temp518 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2137\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp518, "return of FsCtlSetZeroData, state S2137");
                        this.Manager.Comment("reaching state \'S2357\'");
                        goto label96;
                    }
                    throw new InvalidOperationException("never reached");
                label96:
;
                    goto label98;
                }
                if ((temp526 == 1)) {
                    this.Manager.Comment("reaching state \'S799\'");
                    bool temp520;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp520);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp520);
                    this.Manager.Comment("reaching state \'S1033\'");
                    int temp525 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker7)));
                    if ((temp525 == 0)) {
                        this.Manager.Comment("reaching state \'S1322\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp521;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp521 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1566\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp521, "return of CreateFile, state S1566");
                        this.Manager.Comment("reaching state \'S1890\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp522;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,True,False)\'");
                        temp522 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R1309");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:]While TRUE :\r" +
                                "\n                    If Open.Stream.IsDeleted is TRUE, the operation MUST be fai" +
                                "led with STATUS_FILE_DELETED.");
                        this.Manager.Comment("reaching state \'S2138\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/FILE_DELETED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_DELETED, temp522, "return of FsCtlSetZeroData, state S2138");
                        this.Manager.Comment("reaching state \'S2358\'");
                        goto label97;
                    }
                    if ((temp525 == 1)) {
                        this.Manager.Comment("reaching state \'S1323\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp523;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp523 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1567\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp523, "return of CreateFile, state S1567");
                        this.Manager.Comment("reaching state \'S1891\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp524;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BeyondFinalZeroLessThanZe" +
                                "ro,True,False)\'");
                        temp524 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R1304");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBuffer.Beyond" +
                                "FinalZero is less than 0.");
                        this.Manager.Comment("reaching state \'S2139\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp524, "return of FsCtlSetZeroData, state S2139");
                        this.Manager.Comment("reaching state \'S2359\'");
                        goto label97;
                    }
                    throw new InvalidOperationException("never reached");
                label97:
;
                    goto label98;
                }
                throw new InvalidOperationException("never reached");
            label98:
;
                goto label99;
            }
            throw new InvalidOperationException("never reached");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS124GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S285");
        }
        
        private void IoCtlRequestTestCaseS124GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S580");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1030");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1030");
        }
        
        private void IoCtlRequestTestCaseS124GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S580");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1031");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1031");
        }
        
        private void IoCtlRequestTestCaseS124GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S285");
        }
        
        private void IoCtlRequestTestCaseS124GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S581");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1032");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1032");
        }
        
        private void IoCtlRequestTestCaseS124GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S581");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1033");
        }
        
        private void IoCtlRequestTestCaseS124GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1033");
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS126() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS126");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S210\'");
            bool temp528;
            this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
            this.IFSAAdapterInstance.GetReparsePointsSupported(out temp528);
            this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp528);
            this.Manager.Comment("reaching state \'S286\'");
            int temp557 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS126GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS126GetReparsePointsSupportedChecker1)));
            if ((temp557 == 0)) {
                this.Manager.Comment("reaching state \'S430\'");
                bool temp529;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp529);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp529);
                this.Manager.Comment("reaching state \'S582\'");
                int temp542 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS126GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS126GetObjectFunctionalityChecker1)));
                if ((temp542 == 0)) {
                    this.Manager.Comment("reaching state \'S800\'");
                    bool temp530;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp530);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp530);
                    this.Manager.Comment("reaching state \'S1034\'");
                    int temp535 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker1)));
                    if ((temp535 == 0)) {
                        this.Manager.Comment("reaching state \'S1324\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp531;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp531 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1568\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp531, "return of CreateFile, state S1568");
                        this.Manager.Comment("reaching state \'S1892\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp532;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetGreatThanBeyond" +
                                "FinalZero,True,False)\'");
                        temp532 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2140\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp532, "return of FsCtlSetZeroData, state S2140");
                        this.Manager.Comment("reaching state \'S2360\'");
                        goto label100;
                    }
                    if ((temp535 == 1)) {
                        this.Manager.Comment("reaching state \'S1325\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp533;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp533 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1569\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp533, "return of CreateFile, state S1569");
                        this.Manager.Comment("reaching state \'S1893\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp534;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,FileOffs" +
                                "etGreatThanBeyondFinalZero,True,False)\'");
                        temp534 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.FileOffsetGreatThanBeyondFinalZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2141\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp534, "return of FsCtlSetZeroData, state S2141");
                        this.Manager.Comment("reaching state \'S2361\'");
                        goto label100;
                    }
                    throw new InvalidOperationException("never reached");
                label100:
;
                    goto label102;
                }
                if ((temp542 == 1)) {
                    this.Manager.Comment("reaching state \'S801\'");
                    bool temp536;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp536);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp536);
                    this.Manager.Comment("reaching state \'S1035\'");
                    int temp541 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker3)));
                    if ((temp541 == 0)) {
                        this.Manager.Comment("reaching state \'S1326\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp537;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp537 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1570\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp537, "return of CreateFile, state S1570");
                        this.Manager.Comment("reaching state \'S1894\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp538;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,BufferSuccess,True,False)" +
                                "\'");
                        temp538 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), true, false);
                        this.Manager.Checkpoint("MS-FSA_R1309");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA,Pseudocode for the operation is as follows:]While TRUE :\r" +
                                "\n                    If Open.Stream.IsDeleted is TRUE, the operation MUST be fai" +
                                "led with STATUS_FILE_DELETED.");
                        this.Manager.Comment("reaching state \'S2142\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/FILE_DELETED\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.FILE_DELETED, temp538, "return of FsCtlSetZeroData, state S2142");
                        this.Manager.Comment("reaching state \'S2362\'");
                        goto label101;
                    }
                    if ((temp541 == 1)) {
                        this.Manager.Comment("reaching state \'S1327\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp539;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp539 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1571\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp539, "return of CreateFile, state S1571");
                        this.Manager.Comment("reaching state \'S1895\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp540;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetLessThanZero,Tr" +
                                "ue,True)\'");
                        temp540 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), true, true);
                        this.Manager.Checkpoint("MS-FSA_R1303");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBuffer.FileOf" +
                                "fset is less than 0.");
                        this.Manager.Comment("reaching state \'S2143\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp540, "return of FsCtlSetZeroData, state S2143");
                        this.Manager.Comment("reaching state \'S2363\'");
                        goto label101;
                    }
                    throw new InvalidOperationException("never reached");
                label101:
;
                    goto label102;
                }
                throw new InvalidOperationException("never reached");
            label102:
;
                goto label106;
            }
            if ((temp557 == 1)) {
                this.Manager.Comment("reaching state \'S431\'");
                bool temp543;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp543);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp543);
                this.Manager.Comment("reaching state \'S583\'");
                int temp556 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS126GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS126GetObjectFunctionalityChecker3)));
                if ((temp556 == 0)) {
                    this.Manager.Comment("reaching state \'S802\'");
                    bool temp544;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp544);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp544);
                    this.Manager.Comment("reaching state \'S1036\'");
                    int temp549 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker5)));
                    if ((temp549 == 0)) {
                        this.Manager.Comment("reaching state \'S1328\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp545;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp545 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1572\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp545, "return of CreateFile, state S1572");
                        this.Manager.Comment("reaching state \'S1896\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp546;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BufferSu" +
                                "ccess,False,True)\'");
                        temp546 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), false, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2144\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp546, "return of FsCtlSetZeroData, state S2144");
                        this.Manager.Comment("reaching state \'S2364\'");
                        goto label103;
                    }
                    if ((temp549 == 1)) {
                        this.Manager.Comment("reaching state \'S1329\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp547;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp547 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1573\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp547, "return of CreateFile, state S1573");
                        this.Manager.Comment("reaching state \'S1897\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp548;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BufferSu" +
                                "ccess,False,True)\'");
                        temp548 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(0)), false, true);
                        this.Manager.Checkpoint("MS-FSA_R4335");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA] If the object store does not implement this functionalit" +
                                "y, \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE" +
                                "_REQUEST.<50>");
                        this.Manager.Comment("reaching state \'S2145\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_DEVICE_REQUEST\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp548, "return of FsCtlSetZeroData, state S2145");
                        this.Manager.Comment("reaching state \'S2365\'");
                        goto label103;
                    }
                    throw new InvalidOperationException("never reached");
                label103:
;
                    goto label105;
                }
                if ((temp556 == 1)) {
                    this.Manager.Comment("reaching state \'S803\'");
                    bool temp550;
                    this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                    this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp550);
                    this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp550);
                    this.Manager.Comment("reaching state \'S1037\'");
                    int temp555 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker7)));
                    if ((temp555 == 0)) {
                        this.Manager.Comment("reaching state \'S1330\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp551;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp551 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1574\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp551, "return of CreateFile, state S1574");
                        this.Manager.Comment("reaching state \'S1898\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp552;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(LessThanFILE_ZERO_DATA_INFORMATION,BeyondFi" +
                                "nalZeroLessThanZero,True,False)\'");
                        temp552 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ZERO_DATA_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA.BeyondFinalZeroLessThanZero, true, false);
                        this.Manager.Checkpoint("MS-FSA_R1302");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBufferSize is" +
                                " less than sizeof( FILE_ZERO_DATA_INFORMATION ).");
                        this.Manager.Comment("reaching state \'S2146\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp552, "return of FsCtlSetZeroData, state S2146");
                        this.Manager.Comment("reaching state \'S2366\'");
                        goto label104;
                    }
                    if ((temp555 == 1)) {
                        this.Manager.Comment("reaching state \'S1331\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp553;
                        this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                        temp553 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                        this.Manager.Checkpoint("MS-FSA_R405");
                        this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                        this.Manager.Checkpoint("MS-FSA_R475");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return:CreateAction set to FILE_CREATED.");
                        this.Manager.Checkpoint("MS-FSA_R474");
                        this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                "        The object store MUST return :Status set to STATUS_SUCCESS.");
                        this.Manager.Comment("reaching state \'S1575\'");
                        this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp553, "return of CreateFile, state S1575");
                        this.Manager.Comment("reaching state \'S1899\'");
                        Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp554;
                        this.Manager.Comment("executing step \'call FsCtlSetZeroData(BufferSizeSuccess,FileOffsetLessThanZero,Fa" +
                                "lse,True)\'");
                        temp554 = this.IFSAAdapterInstance.FsCtlSetZeroData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBuffer_FSCTL_SET_ZERO_DATA)(1)), false, true);
                        this.Manager.Checkpoint("MS-FSA_R1303");
                        this.Manager.Checkpoint("[In FSCTL_SET_ZERO_DATA]The operation MUST be failed with STATUS_INVALID_PARAMETE" +
                                "R \r\n                    under any of the following conditions:InputBuffer.FileOf" +
                                "fset is less than 0.");
                        this.Manager.Comment("reaching state \'S2147\'");
                        this.Manager.Comment("checking step \'return FsCtlSetZeroData/INVALID_PARAMETER\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp554, "return of FsCtlSetZeroData, state S2147");
                        this.Manager.Comment("reaching state \'S2367\'");
                        goto label104;
                    }
                    throw new InvalidOperationException("never reached");
                label104:
;
                    goto label105;
                }
                throw new InvalidOperationException("never reached");
            label105:
;
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS126GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S286");
        }
        
        private void IoCtlRequestTestCaseS126GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S582");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1034");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1034");
        }
        
        private void IoCtlRequestTestCaseS126GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S582");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1035");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1035");
        }
        
        private void IoCtlRequestTestCaseS126GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S286");
        }
        
        private void IoCtlRequestTestCaseS126GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S583");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1036");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1036");
        }
        
        private void IoCtlRequestTestCaseS126GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S583");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1037");
        }
        
        private void IoCtlRequestTestCaseS126GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1037");
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS128() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS128");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S211\'");
            bool temp558;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp558);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp558);
            this.Manager.Comment("reaching state \'S287\'");
            int temp571 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS128GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS128GetAdministratorChecker1)));
            if ((temp571 == 0)) {
                this.Manager.Comment("reaching state \'S432\'");
                bool temp559;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp559);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp559);
                this.Manager.Comment("reaching state \'S584\'");
                int temp564 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS128GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS128GetObjectFunctionalityChecker1)));
                if ((temp564 == 0)) {
                    this.Manager.Comment("reaching state \'S804\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp560;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp560 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1038\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp560, "return of CreateFile, state S1038");
                    this.Manager.Comment("reaching state \'S1332\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp561;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,False,False)\'");
                    temp561 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1576\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp561, "return of FsctlSisCopyFile, state S1576");
                    this.Manager.Comment("reaching state \'S1900\'");
                    goto label107;
                }
                if ((temp564 == 1)) {
                    this.Manager.Comment("reaching state \'S805\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp562;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp562 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1039\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp562, "return of CreateFile, state S1039");
                    this.Manager.Comment("reaching state \'S1333\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp563;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,False,False)\'");
                    temp563 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, false);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1577\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp563, "return of FsctlSisCopyFile, state S1577");
                    this.Manager.Comment("reaching state \'S1901\'");
                    goto label107;
                }
                throw new InvalidOperationException("never reached");
            label107:
;
                goto label109;
            }
            if ((temp571 == 1)) {
                this.Manager.Comment("reaching state \'S433\'");
                bool temp565;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp565);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp565);
                this.Manager.Comment("reaching state \'S585\'");
                int temp570 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS128GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS128GetObjectFunctionalityChecker3)));
                if ((temp570 == 0)) {
                    this.Manager.Comment("reaching state \'S806\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp566;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp566 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1040\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp566, "return of CreateFile, state S1040");
                    this.Manager.Comment("reaching state \'S1334\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp567;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,False,False)\'");
                    temp567 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1578\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp567, "return of FsctlSisCopyFile, state S1578");
                    this.Manager.Comment("reaching state \'S1902\'");
                    goto label108;
                }
                if ((temp570 == 1)) {
                    this.Manager.Comment("reaching state \'S807\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp568;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp568 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1041\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp568, "return of CreateFile, state S1041");
                    this.Manager.Comment("reaching state \'S1335\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp569;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,True,True)\'");
                    temp569 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), true, true);
                    this.Manager.Checkpoint("MS-FSA_R4755");
                    this.Manager.Checkpoint(@"In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:
                    The operation MUST be failed with STATUS_OBJECT_TYPE_MISMATCH under any of the following conditions:]  
                    If SourceOpen.File.ReparseTag is empty and InputBuffer.Flags.COPYFILE_SIS_LINK is TRUE.");
                    this.Manager.Comment("reaching state \'S1579\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/OBJECT_TYPE_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_TYPE_MISMATCH, temp569, "return of FsctlSisCopyFile, state S1579");
                    this.Manager.Comment("reaching state \'S1903\'");
                    goto label108;
                }
                throw new InvalidOperationException("never reached");
            label108:
;
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS128GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S287");
        }
        
        private void IoCtlRequestTestCaseS128GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S584");
        }
        
        private void IoCtlRequestTestCaseS128GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S584");
        }
        
        private void IoCtlRequestTestCaseS128GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S287");
        }
        
        private void IoCtlRequestTestCaseS128GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S585");
        }
        
        private void IoCtlRequestTestCaseS128GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S585");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS130() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS130");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S212\'");
            bool temp572;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp572);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp572);
            this.Manager.Comment("reaching state \'S288\'");
            int temp585 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS130GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS130GetAdministratorChecker1)));
            if ((temp585 == 0)) {
                this.Manager.Comment("reaching state \'S434\'");
                bool temp573;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp573);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp573);
                this.Manager.Comment("reaching state \'S586\'");
                int temp578 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS130GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS130GetObjectFunctionalityChecker1)));
                if ((temp578 == 0)) {
                    this.Manager.Comment("reaching state \'S808\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp574;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp574 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1042\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp574, "return of CreateFile, state S1042");
                    this.Manager.Comment("reaching state \'S1336\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp575;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,DestinationFileNameLeng" +
                            "thLargeThanMAXUSHORT,False,True)\'");
                    temp575 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLargeThanMAXUSHORT, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1580\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp575, "return of FsctlSisCopyFile, state S1580");
                    this.Manager.Comment("reaching state \'S1904\'");
                    goto label110;
                }
                if ((temp578 == 1)) {
                    this.Manager.Comment("reaching state \'S809\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp576;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp576 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1043\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp576, "return of CreateFile, state S1043");
                    this.Manager.Comment("reaching state \'S1337\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp577;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,DestinationFileNameLeng" +
                            "thLargeThanMAXUSHORT,True,True)\'");
                    temp577 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLargeThanMAXUSHORT, true, true);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1581\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp577, "return of FsctlSisCopyFile, state S1581");
                    this.Manager.Comment("reaching state \'S1905\'");
                    goto label110;
                }
                throw new InvalidOperationException("never reached");
            label110:
;
                goto label112;
            }
            if ((temp585 == 1)) {
                this.Manager.Comment("reaching state \'S435\'");
                bool temp579;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp579);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp579);
                this.Manager.Comment("reaching state \'S587\'");
                int temp584 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS130GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS130GetObjectFunctionalityChecker3)));
                if ((temp584 == 0)) {
                    this.Manager.Comment("reaching state \'S810\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp580;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp580 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1044\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp580, "return of CreateFile, state S1044");
                    this.Manager.Comment("reaching state \'S1338\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp581;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,False,False)\'");
                    temp581 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1582\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp581, "return of FsctlSisCopyFile, state S1582");
                    this.Manager.Comment("reaching state \'S1906\'");
                    goto label111;
                }
                if ((temp584 == 1)) {
                    this.Manager.Comment("reaching state \'S811\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp582;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp582 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1045\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp582, "return of CreateFile, state S1045");
                    this.Manager.Comment("reaching state \'S1339\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp583;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,FlagsNotContainCOPYFILE" +
                            "_SIS_LINKAndCOPYFILE_SIS_REPLACE,False,True)\'");
                    temp583 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4734");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:]\r\n            " +
                            "        If InputBufferSizes is less than sizeof( SI_COPYFILE ), the operation MU" +
                            "ST be failed with STATUS_INVALID_PARAMETER_1.");
                    this.Manager.Comment("reaching state \'S1583\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp583, "return of FsctlSisCopyFile, state S1583");
                    this.Manager.Comment("reaching state \'S1907\'");
                    goto label111;
                }
                throw new InvalidOperationException("never reached");
            label111:
;
                goto label112;
            }
            throw new InvalidOperationException("never reached");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS130GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S288");
        }
        
        private void IoCtlRequestTestCaseS130GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S586");
        }
        
        private void IoCtlRequestTestCaseS130GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S586");
        }
        
        private void IoCtlRequestTestCaseS130GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S288");
        }
        
        private void IoCtlRequestTestCaseS130GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S587");
        }
        
        private void IoCtlRequestTestCaseS130GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S587");
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS132() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS132");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S213\'");
            bool temp586;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp586);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp586);
            this.Manager.Comment("reaching state \'S289\'");
            int temp599 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS132GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS132GetAdministratorChecker1)));
            if ((temp599 == 0)) {
                this.Manager.Comment("reaching state \'S436\'");
                bool temp587;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp587);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp587);
                this.Manager.Comment("reaching state \'S588\'");
                int temp592 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS132GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS132GetObjectFunctionalityChecker1)));
                if ((temp592 == 0)) {
                    this.Manager.Comment("reaching state \'S812\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp588;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp588 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1046\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp588, "return of CreateFile, state S1046");
                    this.Manager.Comment("reaching state \'S1340\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp589;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,True,False)\'");
                    temp589 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, true, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1584\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp589, "return of FsctlSisCopyFile, state S1584");
                    this.Manager.Comment("reaching state \'S1908\'");
                    goto label113;
                }
                if ((temp592 == 1)) {
                    this.Manager.Comment("reaching state \'S813\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp590;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp590 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1047\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp590, "return of CreateFile, state S1047");
                    this.Manager.Comment("reaching state \'S1341\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp591;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,InputBufferSizeLessThanOt" +
                            "herPlus,True,False)\'");
                    temp591 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(1)), true, false);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1585\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp591, "return of FsctlSisCopyFile, state S1585");
                    this.Manager.Comment("reaching state \'S1909\'");
                    goto label113;
                }
                throw new InvalidOperationException("never reached");
            label113:
;
                goto label115;
            }
            if ((temp599 == 1)) {
                this.Manager.Comment("reaching state \'S437\'");
                bool temp593;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp593);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp593);
                this.Manager.Comment("reaching state \'S589\'");
                int temp598 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS132GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS132GetObjectFunctionalityChecker3)));
                if ((temp598 == 0)) {
                    this.Manager.Comment("reaching state \'S814\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp594;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp594 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1048\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp594, "return of CreateFile, state S1048");
                    this.Manager.Comment("reaching state \'S1342\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp595;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,DestinationFileNameLeng" +
                            "thLargeThanMAXUSHORT,True,True)\'");
                    temp595 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLargeThanMAXUSHORT, true, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1586\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp595, "return of FsctlSisCopyFile, state S1586");
                    this.Manager.Comment("reaching state \'S1910\'");
                    goto label114;
                }
                if ((temp598 == 1)) {
                    this.Manager.Comment("reaching state \'S815\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp596;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp596 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1049\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp596, "return of CreateFile, state S1049");
                    this.Manager.Comment("reaching state \'S1343\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp597;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LargeThanMAXUSHORT,False,False)\'");
                    temp597 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLargeThanMAXUSHORT, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4739");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] \r\n           " +
                            "         If InputBuffer.DestinationFileNameLength is > MAXUSHORT (0xffff), the o" +
                            "peration MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S1587\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp597, "return of FsctlSisCopyFile, state S1587");
                    this.Manager.Comment("reaching state \'S1911\'");
                    goto label114;
                }
                throw new InvalidOperationException("never reached");
            label114:
;
                goto label115;
            }
            throw new InvalidOperationException("never reached");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS132GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S289");
        }
        
        private void IoCtlRequestTestCaseS132GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S588");
        }
        
        private void IoCtlRequestTestCaseS132GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S588");
        }
        
        private void IoCtlRequestTestCaseS132GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S289");
        }
        
        private void IoCtlRequestTestCaseS132GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S589");
        }
        
        private void IoCtlRequestTestCaseS132GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S589");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS134() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS134");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S214\'");
            bool temp600;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp600);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp600);
            this.Manager.Comment("reaching state \'S290\'");
            int temp613 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS134GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS134GetAdministratorChecker1)));
            if ((temp613 == 0)) {
                this.Manager.Comment("reaching state \'S438\'");
                bool temp601;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp601);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp601);
                this.Manager.Comment("reaching state \'S590\'");
                int temp606 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS134GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS134GetObjectFunctionalityChecker1)));
                if ((temp606 == 0)) {
                    this.Manager.Comment("reaching state \'S816\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp602;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp602 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1050\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp602, "return of CreateFile, state S1050");
                    this.Manager.Comment("reaching state \'S1344\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp603;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,InputBufferSizeLessThanOt" +
                            "herPlus,True,True)\'");
                    temp603 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(1)), true, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1588\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp603, "return of FsctlSisCopyFile, state S1588");
                    this.Manager.Comment("reaching state \'S1912\'");
                    goto label116;
                }
                if ((temp606 == 1)) {
                    this.Manager.Comment("reaching state \'S817\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp604;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp604 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1051\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp604, "return of CreateFile, state S1051");
                    this.Manager.Comment("reaching state \'S1345\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp605;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,InputBufferSizeLessThan" +
                            "OtherPlus,False,True)\'");
                    temp605 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(1)), false, true);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1589\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp605, "return of FsctlSisCopyFile, state S1589");
                    this.Manager.Comment("reaching state \'S1913\'");
                    goto label116;
                }
                throw new InvalidOperationException("never reached");
            label116:
;
                goto label118;
            }
            if ((temp613 == 1)) {
                this.Manager.Comment("reaching state \'S439\'");
                bool temp607;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp607);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp607);
                this.Manager.Comment("reaching state \'S591\'");
                int temp612 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS134GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS134GetObjectFunctionalityChecker3)));
                if ((temp612 == 0)) {
                    this.Manager.Comment("reaching state \'S818\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp608;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp608 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1052\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp608, "return of CreateFile, state S1052");
                    this.Manager.Comment("reaching state \'S1346\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp609;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,True,False)\'");
                    temp609 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, true, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1590\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp609, "return of FsctlSisCopyFile, state S1590");
                    this.Manager.Comment("reaching state \'S1914\'");
                    goto label117;
                }
                if ((temp612 == 1)) {
                    this.Manager.Comment("reaching state \'S819\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp610;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp610 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1053\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp610, "return of CreateFile, state S1053");
                    this.Manager.Comment("reaching state \'S1347\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp611;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,False,True)\'");
                    temp611 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4737");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] \r\n           " +
                            "         If  InputBuffer.DestinationFileNameLength is <= zero, the operation MUS" +
                            "T be failed with STATUS_INVALID_PARAMETER_3.");
                    this.Manager.Comment("reaching state \'S1591\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp611, "return of FsctlSisCopyFile, state S1591");
                    this.Manager.Comment("reaching state \'S1915\'");
                    goto label117;
                }
                throw new InvalidOperationException("never reached");
            label117:
;
                goto label118;
            }
            throw new InvalidOperationException("never reached");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS134GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S290");
        }
        
        private void IoCtlRequestTestCaseS134GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S590");
        }
        
        private void IoCtlRequestTestCaseS134GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S590");
        }
        
        private void IoCtlRequestTestCaseS134GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S290");
        }
        
        private void IoCtlRequestTestCaseS134GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S591");
        }
        
        private void IoCtlRequestTestCaseS134GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S591");
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS136() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS136");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S215\'");
            bool temp614;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp614);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp614);
            this.Manager.Comment("reaching state \'S291\'");
            int temp627 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS136GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS136GetAdministratorChecker1)));
            if ((temp627 == 0)) {
                this.Manager.Comment("reaching state \'S440\'");
                bool temp615;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp615);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp615);
                this.Manager.Comment("reaching state \'S592\'");
                int temp620 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS136GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS136GetObjectFunctionalityChecker1)));
                if ((temp620 == 0)) {
                    this.Manager.Comment("reaching state \'S820\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp616;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp616 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1054\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp616, "return of CreateFile, state S1054");
                    this.Manager.Comment("reaching state \'S1348\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp617;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,FlagsNotContainCOPYFILE" +
                            "_SIS_LINKAndCOPYFILE_SIS_REPLACE,True,False)\'");
                    temp617 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, true, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1592\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp617, "return of FsctlSisCopyFile, state S1592");
                    this.Manager.Comment("reaching state \'S1916\'");
                    goto label119;
                }
                if ((temp620 == 1)) {
                    this.Manager.Comment("reaching state \'S821\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp618;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp618 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1055\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp618, "return of CreateFile, state S1055");
                    this.Manager.Comment("reaching state \'S1349\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp619;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,True,True)\'");
                    temp619 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, true, true);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1593\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp619, "return of FsctlSisCopyFile, state S1593");
                    this.Manager.Comment("reaching state \'S1917\'");
                    goto label119;
                }
                throw new InvalidOperationException("never reached");
            label119:
;
                goto label121;
            }
            if ((temp627 == 1)) {
                this.Manager.Comment("reaching state \'S441\'");
                bool temp621;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp621);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp621);
                this.Manager.Comment("reaching state \'S593\'");
                int temp626 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS136GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS136GetObjectFunctionalityChecker3)));
                if ((temp626 == 0)) {
                    this.Manager.Comment("reaching state \'S822\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp622;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp622 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1056\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp622, "return of CreateFile, state S1056");
                    this.Manager.Comment("reaching state \'S1350\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp623;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(LessThanSI_COPYFILE,Initial,False,True)\'");
                    temp623 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSI_COPYFILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1594\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp623, "return of FsctlSisCopyFile, state S1594");
                    this.Manager.Comment("reaching state \'S1918\'");
                    goto label120;
                }
                if ((temp626 == 1)) {
                    this.Manager.Comment("reaching state \'S823\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp624;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp624 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1057\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp624, "return of CreateFile, state S1057");
                    this.Manager.Comment("reaching state \'S1351\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp625;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,InputBufferSizeLessThanOt" +
                            "herPlus,False,True)\'");
                    temp625 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(1)), false, true);
                    this.Manager.Checkpoint("MS-FSA_R4740");
                    this.Manager.Checkpoint(@"[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] 
                    If FieldOffset( InputBuffer.SourceFileName ) + InputBuffer.SourceFileNameLength + InputBuffer.DestinationFileNameLength
                    is > InputBufferSize, the operation MUST be failed with STATUS_INVALID_PARAMETER_4.");
                    this.Manager.Comment("reaching state \'S1595\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp625, "return of FsctlSisCopyFile, state S1595");
                    this.Manager.Comment("reaching state \'S1919\'");
                    goto label120;
                }
                throw new InvalidOperationException("never reached");
            label120:
;
                goto label121;
            }
            throw new InvalidOperationException("never reached");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS136GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S291");
        }
        
        private void IoCtlRequestTestCaseS136GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S592");
        }
        
        private void IoCtlRequestTestCaseS136GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S592");
        }
        
        private void IoCtlRequestTestCaseS136GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S291");
        }
        
        private void IoCtlRequestTestCaseS136GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S593");
        }
        
        private void IoCtlRequestTestCaseS136GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S593");
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS138() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS138");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S216\'");
            bool temp628;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp628);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp628);
            this.Manager.Comment("reaching state \'S292\'");
            int temp641 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS138GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS138GetAdministratorChecker1)));
            if ((temp641 == 0)) {
                this.Manager.Comment("reaching state \'S442\'");
                bool temp629;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp629);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp629);
                this.Manager.Comment("reaching state \'S594\'");
                int temp634 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS138GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS138GetObjectFunctionalityChecker1)));
                if ((temp634 == 0)) {
                    this.Manager.Comment("reaching state \'S824\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp630;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp630 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1058\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp630, "return of CreateFile, state S1058");
                    this.Manager.Comment("reaching state \'S1352\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp631;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,False,False)\'");
                    temp631 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1596\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp631, "return of FsctlSisCopyFile, state S1596");
                    this.Manager.Comment("reaching state \'S1920\'");
                    goto label122;
                }
                if ((temp634 == 1)) {
                    this.Manager.Comment("reaching state \'S825\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp632;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp632 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1059\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp632, "return of CreateFile, state S1059");
                    this.Manager.Comment("reaching state \'S1353\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp633;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,FlagsNotContainCOPYFILE_S" +
                            "IS_LINKAndCOPYFILE_SIS_REPLACE,False,True)\'");
                    temp633 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1597\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp633, "return of FsctlSisCopyFile, state S1597");
                    this.Manager.Comment("reaching state \'S1921\'");
                    goto label122;
                }
                throw new InvalidOperationException("never reached");
            label122:
;
                goto label124;
            }
            if ((temp641 == 1)) {
                this.Manager.Comment("reaching state \'S443\'");
                bool temp635;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp635);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp635);
                this.Manager.Comment("reaching state \'S595\'");
                int temp640 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS138GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS138GetObjectFunctionalityChecker3)));
                if ((temp640 == 0)) {
                    this.Manager.Comment("reaching state \'S826\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp636;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp636 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1060\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp636, "return of CreateFile, state S1060");
                    this.Manager.Comment("reaching state \'S1354\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp637;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,FlagsNotContainCOPYFILE_S" +
                            "IS_LINKAndCOPYFILE_SIS_REPLACE,False,True)\'");
                    temp637 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1598\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp637, "return of FsctlSisCopyFile, state S1598");
                    this.Manager.Comment("reaching state \'S1922\'");
                    goto label123;
                }
                if ((temp640 == 1)) {
                    this.Manager.Comment("reaching state \'S827\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp638;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp638 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1061\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp638, "return of CreateFile, state S1061");
                    this.Manager.Comment("reaching state \'S1355\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp639;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,FlagsNotContainCOPYFILE_S" +
                            "IS_LINKAndCOPYFILE_SIS_REPLACE,False,True)\'");
                    temp639 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4735");
                    this.Manager.Checkpoint(@"[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] 
                    If InputBuffer.Flags contains any flags besides COPYFILE_SIS_LINK and COPYFILE_SIS_REPLACE, 
                    the operation MUST be failed with STATUS_INVALID_PARAMETER_2.");
                    this.Manager.Comment("reaching state \'S1599\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp639, "return of FsctlSisCopyFile, state S1599");
                    this.Manager.Comment("reaching state \'S1923\'");
                    goto label123;
                }
                throw new InvalidOperationException("never reached");
            label123:
;
                goto label124;
            }
            throw new InvalidOperationException("never reached");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS138GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S292");
        }
        
        private void IoCtlRequestTestCaseS138GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S594");
        }
        
        private void IoCtlRequestTestCaseS138GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S594");
        }
        
        private void IoCtlRequestTestCaseS138GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S292");
        }
        
        private void IoCtlRequestTestCaseS138GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S595");
        }
        
        private void IoCtlRequestTestCaseS138GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S595");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS14() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S149\'");
            bool temp642;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp642);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp642);
            this.Manager.Comment("reaching state \'S225\'");
            int temp735 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS14GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS14GetIfNtfsFileSystemChecker1)));
            if ((temp735 == 0)) {
                this.Manager.Comment("reaching state \'S308\'");
                bool temp643;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp643);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp643);
                this.Manager.Comment("reaching state \'S460\'");
                int temp688 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS14GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS14GetObjectFunctionalityChecker1)));
                if ((temp688 == 0)) {
                    this.Manager.Comment("reaching state \'S626\'");
                    bool temp644;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp644);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp644);
                    this.Manager.Comment("reaching state \'S860\'");
                    int temp665 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker1)));
                    if ((temp665 == 0)) {
                        this.Manager.Comment("reaching state \'S1122\'");
                        bool temp645;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp645);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp645);
                        this.Manager.Comment("reaching state \'S1416\'");
                        int temp654 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp654 == 0)) {
                            this.Manager.Comment("reaching state \'S1716\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp646;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp646 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2040\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp646, "return of CreateFile, state S2040");
                            this.Manager.Comment("reaching state \'S2260\'");
                            bool temp647;
                            bool temp648;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp649;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp649 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp647, out temp648);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2480\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp647, "isBytesReturnedSet of FsCtlForEasyRequest, state S2480");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp648, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2480");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp649, "return of FsCtlForEasyRequest, state S2480");
                            this.Manager.Comment("reaching state \'S2640\'");
                            goto label125;
                        }
                        if ((temp654 == 1)) {
                            this.Manager.Comment("reaching state \'S1717\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp650;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp650 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2041\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp650, "return of CreateFile, state S2041");
                            this.Manager.Comment("reaching state \'S2261\'");
                            bool temp651;
                            bool temp652;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp653;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp653 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp651, out temp652);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2481\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp651, "isBytesReturnedSet of FsCtlForEasyRequest, state S2481");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp652, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2481");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp653, "return of FsCtlForEasyRequest, state S2481");
                            this.Manager.Comment("reaching state \'S2641\'");
                            goto label125;
                        }
                        throw new InvalidOperationException("never reached");
                    label125:
;
                        goto label127;
                    }
                    if ((temp665 == 1)) {
                        this.Manager.Comment("reaching state \'S1123\'");
                        bool temp655;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp655);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp655);
                        this.Manager.Comment("reaching state \'S1417\'");
                        int temp664 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp664 == 0)) {
                            this.Manager.Comment("reaching state \'S1718\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp656;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp656 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2042\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp656, "return of CreateFile, state S2042");
                            this.Manager.Comment("reaching state \'S2262\'");
                            bool temp657;
                            bool temp658;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp659;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp659 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp657, out temp658);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2482\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp657, "isBytesReturnedSet of FsCtlForEasyRequest, state S2482");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp658, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2482");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp659, "return of FsCtlForEasyRequest, state S2482");
                            this.Manager.Comment("reaching state \'S2642\'");
                            goto label126;
                        }
                        if ((temp664 == 1)) {
                            this.Manager.Comment("reaching state \'S1719\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp660;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp660 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2043\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp660, "return of CreateFile, state S2043");
                            this.Manager.Comment("reaching state \'S2263\'");
                            bool temp661;
                            bool temp662;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp663;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,BufferSizeSuccess," +
                                    "out _,out _)\'");
                            temp663 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp661, out temp662);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2483\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp661, "isBytesReturnedSet of FsCtlForEasyRequest, state S2483");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp662, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2483");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp663, "return of FsCtlForEasyRequest, state S2483");
                            this.Manager.Comment("reaching state \'S2643\'");
                            goto label126;
                        }
                        throw new InvalidOperationException("never reached");
                    label126:
;
                        goto label127;
                    }
                    throw new InvalidOperationException("never reached");
                label127:
;
                    goto label131;
                }
                if ((temp688 == 1)) {
                    this.Manager.Comment("reaching state \'S627\'");
                    bool temp666;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp666);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp666);
                    this.Manager.Comment("reaching state \'S861\'");
                    int temp687 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker3)));
                    if ((temp687 == 0)) {
                        this.Manager.Comment("reaching state \'S1124\'");
                        bool temp667;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp667);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp667);
                        this.Manager.Comment("reaching state \'S1418\'");
                        int temp676 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp676 == 0)) {
                            this.Manager.Comment("reaching state \'S1720\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp668;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp668 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2044\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp668, "return of CreateFile, state S2044");
                            this.Manager.Comment("reaching state \'S2264\'");
                            bool temp669;
                            bool temp670;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp671;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp671 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp669, out temp670);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2484\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp669, "isBytesReturnedSet of FsCtlForEasyRequest, state S2484");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp670, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2484");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp671, "return of FsCtlForEasyRequest, state S2484");
                            this.Manager.Comment("reaching state \'S2644\'");
                            goto label128;
                        }
                        if ((temp676 == 1)) {
                            this.Manager.Comment("reaching state \'S1721\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp672;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp672 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2045\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp672, "return of CreateFile, state S2045");
                            this.Manager.Comment("reaching state \'S2265\'");
                            bool temp673;
                            bool temp674;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp675;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp675 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp673, out temp674);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2485\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp673, "isBytesReturnedSet of FsCtlForEasyRequest, state S2485");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp674, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2485");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp675, "return of FsCtlForEasyRequest, state S2485");
                            this.Manager.Comment("reaching state \'S2645\'");
                            goto label128;
                        }
                        throw new InvalidOperationException("never reached");
                    label128:
;
                        goto label130;
                    }
                    if ((temp687 == 1)) {
                        this.Manager.Comment("reaching state \'S1125\'");
                        bool temp677;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp677);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp677);
                        this.Manager.Comment("reaching state \'S1419\'");
                        int temp686 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp686 == 0)) {
                            this.Manager.Comment("reaching state \'S1722\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp678;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp678 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2046\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp678, "return of CreateFile, state S2046");
                            this.Manager.Comment("reaching state \'S2266\'");
                            bool temp679;
                            bool temp680;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp681;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp681 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp679, out temp680);
                            this.Manager.Checkpoint("MS-FSA_R3962");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                              If Open.File.Volume.IsUsnJournalActive is FALSE, t" +
                                    "he operation MUST be failed with STATUS_JOURNAL_NOT_ACTIVE.");
                            this.Manager.Comment("reaching state \'S2486\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:JOURNAL_NOT_ACTIV" +
                                    "E\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp679, "isBytesReturnedSet of FsCtlForEasyRequest, state S2486");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp680, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2486");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.JOURNAL_NOT_ACTIVE, temp681, "return of FsCtlForEasyRequest, state S2486");
                            this.Manager.Comment("reaching state \'S2646\'");
                            goto label129;
                        }
                        if ((temp686 == 1)) {
                            this.Manager.Comment("reaching state \'S1723\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp682;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp682 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2047\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp682, "return of CreateFile, state S2047");
                            this.Manager.Comment("reaching state \'S2267\'");
                            bool temp683;
                            bool temp684;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp685;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,BufferSizeSucc" +
                                    "ess,out _,out _)\'");
                            temp685 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp683, out temp684);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2487\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp683, "isBytesReturnedSet of FsCtlForEasyRequest, state S2487");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp684, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2487");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp685, "return of FsCtlForEasyRequest, state S2487");
                            this.Manager.Comment("reaching state \'S2647\'");
                            goto label129;
                        }
                        throw new InvalidOperationException("never reached");
                    label129:
;
                        goto label130;
                    }
                    throw new InvalidOperationException("never reached");
                label130:
;
                    goto label131;
                }
                throw new InvalidOperationException("never reached");
            label131:
;
                goto label139;
            }
            if ((temp735 == 1)) {
                this.Manager.Comment("reaching state \'S309\'");
                bool temp689;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp689);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp689);
                this.Manager.Comment("reaching state \'S461\'");
                int temp734 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS14GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS14GetObjectFunctionalityChecker3)));
                if ((temp734 == 0)) {
                    this.Manager.Comment("reaching state \'S628\'");
                    bool temp690;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp690);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp690);
                    this.Manager.Comment("reaching state \'S862\'");
                    int temp711 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker5)));
                    if ((temp711 == 0)) {
                        this.Manager.Comment("reaching state \'S1126\'");
                        bool temp691;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp691);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp691);
                        this.Manager.Comment("reaching state \'S1420\'");
                        int temp700 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp700 == 0)) {
                            this.Manager.Comment("reaching state \'S1724\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp692;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp692 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2048\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp692, "return of CreateFile, state S2048");
                            this.Manager.Comment("reaching state \'S2268\'");
                            bool temp693;
                            bool temp694;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp695;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp695 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp693, out temp694);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2488\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp693, "isBytesReturnedSet of FsCtlForEasyRequest, state S2488");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp694, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2488");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp695, "return of FsCtlForEasyRequest, state S2488");
                            this.Manager.Comment("reaching state \'S2648\'");
                            goto label132;
                        }
                        if ((temp700 == 1)) {
                            this.Manager.Comment("reaching state \'S1725\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp696;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp696 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2049\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp696, "return of CreateFile, state S2049");
                            this.Manager.Comment("reaching state \'S2269\'");
                            bool temp697;
                            bool temp698;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp699;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_SET_SHORT_NAME_BEHAVIOR,BufferSize" +
                                    "Success,out _,out _)\'");
                            temp699 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_SET_SHORT_NAME_BEHAVIOR, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp697, out temp698);
                            this.Manager.Checkpoint("[2.1.5.9.34   FSCTL_SET_SHORT_NAME_BEHAVIOR]\r\n                                Thi" +
                                    "s control code is reserved for the WinPE <95> environment; the object store MUST" +
                                    " return STATUS_INVALID_DEVICE_REQUEST.");
                            this.Manager.Comment("reaching state \'S2489\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp697, "isBytesReturnedSet of FsCtlForEasyRequest, state S2489");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp698, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2489");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp699, "return of FsCtlForEasyRequest, state S2489");
                            this.Manager.Comment("reaching state \'S2649\'");
                            goto label132;
                        }
                        throw new InvalidOperationException("never reached");
                    label132:
;
                        goto label134;
                    }
                    if ((temp711 == 1)) {
                        this.Manager.Comment("reaching state \'S1127\'");
                        bool temp701;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp701);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp701);
                        this.Manager.Comment("reaching state \'S1421\'");
                        int temp710 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp710 == 0)) {
                            this.Manager.Comment("reaching state \'S1726\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp702;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp702 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2050\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp702, "return of CreateFile, state S2050");
                            this.Manager.Comment("reaching state \'S2270\'");
                            bool temp703;
                            bool temp704;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp705;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp705 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp703, out temp704);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2490\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp703, "isBytesReturnedSet of FsCtlForEasyRequest, state S2490");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp704, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2490");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp705, "return of FsCtlForEasyRequest, state S2490");
                            this.Manager.Comment("reaching state \'S2650\'");
                            goto label133;
                        }
                        if ((temp710 == 1)) {
                            this.Manager.Comment("reaching state \'S1727\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp706;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp706 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2051\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp706, "return of CreateFile, state S2051");
                            this.Manager.Comment("reaching state \'S2271\'");
                            bool temp707;
                            bool temp708;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp709;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp709 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp707, out temp708);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2491\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp707, "isBytesReturnedSet of FsCtlForEasyRequest, state S2491");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp708, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2491");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp709, "return of FsCtlForEasyRequest, state S2491");
                            this.Manager.Comment("reaching state \'S2651\'");
                            goto label133;
                        }
                        throw new InvalidOperationException("never reached");
                    label133:
;
                        goto label134;
                    }
                    throw new InvalidOperationException("never reached");
                label134:
;
                    goto label138;
                }
                if ((temp734 == 1)) {
                    this.Manager.Comment("reaching state \'S629\'");
                    bool temp712;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp712);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp712);
                    this.Manager.Comment("reaching state \'S863\'");
                    int temp733 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker7)));
                    if ((temp733 == 0)) {
                        this.Manager.Comment("reaching state \'S1128\'");
                        bool temp713;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp713);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp713);
                        this.Manager.Comment("reaching state \'S1422\'");
                        int temp722 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp722 == 0)) {
                            this.Manager.Comment("reaching state \'S1728\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp714;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp714 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2052\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp714, "return of CreateFile, state S2052");
                            this.Manager.Comment("reaching state \'S2272\'");
                            bool temp715;
                            bool temp716;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp717;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp717 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp715, out temp716);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2492\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp715, "isBytesReturnedSet of FsCtlForEasyRequest, state S2492");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp716, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2492");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp717, "return of FsCtlForEasyRequest, state S2492");
                            this.Manager.Comment("reaching state \'S2652\'");
                            goto label135;
                        }
                        if ((temp722 == 1)) {
                            this.Manager.Comment("reaching state \'S1729\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp718;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp718 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2053\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp718, "return of CreateFile, state S2053");
                            this.Manager.Comment("reaching state \'S2273\'");
                            bool temp719;
                            bool temp720;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp721;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp721 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp719, out temp720);
                            this.Manager.Checkpoint("MS-FSA_R5033");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:BytesReturned set to sizeof( NTFS_VOLUME_DATA_BUFFER ).");
                            this.Manager.Checkpoint("MS-FSA_R5012");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] On completion, the object store MUST return:\r\n   " +
                                    "                         [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R5034");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2493\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp719, "isBytesReturnedSet of FsCtlForEasyRequest, state S2493");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp720, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2493");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp721, "return of FsCtlForEasyRequest, state S2493");
                            this.Manager.Comment("reaching state \'S2653\'");
                            goto label135;
                        }
                        throw new InvalidOperationException("never reached");
                    label135:
;
                        goto label137;
                    }
                    if ((temp733 == 1)) {
                        this.Manager.Comment("reaching state \'S1129\'");
                        bool temp723;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp723);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp723);
                        this.Manager.Comment("reaching state \'S1423\'");
                        int temp732 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp732 == 0)) {
                            this.Manager.Comment("reaching state \'S1730\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp724;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp724 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2054\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp724, "return of CreateFile, state S2054");
                            this.Manager.Comment("reaching state \'S2274\'");
                            bool temp725;
                            bool temp726;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp727;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp727 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp725, out temp726);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2494\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp725, "isBytesReturnedSet of FsCtlForEasyRequest, state S2494");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp726, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2494");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp727, "return of FsCtlForEasyRequest, state S2494");
                            this.Manager.Comment("reaching state \'S2654\'");
                            goto label136;
                        }
                        if ((temp732 == 1)) {
                            this.Manager.Comment("reaching state \'S1731\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp728;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp728 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2055\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp728, "return of CreateFile, state S2055");
                            this.Manager.Comment("reaching state \'S2275\'");
                            bool temp729;
                            bool temp730;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp731;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp731 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp729, out temp730);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2495\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp729, "isBytesReturnedSet of FsCtlForEasyRequest, state S2495");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp730, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2495");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp731, "return of FsCtlForEasyRequest, state S2495");
                            this.Manager.Comment("reaching state \'S2655\'");
                            goto label136;
                        }
                        throw new InvalidOperationException("never reached");
                    label136:
;
                        goto label137;
                    }
                    throw new InvalidOperationException("never reached");
                label137:
;
                    goto label138;
                }
                throw new InvalidOperationException("never reached");
            label138:
;
                goto label139;
            }
            throw new InvalidOperationException("never reached");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS14GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S225");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S460");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S860");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1416");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1416");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S860");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1417");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1417");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S460");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S861");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1418");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1418");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S861");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1419");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1419");
        }
        
        private void IoCtlRequestTestCaseS14GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S225");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S461");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S862");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1420");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1420");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S862");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1421");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1421");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S461");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S863");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1422");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1422");
        }
        
        private void IoCtlRequestTestCaseS14GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S863");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1423");
        }
        
        private void IoCtlRequestTestCaseS14GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1423");
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS140() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS140");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S217\'");
            bool temp736;
            this.Manager.Comment("executing step \'call GetAdministrator(out _)\'");
            this.IFSAAdapterInstance.GetAdministrator(out temp736);
            this.Manager.AddReturn(GetAdministratorInfo, null, temp736);
            this.Manager.Comment("reaching state \'S293\'");
            int temp749 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS140GetAdministratorChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetAdministratorInfo, null, new GetAdministratorDelegate1(this.IoCtlRequestTestCaseS140GetAdministratorChecker1)));
            if ((temp749 == 0)) {
                this.Manager.Comment("reaching state \'S444\'");
                bool temp737;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp737);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp737);
                this.Manager.Comment("reaching state \'S596\'");
                int temp742 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS140GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS140GetObjectFunctionalityChecker1)));
                if ((temp742 == 0)) {
                    this.Manager.Comment("reaching state \'S828\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp738;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp738 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1062\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp738, "return of CreateFile, state S1062");
                    this.Manager.Comment("reaching state \'S1356\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp739;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,DestinationFileNameLength" +
                            "LessThanZero,False,False)\'");
                    temp739 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.DestinationFileNameLengthLessThanZero, false, false);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1600\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp739, "return of FsctlSisCopyFile, state S1600");
                    this.Manager.Comment("reaching state \'S1924\'");
                    goto label140;
                }
                if ((temp742 == 1)) {
                    this.Manager.Comment("reaching state \'S829\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp740;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp740 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1063\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp740, "return of CreateFile, state S1063");
                    this.Manager.Comment("reaching state \'S1357\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp741;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,FlagsNotContainCOPYFILE_S" +
                            "IS_LINKAndCOPYFILE_SIS_REPLACE,False,True)\'");
                    temp741 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE.FlagsNotContainCOPYFILE_SIS_LINKAndCOPYFILE_SIS_REPLACE, false, true);
                    this.Manager.Checkpoint("MS-FSA_R4733");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] Pseudocode for the operation is as follows:\r\n            " +
                            "        If Open.IsAdministrator is FALSE, the operation MUST be failed with STAT" +
                            "US_ACCESS_DEFINED");
                    this.Manager.Comment("reaching state \'S1601\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp741, "return of FsctlSisCopyFile, state S1601");
                    this.Manager.Comment("reaching state \'S1925\'");
                    goto label140;
                }
                throw new InvalidOperationException("never reached");
            label140:
;
                goto label142;
            }
            if ((temp749 == 1)) {
                this.Manager.Comment("reaching state \'S445\'");
                bool temp743;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp743);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp743);
                this.Manager.Comment("reaching state \'S597\'");
                int temp748 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS140GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS140GetObjectFunctionalityChecker3)));
                if ((temp748 == 0)) {
                    this.Manager.Comment("reaching state \'S830\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp744;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp744 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1064\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp744, "return of CreateFile, state S1064");
                    this.Manager.Comment("reaching state \'S1358\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp745;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,True,True)\'");
                    temp745 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), true, true);
                    this.Manager.Checkpoint("MS-FSA_R4732");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] If the object store does not implement this functionality" +
                            ", \r\n                    the operation MUST be failed with STATUS_INVALID_DEVICE_" +
                            "REQUEST.");
                    this.Manager.Comment("reaching state \'S1602\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp745, "return of FsctlSisCopyFile, state S1602");
                    this.Manager.Comment("reaching state \'S1926\'");
                    goto label141;
                }
                if ((temp748 == 1)) {
                    this.Manager.Comment("reaching state \'S831\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp746;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp746 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1065\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp746, "return of CreateFile, state S1065");
                    this.Manager.Comment("reaching state \'S1359\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp747;
                    this.Manager.Comment("executing step \'call FsctlSisCopyFile(BufferSizeSuccess,Initial,False,False)\'");
                    temp747 = this.IFSAAdapterInstance.FsctlSisCopyFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFSCTL_SIS_COPYFILE)(0)), false, false);
                    this.Manager.Checkpoint("MS-FSA_R4726");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE] On completion, the object store MUST return:Status: \r\n   " +
                            "             An NTSTATUS code that specifies the result.");
                    this.Manager.Checkpoint("MS-FSA_R4752");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] \r\n           " +
                            "     If the request fails, this operation MUST be failed with the returned STATU" +
                            "S.");
                    this.Manager.Checkpoint("MS-FSA_R4769");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:] \r\n           " +
                            "     If the request fails, this operation MUST be failed with the returned STATU" +
                            "S.");
                    this.Manager.Checkpoint("MS-FSA_R4773");
                    this.Manager.Checkpoint("[In FSCTL_SIS_COPYFILE,Pseudocode for the operation is as follows:\r\n             " +
                            "   The operation MUST be failed with STATUS_OBJECT_TYPE_MISMATCH under any of th" +
                            "e following conditions:] \r\n                If SourceOpen.Stream.IsEncrypted is T" +
                            "RUE.");
                    this.Manager.Comment("reaching state \'S1603\'");
                    this.Manager.Comment("checking step \'return FsctlSisCopyFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp747, "return of FsctlSisCopyFile, state S1603");
                    this.Manager.Comment("reaching state \'S1927\'");
                    goto label141;
                }
                throw new InvalidOperationException("never reached");
            label141:
;
                goto label142;
            }
            throw new InvalidOperationException("never reached");
        label142:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS140GetAdministratorChecker(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isGet, "isGet of GetAdministrator, state S293");
        }
        
        private void IoCtlRequestTestCaseS140GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S596");
        }
        
        private void IoCtlRequestTestCaseS140GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S596");
        }
        
        private void IoCtlRequestTestCaseS140GetAdministratorChecker1(bool isGet) {
            this.Manager.Comment("checking step \'return GetAdministrator/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isGet, "isGet of GetAdministrator, state S293");
        }
        
        private void IoCtlRequestTestCaseS140GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S597");
        }
        
        private void IoCtlRequestTestCaseS140GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S597");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS16() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S150\'");
            bool temp750;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp750);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp750);
            this.Manager.Comment("reaching state \'S226\'");
            int temp843 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS16GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS16GetIfNtfsFileSystemChecker1)));
            if ((temp843 == 0)) {
                this.Manager.Comment("reaching state \'S310\'");
                bool temp751;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp751);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp751);
                this.Manager.Comment("reaching state \'S462\'");
                int temp796 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS16GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS16GetObjectFunctionalityChecker1)));
                if ((temp796 == 0)) {
                    this.Manager.Comment("reaching state \'S630\'");
                    bool temp752;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp752);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp752);
                    this.Manager.Comment("reaching state \'S864\'");
                    int temp773 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker1)));
                    if ((temp773 == 0)) {
                        this.Manager.Comment("reaching state \'S1130\'");
                        bool temp753;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp753);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp753);
                        this.Manager.Comment("reaching state \'S1424\'");
                        int temp762 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp762 == 0)) {
                            this.Manager.Comment("reaching state \'S1732\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp754;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp754 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2056\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp754, "return of CreateFile, state S2056");
                            this.Manager.Comment("reaching state \'S2276\'");
                            bool temp755;
                            bool temp756;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp757;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp757 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp755, out temp756);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2496\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp755, "isBytesReturnedSet of FsCtlForEasyRequest, state S2496");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp756, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2496");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp757, "return of FsCtlForEasyRequest, state S2496");
                            this.Manager.Comment("reaching state \'S2656\'");
                            goto label143;
                        }
                        if ((temp762 == 1)) {
                            this.Manager.Comment("reaching state \'S1733\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp758;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp758 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2057\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp758, "return of CreateFile, state S2057");
                            this.Manager.Comment("reaching state \'S2277\'");
                            bool temp759;
                            bool temp760;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp761;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp761 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp759, out temp760);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2497\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp759, "isBytesReturnedSet of FsCtlForEasyRequest, state S2497");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp760, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2497");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp761, "return of FsCtlForEasyRequest, state S2497");
                            this.Manager.Comment("reaching state \'S2657\'");
                            goto label143;
                        }
                        throw new InvalidOperationException("never reached");
                    label143:
;
                        goto label145;
                    }
                    if ((temp773 == 1)) {
                        this.Manager.Comment("reaching state \'S1131\'");
                        bool temp763;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp763);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp763);
                        this.Manager.Comment("reaching state \'S1425\'");
                        int temp772 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp772 == 0)) {
                            this.Manager.Comment("reaching state \'S1734\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp764;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp764 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2058\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp764, "return of CreateFile, state S2058");
                            this.Manager.Comment("reaching state \'S2278\'");
                            bool temp765;
                            bool temp766;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp767;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp767 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp765, out temp766);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2498\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp765, "isBytesReturnedSet of FsCtlForEasyRequest, state S2498");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp766, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2498");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp767, "return of FsCtlForEasyRequest, state S2498");
                            this.Manager.Comment("reaching state \'S2658\'");
                            goto label144;
                        }
                        if ((temp772 == 1)) {
                            this.Manager.Comment("reaching state \'S1735\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp768;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp768 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2059\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp768, "return of CreateFile, state S2059");
                            this.Manager.Comment("reaching state \'S2279\'");
                            bool temp769;
                            bool temp770;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp771;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp771 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp769, out temp770);
                            this.Manager.Checkpoint("MS-FSA_R5017");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] \r\n                                If the object s" +
                                    "tore does not implement this functionality, the operation MUST be failed with ST" +
                                    "ATUS_INVALID_DEVICE_REQUEST.<27>");
                            this.Manager.Comment("reaching state \'S2499\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp769, "isBytesReturnedSet of FsCtlForEasyRequest, state S2499");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp770, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2499");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp771, "return of FsCtlForEasyRequest, state S2499");
                            this.Manager.Comment("reaching state \'S2659\'");
                            goto label144;
                        }
                        throw new InvalidOperationException("never reached");
                    label144:
;
                        goto label145;
                    }
                    throw new InvalidOperationException("never reached");
                label145:
;
                    goto label149;
                }
                if ((temp796 == 1)) {
                    this.Manager.Comment("reaching state \'S631\'");
                    bool temp774;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp774);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp774);
                    this.Manager.Comment("reaching state \'S865\'");
                    int temp795 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker3)));
                    if ((temp795 == 0)) {
                        this.Manager.Comment("reaching state \'S1132\'");
                        bool temp775;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp775);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp775);
                        this.Manager.Comment("reaching state \'S1426\'");
                        int temp784 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp784 == 0)) {
                            this.Manager.Comment("reaching state \'S1736\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp776;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp776 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2060\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp776, "return of CreateFile, state S2060");
                            this.Manager.Comment("reaching state \'S2280\'");
                            bool temp777;
                            bool temp778;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp779;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp779 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp777, out temp778);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2500\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp777, "isBytesReturnedSet of FsCtlForEasyRequest, state S2500");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp778, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2500");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp779, "return of FsCtlForEasyRequest, state S2500");
                            this.Manager.Comment("reaching state \'S2660\'");
                            goto label146;
                        }
                        if ((temp784 == 1)) {
                            this.Manager.Comment("reaching state \'S1737\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp780;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp780 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2061\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp780, "return of CreateFile, state S2061");
                            this.Manager.Comment("reaching state \'S2281\'");
                            bool temp781;
                            bool temp782;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp783;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp783 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp781, out temp782);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2501\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp781, "isBytesReturnedSet of FsCtlForEasyRequest, state S2501");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp782, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2501");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp783, "return of FsCtlForEasyRequest, state S2501");
                            this.Manager.Comment("reaching state \'S2661\'");
                            goto label146;
                        }
                        throw new InvalidOperationException("never reached");
                    label146:
;
                        goto label148;
                    }
                    if ((temp795 == 1)) {
                        this.Manager.Comment("reaching state \'S1133\'");
                        bool temp785;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp785);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp785);
                        this.Manager.Comment("reaching state \'S1427\'");
                        int temp794 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp794 == 0)) {
                            this.Manager.Comment("reaching state \'S1738\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp786;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp786 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2062\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp786, "return of CreateFile, state S2062");
                            this.Manager.Comment("reaching state \'S2282\'");
                            bool temp787;
                            bool temp788;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp789;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp789 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp787, out temp788);
                            this.Manager.Checkpoint("MS-FSA_R5017");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] \r\n                                If the object s" +
                                    "tore does not implement this functionality, the operation MUST be failed with ST" +
                                    "ATUS_INVALID_DEVICE_REQUEST.<27>");
                            this.Manager.Comment("reaching state \'S2502\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp787, "isBytesReturnedSet of FsCtlForEasyRequest, state S2502");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp788, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2502");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp789, "return of FsCtlForEasyRequest, state S2502");
                            this.Manager.Comment("reaching state \'S2662\'");
                            goto label147;
                        }
                        if ((temp794 == 1)) {
                            this.Manager.Comment("reaching state \'S1739\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp790;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp790 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2063\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp790, "return of CreateFile, state S2063");
                            this.Manager.Comment("reaching state \'S2283\'");
                            bool temp791;
                            bool temp792;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp793;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp793 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp791, out temp792);
                            this.Manager.Checkpoint("MS-FSA_R1009");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]\r" +
                                    "\n                            Upon successful completion of the operation, the ob" +
                                    "ject store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                            this.Manager.Checkpoint("MS-FSA_R999");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS]On completion, \r\n                            " +
                                    "the object store MUST return:[Status,OutputBuffer,BytesReturned ].");
                            this.Manager.Checkpoint("MS-FSA_R1008");
                            this.Manager.Checkpoint(@"[In FSCTL_FILESYSTEM_GET_STATISTICS,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of total number
                            of bytes of statistical information returned.");
                            this.Manager.Comment("reaching state \'S2503\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp791, "isBytesReturnedSet of FsCtlForEasyRequest, state S2503");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp792, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2503");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp793, "return of FsCtlForEasyRequest, state S2503");
                            this.Manager.Comment("reaching state \'S2663\'");
                            goto label147;
                        }
                        throw new InvalidOperationException("never reached");
                    label147:
;
                        goto label148;
                    }
                    throw new InvalidOperationException("never reached");
                label148:
;
                    goto label149;
                }
                throw new InvalidOperationException("never reached");
            label149:
;
                goto label157;
            }
            if ((temp843 == 1)) {
                this.Manager.Comment("reaching state \'S311\'");
                bool temp797;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp797);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp797);
                this.Manager.Comment("reaching state \'S463\'");
                int temp842 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS16GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS16GetObjectFunctionalityChecker3)));
                if ((temp842 == 0)) {
                    this.Manager.Comment("reaching state \'S632\'");
                    bool temp798;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp798);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp798);
                    this.Manager.Comment("reaching state \'S866\'");
                    int temp819 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker5)));
                    if ((temp819 == 0)) {
                        this.Manager.Comment("reaching state \'S1134\'");
                        bool temp799;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp799);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp799);
                        this.Manager.Comment("reaching state \'S1428\'");
                        int temp808 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp808 == 0)) {
                            this.Manager.Comment("reaching state \'S1740\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp800;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp800 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2064\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp800, "return of CreateFile, state S2064");
                            this.Manager.Comment("reaching state \'S2284\'");
                            bool temp801;
                            bool temp802;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp803;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp803 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp801, out temp802);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2504\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp801, "isBytesReturnedSet of FsCtlForEasyRequest, state S2504");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp802, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2504");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp803, "return of FsCtlForEasyRequest, state S2504");
                            this.Manager.Comment("reaching state \'S2664\'");
                            goto label150;
                        }
                        if ((temp808 == 1)) {
                            this.Manager.Comment("reaching state \'S1741\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp804;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp804 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2065\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp804, "return of CreateFile, state S2065");
                            this.Manager.Comment("reaching state \'S2285\'");
                            bool temp805;
                            bool temp806;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp807;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp807 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp805, out temp806);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2505\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp805, "isBytesReturnedSet of FsCtlForEasyRequest, state S2505");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp806, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2505");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp807, "return of FsCtlForEasyRequest, state S2505");
                            this.Manager.Comment("reaching state \'S2665\'");
                            goto label150;
                        }
                        throw new InvalidOperationException("never reached");
                    label150:
;
                        goto label152;
                    }
                    if ((temp819 == 1)) {
                        this.Manager.Comment("reaching state \'S1135\'");
                        bool temp809;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp809);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp809);
                        this.Manager.Comment("reaching state \'S1429\'");
                        int temp818 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp818 == 0)) {
                            this.Manager.Comment("reaching state \'S1742\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp810;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp810 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2066\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp810, "return of CreateFile, state S2066");
                            this.Manager.Comment("reaching state \'S2286\'");
                            bool temp811;
                            bool temp812;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp813;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,BufferSizeSuccess,o" +
                                    "ut _,out _)\'");
                            temp813 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp811, out temp812);
                            this.Manager.Checkpoint("MS-FSA_R5033");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:BytesReturned set to sizeof( NTFS_VOLUME_DATA_BUFFER ).");
                            this.Manager.Checkpoint("MS-FSA_R5012");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] On completion, the object store MUST return:\r\n   " +
                                    "                         [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R5034");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA,Pseudocode for the operation is as follows:] \r\n   " +
                                    "                         Upon successful completion of the operation, the object" +
                                    " store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2506\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp811, "isBytesReturnedSet of FsCtlForEasyRequest, state S2506");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp812, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2506");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp813, "return of FsCtlForEasyRequest, state S2506");
                            this.Manager.Comment("reaching state \'S2666\'");
                            goto label151;
                        }
                        if ((temp818 == 1)) {
                            this.Manager.Comment("reaching state \'S1743\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp814;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp814 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2067\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp814, "return of CreateFile, state S2067");
                            this.Manager.Comment("reaching state \'S2287\'");
                            bool temp815;
                            bool temp816;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp817;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp817 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp815, out temp816);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2507\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp815, "isBytesReturnedSet of FsCtlForEasyRequest, state S2507");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp816, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2507");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp817, "return of FsCtlForEasyRequest, state S2507");
                            this.Manager.Comment("reaching state \'S2667\'");
                            goto label151;
                        }
                        throw new InvalidOperationException("never reached");
                    label151:
;
                        goto label152;
                    }
                    throw new InvalidOperationException("never reached");
                label152:
;
                    goto label156;
                }
                if ((temp842 == 1)) {
                    this.Manager.Comment("reaching state \'S633\'");
                    bool temp820;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp820);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp820);
                    this.Manager.Comment("reaching state \'S867\'");
                    int temp841 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker7)));
                    if ((temp841 == 0)) {
                        this.Manager.Comment("reaching state \'S1136\'");
                        bool temp821;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp821);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp821);
                        this.Manager.Comment("reaching state \'S1430\'");
                        int temp830 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp830 == 0)) {
                            this.Manager.Comment("reaching state \'S1744\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp822;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp822 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2068\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp822, "return of CreateFile, state S2068");
                            this.Manager.Comment("reaching state \'S2288\'");
                            bool temp823;
                            bool temp824;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp825;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp825 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp823, out temp824);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2508\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp823, "isBytesReturnedSet of FsCtlForEasyRequest, state S2508");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp824, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2508");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp825, "return of FsCtlForEasyRequest, state S2508");
                            this.Manager.Comment("reaching state \'S2668\'");
                            goto label153;
                        }
                        if ((temp830 == 1)) {
                            this.Manager.Comment("reaching state \'S1745\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp826;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp826 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2069\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp826, "return of CreateFile, state S2069");
                            this.Manager.Comment("reaching state \'S2289\'");
                            bool temp827;
                            bool temp828;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp829;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,BufferSizeSuccess," +
                                    "out _,out _)\'");
                            temp829 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp827, out temp828);
                            this.Manager.Checkpoint("MS-FSA_R1051");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Upon successful completion of the operation, \r\n        " +
                                    "                    the object store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1039");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]On completion, the object store MUST return:[Status,Out" +
                                    "putBuffer ,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R4037");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION,Pseudocode for the operation is as follows:]\r\n         " +
                                    "                   Upon successful completion of the operation, the object store" +
                                    " MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Checkpoint("MS-FSA_R1050");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION,Pseudocode for the operation is as follows:]\r\n         " +
                                    "                   Upon successful completion of the operation, the object store" +
                                    " MUST return:BytesReturned set to sizeof( USHORT ) (2 bytes).");
                            this.Manager.Comment("reaching state \'S2509\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp827, "isBytesReturnedSet of FsCtlForEasyRequest, state S2509");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp828, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2509");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp829, "return of FsCtlForEasyRequest, state S2509");
                            this.Manager.Comment("reaching state \'S2669\'");
                            goto label153;
                        }
                        throw new InvalidOperationException("never reached");
                    label153:
;
                        goto label155;
                    }
                    if ((temp841 == 1)) {
                        this.Manager.Comment("reaching state \'S1137\'");
                        bool temp831;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp831);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp831);
                        this.Manager.Comment("reaching state \'S1431\'");
                        int temp840 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp840 == 0)) {
                            this.Manager.Comment("reaching state \'S1746\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp832;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp832 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2070\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp832, "return of CreateFile, state S2070");
                            this.Manager.Comment("reaching state \'S2290\'");
                            bool temp833;
                            bool temp834;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp835;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp835 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp833, out temp834);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2510\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp833, "isBytesReturnedSet of FsCtlForEasyRequest, state S2510");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp834, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2510");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp835, "return of FsCtlForEasyRequest, state S2510");
                            this.Manager.Comment("reaching state \'S2670\'");
                            goto label154;
                        }
                        if ((temp840 == 1)) {
                            this.Manager.Comment("reaching state \'S1747\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp836;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp836 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2071\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp836, "return of CreateFile, state S2071");
                            this.Manager.Comment("reaching state \'S2291\'");
                            bool temp837;
                            bool temp838;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp839;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,BufferSizeSuccess,out _,ou" +
                                    "t _)\'");
                            temp839 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp837, out temp838);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2511\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp837, "isBytesReturnedSet of FsCtlForEasyRequest, state S2511");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp838, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2511");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp839, "return of FsCtlForEasyRequest, state S2511");
                            this.Manager.Comment("reaching state \'S2671\'");
                            goto label154;
                        }
                        throw new InvalidOperationException("never reached");
                    label154:
;
                        goto label155;
                    }
                    throw new InvalidOperationException("never reached");
                label155:
;
                    goto label156;
                }
                throw new InvalidOperationException("never reached");
            label156:
;
                goto label157;
            }
            throw new InvalidOperationException("never reached");
        label157:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS16GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S226");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S462");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S864");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1424");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1424");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S864");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1425");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1425");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S462");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S865");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1426");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1426");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S865");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1427");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1427");
        }
        
        private void IoCtlRequestTestCaseS16GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S226");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S463");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S866");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1428");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1428");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S866");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1429");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1429");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S463");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S867");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1430");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1430");
        }
        
        private void IoCtlRequestTestCaseS16GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S867");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1431");
        }
        
        private void IoCtlRequestTestCaseS16GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1431");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS18() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S151\'");
            bool temp844;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp844);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp844);
            this.Manager.Comment("reaching state \'S227\'");
            int temp937 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS18GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS18GetIfNtfsFileSystemChecker1)));
            if ((temp937 == 0)) {
                this.Manager.Comment("reaching state \'S312\'");
                bool temp845;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp845);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp845);
                this.Manager.Comment("reaching state \'S464\'");
                int temp890 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS18GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS18GetObjectFunctionalityChecker1)));
                if ((temp890 == 0)) {
                    this.Manager.Comment("reaching state \'S634\'");
                    bool temp846;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp846);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp846);
                    this.Manager.Comment("reaching state \'S868\'");
                    int temp867 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker1)));
                    if ((temp867 == 0)) {
                        this.Manager.Comment("reaching state \'S1138\'");
                        bool temp847;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp847);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp847);
                        this.Manager.Comment("reaching state \'S1432\'");
                        int temp856 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp856 == 0)) {
                            this.Manager.Comment("reaching state \'S1748\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp848;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp848 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2072\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp848, "return of CreateFile, state S2072");
                            this.Manager.Comment("reaching state \'S2292\'");
                            bool temp849;
                            bool temp850;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp851;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp851 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp849, out temp850);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2512\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp849, "isBytesReturnedSet of FsCtlForEasyRequest, state S2512");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp850, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2512");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp851, "return of FsCtlForEasyRequest, state S2512");
                            this.Manager.Comment("reaching state \'S2672\'");
                            goto label158;
                        }
                        if ((temp856 == 1)) {
                            this.Manager.Comment("reaching state \'S1749\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp852;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp852 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2073\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp852, "return of CreateFile, state S2073");
                            this.Manager.Comment("reaching state \'S2293\'");
                            bool temp853;
                            bool temp854;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp855;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp855 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp853, out temp854);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2513\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp853, "isBytesReturnedSet of FsCtlForEasyRequest, state S2513");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp854, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2513");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp855, "return of FsCtlForEasyRequest, state S2513");
                            this.Manager.Comment("reaching state \'S2673\'");
                            goto label158;
                        }
                        throw new InvalidOperationException("never reached");
                    label158:
;
                        goto label160;
                    }
                    if ((temp867 == 1)) {
                        this.Manager.Comment("reaching state \'S1139\'");
                        bool temp857;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp857);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp857);
                        this.Manager.Comment("reaching state \'S1433\'");
                        int temp866 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp866 == 0)) {
                            this.Manager.Comment("reaching state \'S1750\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp858;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp858 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2074\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp858, "return of CreateFile, state S2074");
                            this.Manager.Comment("reaching state \'S2294\'");
                            bool temp859;
                            bool temp860;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp861;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp861 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp859, out temp860);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2514\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp859, "isBytesReturnedSet of FsCtlForEasyRequest, state S2514");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp860, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2514");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp861, "return of FsCtlForEasyRequest, state S2514");
                            this.Manager.Comment("reaching state \'S2674\'");
                            goto label159;
                        }
                        if ((temp866 == 1)) {
                            this.Manager.Comment("reaching state \'S1751\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp862;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp862 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2075\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp862, "return of CreateFile, state S2075");
                            this.Manager.Comment("reaching state \'S2295\'");
                            bool temp863;
                            bool temp864;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp865;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp865 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp863, out temp864);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2515\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp863, "isBytesReturnedSet of FsCtlForEasyRequest, state S2515");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp864, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2515");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp865, "return of FsCtlForEasyRequest, state S2515");
                            this.Manager.Comment("reaching state \'S2675\'");
                            goto label159;
                        }
                        throw new InvalidOperationException("never reached");
                    label159:
;
                        goto label160;
                    }
                    throw new InvalidOperationException("never reached");
                label160:
;
                    goto label164;
                }
                if ((temp890 == 1)) {
                    this.Manager.Comment("reaching state \'S635\'");
                    bool temp868;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp868);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp868);
                    this.Manager.Comment("reaching state \'S869\'");
                    int temp889 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker3)));
                    if ((temp889 == 0)) {
                        this.Manager.Comment("reaching state \'S1140\'");
                        bool temp869;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp869);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp869);
                        this.Manager.Comment("reaching state \'S1434\'");
                        int temp878 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp878 == 0)) {
                            this.Manager.Comment("reaching state \'S1752\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp870;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp870 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2076\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp870, "return of CreateFile, state S2076");
                            this.Manager.Comment("reaching state \'S2296\'");
                            bool temp871;
                            bool temp872;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp873;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp873 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp871, out temp872);
                            this.Manager.Checkpoint("MS-FSA_R3962");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                              If Open.File.Volume.IsUsnJournalActive is FALSE, t" +
                                    "he operation MUST be failed with STATUS_JOURNAL_NOT_ACTIVE.");
                            this.Manager.Comment("reaching state \'S2516\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:JOURNAL_NOT_ACTIV" +
                                    "E\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp871, "isBytesReturnedSet of FsCtlForEasyRequest, state S2516");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp872, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2516");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.JOURNAL_NOT_ACTIVE, temp873, "return of FsCtlForEasyRequest, state S2516");
                            this.Manager.Comment("reaching state \'S2676\'");
                            goto label161;
                        }
                        if ((temp878 == 1)) {
                            this.Manager.Comment("reaching state \'S1753\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp874;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp874 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2077\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp874, "return of CreateFile, state S2077");
                            this.Manager.Comment("reaching state \'S2297\'");
                            bool temp875;
                            bool temp876;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp877;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp877 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp875, out temp876);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2517\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp875, "isBytesReturnedSet of FsCtlForEasyRequest, state S2517");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp876, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2517");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp877, "return of FsCtlForEasyRequest, state S2517");
                            this.Manager.Comment("reaching state \'S2677\'");
                            goto label161;
                        }
                        throw new InvalidOperationException("never reached");
                    label161:
;
                        goto label163;
                    }
                    if ((temp889 == 1)) {
                        this.Manager.Comment("reaching state \'S1141\'");
                        bool temp879;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp879);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp879);
                        this.Manager.Comment("reaching state \'S1435\'");
                        int temp888 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp888 == 0)) {
                            this.Manager.Comment("reaching state \'S1754\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp880;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp880 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2078\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp880, "return of CreateFile, state S2078");
                            this.Manager.Comment("reaching state \'S2298\'");
                            bool temp881;
                            bool temp882;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp883;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_SET_SHORT_NAME_BEHAVIOR,BufferSize" +
                                    "Success,out _,out _)\'");
                            temp883 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_SET_SHORT_NAME_BEHAVIOR, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp881, out temp882);
                            this.Manager.Checkpoint("[2.1.5.9.34   FSCTL_SET_SHORT_NAME_BEHAVIOR]\r\n                                Thi" +
                                    "s control code is reserved for the WinPE <95> environment; the object store MUST" +
                                    " return STATUS_INVALID_DEVICE_REQUEST.");
                            this.Manager.Comment("reaching state \'S2518\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp881, "isBytesReturnedSet of FsCtlForEasyRequest, state S2518");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp882, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2518");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp883, "return of FsCtlForEasyRequest, state S2518");
                            this.Manager.Comment("reaching state \'S2678\'");
                            goto label162;
                        }
                        if ((temp888 == 1)) {
                            this.Manager.Comment("reaching state \'S1755\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp884;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp884 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2079\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp884, "return of CreateFile, state S2079");
                            this.Manager.Comment("reaching state \'S2299\'");
                            bool temp885;
                            bool temp886;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp887;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_SET_SHORT_NAME_BEHAVIOR,BufferSize" +
                                    "Success,out _,out _)\'");
                            temp887 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_SET_SHORT_NAME_BEHAVIOR, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp885, out temp886);
                            this.Manager.Checkpoint("[2.1.5.9.34   FSCTL_SET_SHORT_NAME_BEHAVIOR]\r\n                                Thi" +
                                    "s control code is reserved for the WinPE <95> environment; the object store MUST" +
                                    " return STATUS_INVALID_DEVICE_REQUEST.");
                            this.Manager.Comment("reaching state \'S2519\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp885, "isBytesReturnedSet of FsCtlForEasyRequest, state S2519");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp886, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2519");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp887, "return of FsCtlForEasyRequest, state S2519");
                            this.Manager.Comment("reaching state \'S2679\'");
                            goto label162;
                        }
                        throw new InvalidOperationException("never reached");
                    label162:
;
                        goto label163;
                    }
                    throw new InvalidOperationException("never reached");
                label163:
;
                    goto label164;
                }
                throw new InvalidOperationException("never reached");
            label164:
;
                goto label172;
            }
            if ((temp937 == 1)) {
                this.Manager.Comment("reaching state \'S313\'");
                bool temp891;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp891);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp891);
                this.Manager.Comment("reaching state \'S465\'");
                int temp936 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS18GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS18GetObjectFunctionalityChecker3)));
                if ((temp936 == 0)) {
                    this.Manager.Comment("reaching state \'S636\'");
                    bool temp892;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp892);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp892);
                    this.Manager.Comment("reaching state \'S870\'");
                    int temp913 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker5)));
                    if ((temp913 == 0)) {
                        this.Manager.Comment("reaching state \'S1142\'");
                        bool temp893;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp893);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp893);
                        this.Manager.Comment("reaching state \'S1436\'");
                        int temp902 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp902 == 0)) {
                            this.Manager.Comment("reaching state \'S1756\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp894;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp894 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2080\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp894, "return of CreateFile, state S2080");
                            this.Manager.Comment("reaching state \'S2300\'");
                            bool temp895;
                            bool temp896;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp897;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,BufferSizeSuccess,out" +
                                    " _,out _)\'");
                            temp897 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp895, out temp896);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2520\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp895, "isBytesReturnedSet of FsCtlForEasyRequest, state S2520");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp896, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2520");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp897, "return of FsCtlForEasyRequest, state S2520");
                            this.Manager.Comment("reaching state \'S2680\'");
                            goto label165;
                        }
                        if ((temp902 == 1)) {
                            this.Manager.Comment("reaching state \'S1757\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp898;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp898 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2081\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp898, "return of CreateFile, state S2081");
                            this.Manager.Comment("reaching state \'S2301\'");
                            bool temp899;
                            bool temp900;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp901;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp901 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp899, out temp900);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2521\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp899, "isBytesReturnedSet of FsCtlForEasyRequest, state S2521");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp900, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2521");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp901, "return of FsCtlForEasyRequest, state S2521");
                            this.Manager.Comment("reaching state \'S2681\'");
                            goto label165;
                        }
                        throw new InvalidOperationException("never reached");
                    label165:
;
                        goto label167;
                    }
                    if ((temp913 == 1)) {
                        this.Manager.Comment("reaching state \'S1143\'");
                        bool temp903;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp903);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp903);
                        this.Manager.Comment("reaching state \'S1437\'");
                        int temp912 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp912 == 0)) {
                            this.Manager.Comment("reaching state \'S1758\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp904;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp904 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2082\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp904, "return of CreateFile, state S2082");
                            this.Manager.Comment("reaching state \'S2302\'");
                            bool temp905;
                            bool temp906;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp907;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp907 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp905, out temp906);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2522\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp905, "isBytesReturnedSet of FsCtlForEasyRequest, state S2522");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp906, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2522");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp907, "return of FsCtlForEasyRequest, state S2522");
                            this.Manager.Comment("reaching state \'S2682\'");
                            goto label166;
                        }
                        if ((temp912 == 1)) {
                            this.Manager.Comment("reaching state \'S1759\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp908;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp908 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2083\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp908, "return of CreateFile, state S2083");
                            this.Manager.Comment("reaching state \'S2303\'");
                            bool temp909;
                            bool temp910;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp911;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp911 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp909, out temp910);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2523\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp909, "isBytesReturnedSet of FsCtlForEasyRequest, state S2523");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp910, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2523");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp911, "return of FsCtlForEasyRequest, state S2523");
                            this.Manager.Comment("reaching state \'S2683\'");
                            goto label166;
                        }
                        throw new InvalidOperationException("never reached");
                    label166:
;
                        goto label167;
                    }
                    throw new InvalidOperationException("never reached");
                label167:
;
                    goto label171;
                }
                if ((temp936 == 1)) {
                    this.Manager.Comment("reaching state \'S637\'");
                    bool temp914;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp914);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp914);
                    this.Manager.Comment("reaching state \'S871\'");
                    int temp935 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker7)));
                    if ((temp935 == 0)) {
                        this.Manager.Comment("reaching state \'S1144\'");
                        bool temp915;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp915);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp915);
                        this.Manager.Comment("reaching state \'S1438\'");
                        int temp924 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp924 == 0)) {
                            this.Manager.Comment("reaching state \'S1760\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp916;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp916 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2084\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp916, "return of CreateFile, state S2084");
                            this.Manager.Comment("reaching state \'S2304\'");
                            bool temp917;
                            bool temp918;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp919;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp919 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp917, out temp918);
                            this.Manager.Checkpoint("MS-FSA_R3965");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                          Upon successful completion of the operation, the objec" +
                                    "t store MUST return:BytesReturned set to sizeof( Usn ).");
                            this.Manager.Checkpoint("MS-FSA_R3955");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]On completion, the object store MUST return:\r\n  " +
                                    "                          [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R3966");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                          Upon successful completion of the operation, the objec" +
                                    "t store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2524\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp917, "isBytesReturnedSet of FsCtlForEasyRequest, state S2524");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp918, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2524");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp919, "return of FsCtlForEasyRequest, state S2524");
                            this.Manager.Comment("reaching state \'S2684\'");
                            goto label168;
                        }
                        if ((temp924 == 1)) {
                            this.Manager.Comment("reaching state \'S1761\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp920;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp920 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2085\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp920, "return of CreateFile, state S2085");
                            this.Manager.Comment("reaching state \'S2305\'");
                            bool temp921;
                            bool temp922;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp923;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp923 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp921, out temp922);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2525\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp921, "isBytesReturnedSet of FsCtlForEasyRequest, state S2525");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp922, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2525");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp923, "return of FsCtlForEasyRequest, state S2525");
                            this.Manager.Comment("reaching state \'S2685\'");
                            goto label168;
                        }
                        throw new InvalidOperationException("never reached");
                    label168:
;
                        goto label170;
                    }
                    if ((temp935 == 1)) {
                        this.Manager.Comment("reaching state \'S1145\'");
                        bool temp925;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp925);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp925);
                        this.Manager.Comment("reaching state \'S1439\'");
                        int temp934 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp934 == 0)) {
                            this.Manager.Comment("reaching state \'S1762\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp926;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp926 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2086\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp926, "return of CreateFile, state S2086");
                            this.Manager.Comment("reaching state \'S2306\'");
                            bool temp927;
                            bool temp928;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp929;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp929 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp927, out temp928);
                            this.Manager.Checkpoint("MS-FSA_R3965");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                          Upon successful completion of the operation, the objec" +
                                    "t store MUST return:BytesReturned set to sizeof( Usn ).");
                            this.Manager.Checkpoint("MS-FSA_R3955");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]On completion, the object store MUST return:\r\n  " +
                                    "                          [Status,OutputBuffer,BytesReturned].");
                            this.Manager.Checkpoint("MS-FSA_R3966");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                          Upon successful completion of the operation, the objec" +
                                    "t store MUST return:Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2526\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out True,out True]:SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp927, "isBytesReturnedSet of FsCtlForEasyRequest, state S2526");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp928, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2526");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp929, "return of FsCtlForEasyRequest, state S2526");
                            this.Manager.Comment("reaching state \'S2686\'");
                            goto label169;
                        }
                        if ((temp934 == 1)) {
                            this.Manager.Comment("reaching state \'S1763\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp930;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp930 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2087\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp930, "return of CreateFile, state S2087");
                            this.Manager.Comment("reaching state \'S2307\'");
                            bool temp931;
                            bool temp932;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp933;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,BufferSizeSuccess" +
                                    ",out _,out _)\'");
                            temp933 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp931, out temp932);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2527\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp931, "isBytesReturnedSet of FsCtlForEasyRequest, state S2527");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp932, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2527");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp933, "return of FsCtlForEasyRequest, state S2527");
                            this.Manager.Comment("reaching state \'S2687\'");
                            goto label169;
                        }
                        throw new InvalidOperationException("never reached");
                    label169:
;
                        goto label170;
                    }
                    throw new InvalidOperationException("never reached");
                label170:
;
                    goto label171;
                }
                throw new InvalidOperationException("never reached");
            label171:
;
                goto label172;
            }
            throw new InvalidOperationException("never reached");
        label172:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS18GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S227");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S464");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S868");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1432");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1432");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S868");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1433");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1433");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S464");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S869");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1434");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1434");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S869");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1435");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1435");
        }
        
        private void IoCtlRequestTestCaseS18GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S227");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S465");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S870");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1436");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1436");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S870");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1437");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1437");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S465");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S871");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1438");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1438");
        }
        
        private void IoCtlRequestTestCaseS18GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S871");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1439");
        }
        
        private void IoCtlRequestTestCaseS18GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1439");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS2() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S143\'");
            bool temp938;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp938);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp938);
            this.Manager.Comment("reaching state \'S219\'");
            int temp1031 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS2GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS2GetIfNtfsFileSystemChecker1)));
            if ((temp1031 == 0)) {
                this.Manager.Comment("reaching state \'S296\'");
                bool temp939;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp939);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp939);
                this.Manager.Comment("reaching state \'S448\'");
                int temp984 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS2GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS2GetObjectFunctionalityChecker1)));
                if ((temp984 == 0)) {
                    this.Manager.Comment("reaching state \'S602\'");
                    bool temp940;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp940);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp940);
                    this.Manager.Comment("reaching state \'S836\'");
                    int temp961 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker1)));
                    if ((temp961 == 0)) {
                        this.Manager.Comment("reaching state \'S1074\'");
                        bool temp941;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp941);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp941);
                        this.Manager.Comment("reaching state \'S1368\'");
                        int temp950 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp950 == 0)) {
                            this.Manager.Comment("reaching state \'S1620\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp942;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp942 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1944\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp942, "return of CreateFile, state S1944");
                            this.Manager.Comment("reaching state \'S2164\'");
                            bool temp943;
                            bool temp944;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp945;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp945 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp943, out temp944);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2384\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp943, "isBytesReturnedSet of FsCtlForEasyRequest, state S2384");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp944, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2384");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp945, "return of FsCtlForEasyRequest, state S2384");
                            this.Manager.Comment("reaching state \'S2544\'");
                            goto label173;
                        }
                        if ((temp950 == 1)) {
                            this.Manager.Comment("reaching state \'S1621\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp946;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp946 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1945\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp946, "return of CreateFile, state S1945");
                            this.Manager.Comment("reaching state \'S2165\'");
                            bool temp947;
                            bool temp948;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp949;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp949 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp947, out temp948);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2385\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp947, "isBytesReturnedSet of FsCtlForEasyRequest, state S2385");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp948, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2385");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp949, "return of FsCtlForEasyRequest, state S2385");
                            this.Manager.Comment("reaching state \'S2545\'");
                            goto label173;
                        }
                        throw new InvalidOperationException("never reached");
                    label173:
;
                        goto label175;
                    }
                    if ((temp961 == 1)) {
                        this.Manager.Comment("reaching state \'S1075\'");
                        bool temp951;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp951);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp951);
                        this.Manager.Comment("reaching state \'S1369\'");
                        int temp960 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp960 == 0)) {
                            this.Manager.Comment("reaching state \'S1622\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp952;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp952 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1946\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp952, "return of CreateFile, state S1946");
                            this.Manager.Comment("reaching state \'S2166\'");
                            bool temp953;
                            bool temp954;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp955;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp955 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp953, out temp954);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2386\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp953, "isBytesReturnedSet of FsCtlForEasyRequest, state S2386");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp954, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2386");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp955, "return of FsCtlForEasyRequest, state S2386");
                            this.Manager.Comment("reaching state \'S2546\'");
                            goto label174;
                        }
                        if ((temp960 == 1)) {
                            this.Manager.Comment("reaching state \'S1623\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp956;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp956 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1947\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp956, "return of CreateFile, state S1947");
                            this.Manager.Comment("reaching state \'S2167\'");
                            bool temp957;
                            bool temp958;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp959;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp959 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp957, out temp958);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2387\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp957, "isBytesReturnedSet of FsCtlForEasyRequest, state S2387");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp958, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2387");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp959, "return of FsCtlForEasyRequest, state S2387");
                            this.Manager.Comment("reaching state \'S2547\'");
                            goto label174;
                        }
                        throw new InvalidOperationException("never reached");
                    label174:
;
                        goto label175;
                    }
                    throw new InvalidOperationException("never reached");
                label175:
;
                    goto label179;
                }
                if ((temp984 == 1)) {
                    this.Manager.Comment("reaching state \'S603\'");
                    bool temp962;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp962);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp962);
                    this.Manager.Comment("reaching state \'S837\'");
                    int temp983 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker3)));
                    if ((temp983 == 0)) {
                        this.Manager.Comment("reaching state \'S1076\'");
                        bool temp963;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp963);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp963);
                        this.Manager.Comment("reaching state \'S1370\'");
                        int temp972 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp972 == 0)) {
                            this.Manager.Comment("reaching state \'S1624\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp964;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp964 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1948\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp964, "return of CreateFile, state S1948");
                            this.Manager.Comment("reaching state \'S2168\'");
                            bool temp965;
                            bool temp966;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp967;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp967 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp965, out temp966);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2388\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp965, "isBytesReturnedSet of FsCtlForEasyRequest, state S2388");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp966, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2388");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp967, "return of FsCtlForEasyRequest, state S2388");
                            this.Manager.Comment("reaching state \'S2548\'");
                            goto label176;
                        }
                        if ((temp972 == 1)) {
                            this.Manager.Comment("reaching state \'S1625\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp968;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp968 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1949\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp968, "return of CreateFile, state S1949");
                            this.Manager.Comment("reaching state \'S2169\'");
                            bool temp969;
                            bool temp970;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp971;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp971 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp969, out temp970);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2389\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp969, "isBytesReturnedSet of FsCtlForEasyRequest, state S2389");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp970, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2389");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp971, "return of FsCtlForEasyRequest, state S2389");
                            this.Manager.Comment("reaching state \'S2549\'");
                            goto label176;
                        }
                        throw new InvalidOperationException("never reached");
                    label176:
;
                        goto label178;
                    }
                    if ((temp983 == 1)) {
                        this.Manager.Comment("reaching state \'S1077\'");
                        bool temp973;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp973);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp973);
                        this.Manager.Comment("reaching state \'S1371\'");
                        int temp982 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp982 == 0)) {
                            this.Manager.Comment("reaching state \'S1626\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp974;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp974 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1950\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp974, "return of CreateFile, state S1950");
                            this.Manager.Comment("reaching state \'S2170\'");
                            bool temp975;
                            bool temp976;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp977;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,LessThan" +
                                    "SizeOf_FILESYSTEM_STATISTICS,out _,out _)\'");
                            temp977 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeOf_FILESYSTEM_STATISTICS, out temp975, out temp976);
                            this.Manager.Checkpoint("[2.1.5.9.6   FSCTL_FILESYSTEM_GET_STATISTICS] Pseudocode for the operation is as " +
                                    "follows:\r\n                                If OutputBufferSize is less than sizeo" +
                                    "f(FILESYSTEM_STATISTICS), the operation is failed with STATUS_BUFFER_TOO_SMALL.");
                            this.Manager.Comment("reaching state \'S2390\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:BUFFER_TOO_SMALL\'" +
                                    "");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp975, "isBytesReturnedSet of FsCtlForEasyRequest, state S2390");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp976, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2390");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp977, "return of FsCtlForEasyRequest, state S2390");
                            this.Manager.Comment("reaching state \'S2550\'");
                            goto label177;
                        }
                        if ((temp982 == 1)) {
                            this.Manager.Comment("reaching state \'S1627\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp978;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp978 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1951\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp978, "return of CreateFile, state S1951");
                            this.Manager.Comment("reaching state \'S2171\'");
                            bool temp979;
                            bool temp980;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp981;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,LessThanFILE_QUERY_SP" +
                                    "ARING_BUFFER,out _,out _)\'");
                            temp981 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_SPARING_BUFFER, out temp979, out temp980);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2391\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp979, "isBytesReturnedSet of FsCtlForEasyRequest, state S2391");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp980, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2391");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp981, "return of FsCtlForEasyRequest, state S2391");
                            this.Manager.Comment("reaching state \'S2551\'");
                            goto label177;
                        }
                        throw new InvalidOperationException("never reached");
                    label177:
;
                        goto label178;
                    }
                    throw new InvalidOperationException("never reached");
                label178:
;
                    goto label179;
                }
                throw new InvalidOperationException("never reached");
            label179:
;
                goto label187;
            }
            if ((temp1031 == 1)) {
                this.Manager.Comment("reaching state \'S297\'");
                bool temp985;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp985);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp985);
                this.Manager.Comment("reaching state \'S449\'");
                int temp1030 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS2GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS2GetObjectFunctionalityChecker3)));
                if ((temp1030 == 0)) {
                    this.Manager.Comment("reaching state \'S604\'");
                    bool temp986;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp986);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp986);
                    this.Manager.Comment("reaching state \'S838\'");
                    int temp1007 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker5)));
                    if ((temp1007 == 0)) {
                        this.Manager.Comment("reaching state \'S1078\'");
                        bool temp987;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp987);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp987);
                        this.Manager.Comment("reaching state \'S1372\'");
                        int temp996 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp996 == 0)) {
                            this.Manager.Comment("reaching state \'S1628\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp988;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp988 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1952\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp988, "return of CreateFile, state S1952");
                            this.Manager.Comment("reaching state \'S2172\'");
                            bool temp989;
                            bool temp990;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp991;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,LessThanFILE_QUERY_SP" +
                                    "ARING_BUFFER,out _,out _)\'");
                            temp991 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_SPARING_BUFFER, out temp989, out temp990);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2392\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp989, "isBytesReturnedSet of FsCtlForEasyRequest, state S2392");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp990, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2392");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp991, "return of FsCtlForEasyRequest, state S2392");
                            this.Manager.Comment("reaching state \'S2552\'");
                            goto label180;
                        }
                        if ((temp996 == 1)) {
                            this.Manager.Comment("reaching state \'S1629\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp992;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp992 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1953\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp992, "return of CreateFile, state S1953");
                            this.Manager.Comment("reaching state \'S2173\'");
                            bool temp993;
                            bool temp994;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp995;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,LessThan" +
                                    "SizeOf_FILESYSTEM_STATISTICS,out _,out _)\'");
                            temp995 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeOf_FILESYSTEM_STATISTICS, out temp993, out temp994);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2393\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp993, "isBytesReturnedSet of FsCtlForEasyRequest, state S2393");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp994, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2393");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp995, "return of FsCtlForEasyRequest, state S2393");
                            this.Manager.Comment("reaching state \'S2553\'");
                            goto label180;
                        }
                        throw new InvalidOperationException("never reached");
                    label180:
;
                        goto label182;
                    }
                    if ((temp1007 == 1)) {
                        this.Manager.Comment("reaching state \'S1079\'");
                        bool temp997;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp997);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp997);
                        this.Manager.Comment("reaching state \'S1373\'");
                        int temp1006 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp1006 == 0)) {
                            this.Manager.Comment("reaching state \'S1630\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp998;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp998 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1954\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp998, "return of CreateFile, state S1954");
                            this.Manager.Comment("reaching state \'S2174\'");
                            bool temp999;
                            bool temp1000;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1001;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1001 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp999, out temp1000);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2394\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp999, "isBytesReturnedSet of FsCtlForEasyRequest, state S2394");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1000, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2394");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1001, "return of FsCtlForEasyRequest, state S2394");
                            this.Manager.Comment("reaching state \'S2554\'");
                            goto label181;
                        }
                        if ((temp1006 == 1)) {
                            this.Manager.Comment("reaching state \'S1631\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1002;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1002 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1955\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1002, "return of CreateFile, state S1955");
                            this.Manager.Comment("reaching state \'S2175\'");
                            bool temp1003;
                            bool temp1004;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1005;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1005 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1003, out temp1004);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2395\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1003, "isBytesReturnedSet of FsCtlForEasyRequest, state S2395");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1004, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2395");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1005, "return of FsCtlForEasyRequest, state S2395");
                            this.Manager.Comment("reaching state \'S2555\'");
                            goto label181;
                        }
                        throw new InvalidOperationException("never reached");
                    label181:
;
                        goto label182;
                    }
                    throw new InvalidOperationException("never reached");
                label182:
;
                    goto label186;
                }
                if ((temp1030 == 1)) {
                    this.Manager.Comment("reaching state \'S605\'");
                    bool temp1008;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1008);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1008);
                    this.Manager.Comment("reaching state \'S839\'");
                    int temp1029 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker7)));
                    if ((temp1029 == 0)) {
                        this.Manager.Comment("reaching state \'S1080\'");
                        bool temp1009;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1009);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1009);
                        this.Manager.Comment("reaching state \'S1374\'");
                        int temp1018 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp1018 == 0)) {
                            this.Manager.Comment("reaching state \'S1632\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1010;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1010 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1956\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1010, "return of CreateFile, state S1956");
                            this.Manager.Comment("reaching state \'S2176\'");
                            bool temp1011;
                            bool temp1012;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1013;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1013 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1011, out temp1012);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2396\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1011, "isBytesReturnedSet of FsCtlForEasyRequest, state S2396");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1012, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2396");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1013, "return of FsCtlForEasyRequest, state S2396");
                            this.Manager.Comment("reaching state \'S2556\'");
                            goto label183;
                        }
                        if ((temp1018 == 1)) {
                            this.Manager.Comment("reaching state \'S1633\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1014;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1014 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1957\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1014, "return of CreateFile, state S1957");
                            this.Manager.Comment("reaching state \'S2177\'");
                            bool temp1015;
                            bool temp1016;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1017;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1017 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1015, out temp1016);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2397\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1015, "isBytesReturnedSet of FsCtlForEasyRequest, state S2397");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1016, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2397");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1017, "return of FsCtlForEasyRequest, state S2397");
                            this.Manager.Comment("reaching state \'S2557\'");
                            goto label183;
                        }
                        throw new InvalidOperationException("never reached");
                    label183:
;
                        goto label185;
                    }
                    if ((temp1029 == 1)) {
                        this.Manager.Comment("reaching state \'S1081\'");
                        bool temp1019;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1019);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1019);
                        this.Manager.Comment("reaching state \'S1375\'");
                        int temp1028 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp1028 == 0)) {
                            this.Manager.Comment("reaching state \'S1634\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1020;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1020 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1958\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1020, "return of CreateFile, state S1958");
                            this.Manager.Comment("reaching state \'S2178\'");
                            bool temp1021;
                            bool temp1022;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1023;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1023 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1021, out temp1022);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2398\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1021, "isBytesReturnedSet of FsCtlForEasyRequest, state S2398");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1022, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2398");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1023, "return of FsCtlForEasyRequest, state S2398");
                            this.Manager.Comment("reaching state \'S2558\'");
                            goto label184;
                        }
                        if ((temp1028 == 1)) {
                            this.Manager.Comment("reaching state \'S1635\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1024;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1024 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1959\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1024, "return of CreateFile, state S1959");
                            this.Manager.Comment("reaching state \'S2179\'");
                            bool temp1025;
                            bool temp1026;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1027;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1027 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1025, out temp1026);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2399\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1025, "isBytesReturnedSet of FsCtlForEasyRequest, state S2399");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1026, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2399");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1027, "return of FsCtlForEasyRequest, state S2399");
                            this.Manager.Comment("reaching state \'S2559\'");
                            goto label184;
                        }
                        throw new InvalidOperationException("never reached");
                    label184:
;
                        goto label185;
                    }
                    throw new InvalidOperationException("never reached");
                label185:
;
                    goto label186;
                }
                throw new InvalidOperationException("never reached");
            label186:
;
                goto label187;
            }
            throw new InvalidOperationException("never reached");
        label187:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS2GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S219");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S448");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S836");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1368");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1368");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S836");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1369");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1369");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S448");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S837");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1370");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1370");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S837");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1371");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1371");
        }
        
        private void IoCtlRequestTestCaseS2GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S219");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S449");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S838");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1372");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1372");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S838");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1373");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1373");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S449");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S839");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1374");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1374");
        }
        
        private void IoCtlRequestTestCaseS2GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S839");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1375");
        }
        
        private void IoCtlRequestTestCaseS2GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1375");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS20() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S152\'");
            bool temp1032;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp1032);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp1032);
            this.Manager.Comment("reaching state \'S228\'");
            int temp1039 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS20GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS20GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp1039 == 0)) {
                this.Manager.Comment("reaching state \'S314\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1033;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1033 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1033, "return of CreateFile, state S466");
                this.Manager.Comment("reaching state \'S638\'");
                bool temp1034;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1035;
                this.Manager.Comment("executing step \'call FsCtlCreateOrGetObjId(BufferSizeSuccess,out _)\'");
                temp1035 = this.IFSAAdapterInstance.FsCtlCreateOrGetObjId(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1034);
                this.Manager.Checkpoint("MS-FSA_R951");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID,Pseudocode for the operation is as follows: ]\r\n" +
                        "                    If the object store does not implement this functionality, t" +
                        "he operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<16>");
                this.Manager.Comment("reaching state \'S872\'");
                this.Manager.Comment("checking step \'return FsCtlCreateOrGetObjId/[out False]:INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1034, "isBytesReturnedSet of FsCtlCreateOrGetObjId, state S872");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1035, "return of FsCtlCreateOrGetObjId, state S872");
                this.Manager.Comment("reaching state \'S1146\'");
                goto label188;
            }
            if ((temp1039 == 1)) {
                this.Manager.Comment("reaching state \'S315\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1036;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1036 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1036, "return of CreateFile, state S467");
                this.Manager.Comment("reaching state \'S639\'");
                bool temp1037;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1038;
                this.Manager.Comment("executing step \'call FsCtlCreateOrGetObjId(BufferSizeSuccess,out _)\'");
                temp1038 = this.IFSAAdapterInstance.FsCtlCreateOrGetObjId(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1037);
                this.Manager.Checkpoint("MS-FSA_R947");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID ]On completion, the object store MUST return:\r\n" +
                        "                [Status,OutputBuffer,BytesReturned].");
                this.Manager.Checkpoint("MS-FSA_R965");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID,Pseudocode for the operation is as follows:]\r\n " +
                        "               Upon successful completion of the operation, the object store MUS" +
                        "T return:Status set to STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R964");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID,Pseudocode for the operation is as follows:]\r\n " +
                        "               Upon successful completion of the operation, the object store MUS" +
                        "T return:BytesReturned set to sizeof( FILE_OBJECTID_BUFFER ).");
                this.Manager.Comment("reaching state \'S873\'");
                this.Manager.Comment("checking step \'return FsCtlCreateOrGetObjId/[out True]:SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1037, "isBytesReturnedSet of FsCtlCreateOrGetObjId, state S873");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1038, "return of FsCtlCreateOrGetObjId, state S873");
                this.Manager.Comment("reaching state \'S1147\'");
                goto label188;
            }
            throw new InvalidOperationException("never reached");
        label188:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS20GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S228");
        }
        
        private void IoCtlRequestTestCaseS20GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S228");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS22() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S153\'");
            bool temp1040;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp1040);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp1040);
            this.Manager.Comment("reaching state \'S229\'");
            int temp1047 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS22GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS22GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp1047 == 0)) {
                this.Manager.Comment("reaching state \'S316\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1041;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1041 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1041, "return of CreateFile, state S468");
                this.Manager.Comment("reaching state \'S640\'");
                bool temp1042;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1043;
                this.Manager.Comment("executing step \'call FsCtlCreateOrGetObjId(LessThanFILE_OBJECTID_BUFFER,out _)\'");
                temp1043 = this.IFSAAdapterInstance.FsCtlCreateOrGetObjId(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(0)), out temp1042);
                this.Manager.Checkpoint("MS-FSA_R951");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID,Pseudocode for the operation is as follows: ]\r\n" +
                        "                    If the object store does not implement this functionality, t" +
                        "he operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<16>");
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("checking step \'return FsCtlCreateOrGetObjId/[out False]:INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1042, "isBytesReturnedSet of FsCtlCreateOrGetObjId, state S874");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1043, "return of FsCtlCreateOrGetObjId, state S874");
                this.Manager.Comment("reaching state \'S1148\'");
                goto label189;
            }
            if ((temp1047 == 1)) {
                this.Manager.Comment("reaching state \'S317\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1044;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1044 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S469\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1044, "return of CreateFile, state S469");
                this.Manager.Comment("reaching state \'S641\'");
                bool temp1045;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1046;
                this.Manager.Comment("executing step \'call FsCtlCreateOrGetObjId(LessThanFILE_OBJECTID_BUFFER,out _)\'");
                temp1046 = this.IFSAAdapterInstance.FsCtlCreateOrGetObjId(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(0)), out temp1045);
                this.Manager.Checkpoint("MS-FSA_R4994");
                this.Manager.Checkpoint("[In FSCTL_CREATE_OR_GET_OBJECT_ID,Pseudocode for the operation is as follows:] \r\n" +
                        "                    If OutputBufferSize is less than sizeof( FILE_OBJECTID_BUFFE" +
                        "R ), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return FsCtlCreateOrGetObjId/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1045, "isBytesReturnedSet of FsCtlCreateOrGetObjId, state S875");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1046, "return of FsCtlCreateOrGetObjId, state S875");
                this.Manager.Comment("reaching state \'S1149\'");
                goto label189;
            }
            throw new InvalidOperationException("never reached");
        label189:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS22GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S229");
        }
        
        private void IoCtlRequestTestCaseS22GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S229");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS24() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S154\'");
            bool temp1048;
            this.Manager.Comment("executing step \'call GetIfImplementObjectIdIoCtlRequest(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementObjectIdIoCtlRequest(out temp1048);
            this.Manager.AddReturn(GetIfImplementObjectIdIoCtlRequestInfo, null, temp1048);
            this.Manager.Comment("reaching state \'S230\'");
            int temp1053 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS24GetIfImplementObjectIdIoCtlRequestChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfImplementObjectIdIoCtlRequestInfo, null, new GetIfImplementObjectIdIoCtlRequestDelegate1(this.IoCtlRequestTestCaseS24GetIfImplementObjectIdIoCtlRequestChecker1)));
            if ((temp1053 == 0)) {
                this.Manager.Comment("reaching state \'S318\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1049;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1049 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S470\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1049, "return of CreateFile, state S470");
                this.Manager.Comment("reaching state \'S642\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1050;
                this.Manager.Comment("executing step \'call FsCtlDeleteObjId()\'");
                temp1050 = this.IFSAAdapterInstance.FsCtlDeleteObjId();
                this.Manager.Checkpoint("MS-FSA_R4996");
                this.Manager.Checkpoint("[In FSCTL_DELETE_OBJECT_ID ] If the object store does not implement this function" +
                        "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                        "VICE_REQUEST.<19>");
                this.Manager.Comment("reaching state \'S876\'");
                this.Manager.Comment("checking step \'return FsCtlDeleteObjId/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1050, "return of FsCtlDeleteObjId, state S876");
                this.Manager.Comment("reaching state \'S1150\'");
                goto label190;
            }
            if ((temp1053 == 1)) {
                this.Manager.Comment("reaching state \'S319\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1051;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1051 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S471\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1051, "return of CreateFile, state S471");
                this.Manager.Comment("reaching state \'S643\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1052;
                this.Manager.Comment("executing step \'call FsCtlDeleteObjId()\'");
                temp1052 = this.IFSAAdapterInstance.FsCtlDeleteObjId();
                this.Manager.Checkpoint("MS-FSA_R974");
                this.Manager.Checkpoint("[In FSCTL_DELETE_OBJECT_ID,Pseudocode for the operation is as follows: ]Upon succ" +
                        "essful completion \r\n                of the operation, the object store MUST retu" +
                        "rn:Status set to STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R1252");
                this.Manager.Checkpoint("[In FSCTL_DELETE_OBJECT_ID ]On completion, the object store MUST return:[Status]." +
                        "");
                this.Manager.Comment("reaching state \'S877\'");
                this.Manager.Comment("checking step \'return FsCtlDeleteObjId/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1052, "return of FsCtlDeleteObjId, state S877");
                this.Manager.Comment("reaching state \'S1151\'");
                goto label190;
            }
            throw new InvalidOperationException("never reached");
        label190:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS24GetIfImplementObjectIdIoCtlRequestChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S230");
        }
        
        private void IoCtlRequestTestCaseS24GetIfImplementObjectIdIoCtlRequestChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementObjectIdIoCtlRequest/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementObjectIdIoCtlRequest, state S230");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS26() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S155\'");
            bool temp1054;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1054);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1054);
            this.Manager.Comment("reaching state \'S231\'");
            int temp1067 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS26GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS26GetObjectFunctionalityChecker1)));
            if ((temp1067 == 0)) {
                this.Manager.Comment("reaching state \'S320\'");
                bool temp1055;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1055);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1055);
                this.Manager.Comment("reaching state \'S472\'");
                int temp1060 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker1)));
                if ((temp1060 == 0)) {
                    this.Manager.Comment("reaching state \'S644\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1056;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1056 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S878\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1056, "return of CreateFile, state S878");
                    this.Manager.Comment("reaching state \'S1152\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1057;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NON_MICROSOFT_RANGE_TAG,False)\'");
                    temp1057 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1440\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1057, "return of FsCtlDeleteReparsePoint, state S1440");
                    this.Manager.Comment("reaching state \'S1764\'");
                    goto label191;
                }
                if ((temp1060 == 1)) {
                    this.Manager.Comment("reaching state \'S645\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1058;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1058 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S879\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1058, "return of CreateFile, state S879");
                    this.Manager.Comment("reaching state \'S1153\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1059;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NON_MICROSOFT_RANGE_TAG,False)\'");
                    temp1059 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, false);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1441\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1059, "return of FsCtlDeleteReparsePoint, state S1441");
                    this.Manager.Comment("reaching state \'S1765\'");
                    goto label191;
                }
                throw new InvalidOperationException("never reached");
            label191:
;
                goto label193;
            }
            if ((temp1067 == 1)) {
                this.Manager.Comment("reaching state \'S321\'");
                bool temp1061;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1061);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1061);
                this.Manager.Comment("reaching state \'S473\'");
                int temp1066 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker3)));
                if ((temp1066 == 0)) {
                    this.Manager.Comment("reaching state \'S646\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1062;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1062 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S880\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1062, "return of CreateFile, state S880");
                    this.Manager.Comment("reaching state \'S1154\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1063;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NON_MICROSOFT_RANGE_TAG,False)\'");
                    temp1063 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1442\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1063, "return of FsCtlDeleteReparsePoint, state S1442");
                    this.Manager.Comment("reaching state \'S1766\'");
                    goto label192;
                }
                if ((temp1066 == 1)) {
                    this.Manager.Comment("reaching state \'S647\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1064;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1064 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S881\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1064, "return of CreateFile, state S881");
                    this.Manager.Comment("reaching state \'S1155\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1065;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NON_MICROSOFT_RANGE_TAG,False)\'");
                    temp1065 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, false);
                    this.Manager.Checkpoint("MS-FSA_R990");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 2 -- Validate that the requested tag deletion type matches with the stored tag type.]
                    If (ReparseTag is a non-Microsoft Reparse Tag && Open.File.ReparseGUID != ReparseGUID), 
                    the operation MUST be failed with STATUS_REPARSE_ATTRIBUTE_CONFLICT.");
                    this.Manager.Comment("reaching state \'S1443\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/REPARSE_ATTRIBUTE_CONFLICT\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.REPARSE_ATTRIBUTE_CONFLICT, temp1065, "return of FsCtlDeleteReparsePoint, state S1443");
                    this.Manager.Comment("reaching state \'S1767\'");
                    goto label192;
                }
                throw new InvalidOperationException("never reached");
            label192:
;
                goto label193;
            }
            throw new InvalidOperationException("never reached");
        label193:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS26GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S231");
        }
        
        private void IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S472");
        }
        
        private void IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S472");
        }
        
        private void IoCtlRequestTestCaseS26GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S231");
        }
        
        private void IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S473");
        }
        
        private void IoCtlRequestTestCaseS26GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S473");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS28() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S156\'");
            bool temp1068;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1068);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1068);
            this.Manager.Comment("reaching state \'S232\'");
            int temp1081 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS28GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS28GetObjectFunctionalityChecker1)));
            if ((temp1081 == 0)) {
                this.Manager.Comment("reaching state \'S322\'");
                bool temp1069;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1069);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1069);
                this.Manager.Comment("reaching state \'S474\'");
                int temp1074 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker1)));
                if ((temp1074 == 0)) {
                    this.Manager.Comment("reaching state \'S648\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1070;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1070 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S882\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1070, "return of CreateFile, state S882");
                    this.Manager.Comment("reaching state \'S1156\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1071;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(EMPTY,False)\'");
                    temp1071 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1444\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1071, "return of FsCtlDeleteReparsePoint, state S1444");
                    this.Manager.Comment("reaching state \'S1768\'");
                    goto label194;
                }
                if ((temp1074 == 1)) {
                    this.Manager.Comment("reaching state \'S649\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1072;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1072 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S883\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1072, "return of CreateFile, state S883");
                    this.Manager.Comment("reaching state \'S1157\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1073;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(EMPTY,False)\'");
                    temp1073 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, false);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1445\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1073, "return of FsCtlDeleteReparsePoint, state S1445");
                    this.Manager.Comment("reaching state \'S1769\'");
                    goto label194;
                }
                throw new InvalidOperationException("never reached");
            label194:
;
                goto label196;
            }
            if ((temp1081 == 1)) {
                this.Manager.Comment("reaching state \'S323\'");
                bool temp1075;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1075);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1075);
                this.Manager.Comment("reaching state \'S475\'");
                int temp1080 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker3)));
                if ((temp1080 == 0)) {
                    this.Manager.Comment("reaching state \'S650\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1076;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1076 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S884\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1076, "return of CreateFile, state S884");
                    this.Manager.Comment("reaching state \'S1158\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1077;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(EMPTY,False)\'");
                    temp1077 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1446\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1077, "return of FsCtlDeleteReparsePoint, state S1446");
                    this.Manager.Comment("reaching state \'S1770\'");
                    goto label195;
                }
                if ((temp1080 == 1)) {
                    this.Manager.Comment("reaching state \'S651\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1078;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1078 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S885\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1078, "return of CreateFile, state S885");
                    this.Manager.Comment("reaching state \'S1159\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1079;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NotEqualOpenFileReparseTag,True)\'");
                    temp1079 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NotEqualOpenFileReparseTag, true);
                    this.Manager.Checkpoint("MS-FSA_R989");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 2 -- Validate that the requested tag deletion type matches with the stored tag type.]
                    If (ReparseTag != Open.File.ReparseTag), the operation MUST be failed with STATUS_IO_REPARSE_TAG_MISMATCH.");
                    this.Manager.Comment("reaching state \'S1447\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/IO_REPARSE_TAG_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_TAG_MISMATCH, temp1079, "return of FsCtlDeleteReparsePoint, state S1447");
                    this.Manager.Comment("reaching state \'S1771\'");
                    goto label195;
                }
                throw new InvalidOperationException("never reached");
            label195:
;
                goto label196;
            }
            throw new InvalidOperationException("never reached");
        label196:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS28GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S232");
        }
        
        private void IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S474");
        }
        
        private void IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S474");
        }
        
        private void IoCtlRequestTestCaseS28GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S232");
        }
        
        private void IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S475");
        }
        
        private void IoCtlRequestTestCaseS28GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S475");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS30() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S157\'");
            bool temp1082;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1082);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1082);
            this.Manager.Comment("reaching state \'S233\'");
            int temp1095 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS30GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS30GetObjectFunctionalityChecker1)));
            if ((temp1095 == 0)) {
                this.Manager.Comment("reaching state \'S324\'");
                bool temp1083;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1083);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1083);
                this.Manager.Comment("reaching state \'S476\'");
                int temp1088 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker1)));
                if ((temp1088 == 0)) {
                    this.Manager.Comment("reaching state \'S652\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1084;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1084 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S886\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1084, "return of CreateFile, state S886");
                    this.Manager.Comment("reaching state \'S1160\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1085;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,False)\'" +
                            "");
                    temp1085 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1448\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1085, "return of FsCtlDeleteReparsePoint, state S1448");
                    this.Manager.Comment("reaching state \'S1772\'");
                    goto label197;
                }
                if ((temp1088 == 1)) {
                    this.Manager.Comment("reaching state \'S653\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1086;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1086 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S887\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1086, "return of CreateFile, state S887");
                    this.Manager.Comment("reaching state \'S1161\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1087;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,False)\'" +
                            "");
                    temp1087 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), false);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1449\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1087, "return of FsCtlDeleteReparsePoint, state S1449");
                    this.Manager.Comment("reaching state \'S1773\'");
                    goto label197;
                }
                throw new InvalidOperationException("never reached");
            label197:
;
                goto label199;
            }
            if ((temp1095 == 1)) {
                this.Manager.Comment("reaching state \'S325\'");
                bool temp1089;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1089);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1089);
                this.Manager.Comment("reaching state \'S477\'");
                int temp1094 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker3)));
                if ((temp1094 == 0)) {
                    this.Manager.Comment("reaching state \'S654\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1090;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1090 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S888\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1090, "return of CreateFile, state S888");
                    this.Manager.Comment("reaching state \'S1162\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1091;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,False)\'" +
                            "");
                    temp1091 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1450\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1091, "return of FsCtlDeleteReparsePoint, state S1450");
                    this.Manager.Comment("reaching state \'S1774\'");
                    goto label198;
                }
                if ((temp1094 == 1)) {
                    this.Manager.Comment("reaching state \'S655\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1092;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1092 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S889\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1092, "return of CreateFile, state S889");
                    this.Manager.Comment("reaching state \'S1163\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1093;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(EMPTY,True)\'");
                    temp1093 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, true);
                    this.Manager.Checkpoint("MS-FSA_R1254");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT]On completion, the object store MUST return:[Statu" +
                            "s].");
                    this.Manager.Checkpoint("MS-FSA_R5001");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:]\r\n    " +
                            "            Upon successful completion of the operation, the object store MUST r" +
                            "eturn:status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1451\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1093, "return of FsCtlDeleteReparsePoint, state S1451");
                    this.Manager.Comment("reaching state \'S1775\'");
                    goto label198;
                }
                throw new InvalidOperationException("never reached");
            label198:
;
                goto label199;
            }
            throw new InvalidOperationException("never reached");
        label199:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS30GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S233");
        }
        
        private void IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S476");
        }
        
        private void IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S476");
        }
        
        private void IoCtlRequestTestCaseS30GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S233");
        }
        
        private void IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S477");
        }
        
        private void IoCtlRequestTestCaseS30GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S477");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS32() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S158\'");
            bool temp1096;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1096);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1096);
            this.Manager.Comment("reaching state \'S234\'");
            int temp1109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS32GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS32GetObjectFunctionalityChecker1)));
            if ((temp1109 == 0)) {
                this.Manager.Comment("reaching state \'S326\'");
                bool temp1097;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1097);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1097);
                this.Manager.Comment("reaching state \'S478\'");
                int temp1102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker1)));
                if ((temp1102 == 0)) {
                    this.Manager.Comment("reaching state \'S656\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1098;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1098 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S890\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1098, "return of CreateFile, state S890");
                    this.Manager.Comment("reaching state \'S1164\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1099;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ONE,False)\'");
                    temp1099 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(1)), false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1452\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1099, "return of FsCtlDeleteReparsePoint, state S1452");
                    this.Manager.Comment("reaching state \'S1776\'");
                    goto label200;
                }
                if ((temp1102 == 1)) {
                    this.Manager.Comment("reaching state \'S657\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1100;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1100 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S891\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1100, "return of CreateFile, state S891");
                    this.Manager.Comment("reaching state \'S1165\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1101;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ONE,False)\'");
                    temp1101 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(1)), false);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1453\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1101, "return of FsCtlDeleteReparsePoint, state S1453");
                    this.Manager.Comment("reaching state \'S1777\'");
                    goto label200;
                }
                throw new InvalidOperationException("never reached");
            label200:
;
                goto label202;
            }
            if ((temp1109 == 1)) {
                this.Manager.Comment("reaching state \'S327\'");
                bool temp1103;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1103);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1103);
                this.Manager.Comment("reaching state \'S479\'");
                int temp1108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker3)));
                if ((temp1108 == 0)) {
                    this.Manager.Comment("reaching state \'S658\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1104;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1104 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S892\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1104, "return of CreateFile, state S892");
                    this.Manager.Comment("reaching state \'S1166\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1105;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ONE,False)\'");
                    temp1105 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(1)), false);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1454\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1105, "return of FsCtlDeleteReparsePoint, state S1454");
                    this.Manager.Comment("reaching state \'S1778\'");
                    goto label201;
                }
                if ((temp1108 == 1)) {
                    this.Manager.Comment("reaching state \'S659\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1106;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1106 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S893\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1106, "return of CreateFile, state S893");
                    this.Manager.Comment("reaching state \'S1167\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1107;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NON_MICROSOFT_RANGE_TAG,True)\'");
                    temp1107 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, true);
                    this.Manager.Checkpoint("MS-FSA_R1257");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.]otherwise[If ReparseTag is not a non-Microsoft Reparse Tag] 
                    the operation MUST be failed with STATUS_IO_REPARSE_DATA_INVALID.");
                    this.Manager.Comment("reaching state \'S1455\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/IO_REPARSE_DATA_INVALID\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_DATA_INVALID, temp1107, "return of FsCtlDeleteReparsePoint, state S1455");
                    this.Manager.Comment("reaching state \'S1779\'");
                    goto label201;
                }
                throw new InvalidOperationException("never reached");
            label201:
;
                goto label202;
            }
            throw new InvalidOperationException("never reached");
        label202:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS32GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S234");
        }
        
        private void IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S478");
        }
        
        private void IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S478");
        }
        
        private void IoCtlRequestTestCaseS32GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S234");
        }
        
        private void IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S479");
        }
        
        private void IoCtlRequestTestCaseS32GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S479");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS34() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S159\'");
            bool temp1110;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1110);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1110);
            this.Manager.Comment("reaching state \'S235\'");
            int temp1123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS34GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS34GetObjectFunctionalityChecker1)));
            if ((temp1123 == 0)) {
                this.Manager.Comment("reaching state \'S328\'");
                bool temp1111;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1111);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1111);
                this.Manager.Comment("reaching state \'S480\'");
                int temp1116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker1)));
                if ((temp1116 == 0)) {
                    this.Manager.Comment("reaching state \'S660\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1112;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1112 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S894\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1112, "return of CreateFile, state S894");
                    this.Manager.Comment("reaching state \'S1168\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1113;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,True)\'");
                    temp1113 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), true);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1456\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1113, "return of FsCtlDeleteReparsePoint, state S1456");
                    this.Manager.Comment("reaching state \'S1780\'");
                    goto label203;
                }
                if ((temp1116 == 1)) {
                    this.Manager.Comment("reaching state \'S661\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1114;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1114 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S895\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1114, "return of CreateFile, state S895");
                    this.Manager.Comment("reaching state \'S1169\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1115;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,True)\'");
                    temp1115 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), true);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1457\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1115, "return of FsCtlDeleteReparsePoint, state S1457");
                    this.Manager.Comment("reaching state \'S1781\'");
                    goto label203;
                }
                throw new InvalidOperationException("never reached");
            label203:
;
                goto label205;
            }
            if ((temp1123 == 1)) {
                this.Manager.Comment("reaching state \'S329\'");
                bool temp1117;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1117);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1117);
                this.Manager.Comment("reaching state \'S481\'");
                int temp1122 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker3)));
                if ((temp1122 == 0)) {
                    this.Manager.Comment("reaching state \'S662\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1118;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1118 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S896\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1118, "return of CreateFile, state S896");
                    this.Manager.Comment("reaching state \'S1170\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1119;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,True)\'");
                    temp1119 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), true);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1458\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1119, "return of FsCtlDeleteReparsePoint, state S1458");
                    this.Manager.Comment("reaching state \'S1782\'");
                    goto label204;
                }
                if ((temp1122 == 1)) {
                    this.Manager.Comment("reaching state \'S663\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1120;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1120 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S897\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1120, "return of CreateFile, state S897");
                    this.Manager.Comment("reaching state \'S1171\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1121;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ZERO,True)\'");
                    temp1121 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), true);
                    this.Manager.Checkpoint("MS-FSA_R2437");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT,\r\n                    Phase 1 -- Verify the parame" +
                            "ters.]If the ReparseTag is IO_REPARSE_TAG_RESERVED_ONE, \r\n                    th" +
                            "e operation MUST be failed with STATUS_IO_REPARSE_TAG_INVALID.");
                    this.Manager.Comment("reaching state \'S1459\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/IO_REPARSE_TAG_INVALID\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_TAG_INVALID, temp1121, "return of FsCtlDeleteReparsePoint, state S1459");
                    this.Manager.Comment("reaching state \'S1783\'");
                    goto label204;
                }
                throw new InvalidOperationException("never reached");
            label204:
;
                goto label205;
            }
            throw new InvalidOperationException("never reached");
        label205:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS34GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S235");
        }
        
        private void IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S480");
        }
        
        private void IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S480");
        }
        
        private void IoCtlRequestTestCaseS34GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S235");
        }
        
        private void IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S481");
        }
        
        private void IoCtlRequestTestCaseS34GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S481");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS36() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S160\'");
            bool temp1124;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1124);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1124);
            this.Manager.Comment("reaching state \'S236\'");
            int temp1137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS36GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS36GetObjectFunctionalityChecker1)));
            if ((temp1137 == 0)) {
                this.Manager.Comment("reaching state \'S330\'");
                bool temp1125;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1125);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1125);
                this.Manager.Comment("reaching state \'S482\'");
                int temp1130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker1)));
                if ((temp1130 == 0)) {
                    this.Manager.Comment("reaching state \'S664\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1126;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1126 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S898\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1126, "return of CreateFile, state S898");
                    this.Manager.Comment("reaching state \'S1172\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1127;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NotEqualOpenFileReparseTag,True)\'");
                    temp1127 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NotEqualOpenFileReparseTag, true);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1460\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1127, "return of FsCtlDeleteReparsePoint, state S1460");
                    this.Manager.Comment("reaching state \'S1784\'");
                    goto label206;
                }
                if ((temp1130 == 1)) {
                    this.Manager.Comment("reaching state \'S665\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1128;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1128 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S899\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1128, "return of CreateFile, state S899");
                    this.Manager.Comment("reaching state \'S1173\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1129;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NotEqualOpenFileReparseTag,True)\'");
                    temp1129 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NotEqualOpenFileReparseTag, true);
                    this.Manager.Checkpoint("MS-FSA_R4999");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT] If the object store does not implement this funct" +
                            "ionality, \r\n                    the operation MUST be failed with STATUS_INVALID" +
                            "_DEVICE_REQUEST.<21>");
                    this.Manager.Comment("reaching state \'S1461\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1129, "return of FsCtlDeleteReparsePoint, state S1461");
                    this.Manager.Comment("reaching state \'S1785\'");
                    goto label206;
                }
                throw new InvalidOperationException("never reached");
            label206:
;
                goto label208;
            }
            if ((temp1137 == 1)) {
                this.Manager.Comment("reaching state \'S331\'");
                bool temp1131;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1131);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1131);
                this.Manager.Comment("reaching state \'S483\'");
                int temp1136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker3)));
                if ((temp1136 == 0)) {
                    this.Manager.Comment("reaching state \'S666\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1132;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1132 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S900\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1132, "return of CreateFile, state S900");
                    this.Manager.Comment("reaching state \'S1174\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1133;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(NotEqualOpenFileReparseTag,True)\'");
                    temp1133 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NotEqualOpenFileReparseTag, true);
                    this.Manager.Checkpoint("MS-FSA_R5000");
                    this.Manager.Checkpoint(@"[In FSCTL_DELETE_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 -- Verify the parameters.] 
                    If Open.File.Volume.IsReparsePointsSupported is FALSE, the operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1462\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1133, "return of FsCtlDeleteReparsePoint, state S1462");
                    this.Manager.Comment("reaching state \'S1786\'");
                    goto label207;
                }
                if ((temp1136 == 1)) {
                    this.Manager.Comment("reaching state \'S667\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1134;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                            "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                    temp1134 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S901\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1134, "return of CreateFile, state S901");
                    this.Manager.Comment("reaching state \'S1175\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1135;
                    this.Manager.Comment("executing step \'call FsCtlDeleteReparsePoint(IO_REPARSE_TAG_RESERVED_ONE,True)\'");
                    temp1135 = this.IFSAAdapterInstance.FsCtlDeleteReparsePoint(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(1)), true);
                    this.Manager.Checkpoint("MS-FSA_R984");
                    this.Manager.Checkpoint("[In FSCTL_DELETE_REPARSE_POINT,Phase 1 - Verify the parameters.]\r\n               " +
                            "     If the ReparseTag is IO_REPARSE_TAG_RESERVED_ZERO , the operation MUST be f" +
                            "ailed with STATUS_IO_REPARSE_TAG_INVALID.");
                    this.Manager.Comment("reaching state \'S1463\'");
                    this.Manager.Comment("checking step \'return FsCtlDeleteReparsePoint/IO_REPARSE_TAG_INVALID\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.IO_REPARSE_TAG_INVALID, temp1135, "return of FsCtlDeleteReparsePoint, state S1463");
                    this.Manager.Comment("reaching state \'S1787\'");
                    goto label207;
                }
                throw new InvalidOperationException("never reached");
            label207:
;
                goto label208;
            }
            throw new InvalidOperationException("never reached");
        label208:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS36GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S236");
        }
        
        private void IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S482");
        }
        
        private void IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S482");
        }
        
        private void IoCtlRequestTestCaseS36GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S236");
        }
        
        private void IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S483");
        }
        
        private void IoCtlRequestTestCaseS36GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S483");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS38() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            bool temp1138;
            this.Manager.Comment("executing step \'call GetopenHasManageVolPrivilege(out _)\'");
            this.IFSAAdapterInstance.GetopenHasManageVolPrivilege(out temp1138);
            this.Manager.AddReturn(GetopenHasManageVolPrivilegeInfo, null, temp1138);
            this.Manager.Comment("reaching state \'S39\'");
            int temp1159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS38GetopenHasManageVolPrivilegeChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS38GetopenHasManageVolPrivilegeChecker1)));
            if ((temp1159 == 0)) {
                this.Manager.Comment("reaching state \'S161\'");
                bool temp1139;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1139);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1139);
                this.Manager.Comment("reaching state \'S237\'");
                int temp1148 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS38GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS38GetObjectFunctionalityChecker1)));
                if ((temp1148 == 0)) {
                    this.Manager.Comment("reaching state \'S332\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S484\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S668\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1140;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1140);
                    this.Manager.Comment("reaching state \'S902\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1140, "securityContext of GetSystemConfig, state S902");
                    this.Manager.Comment("reaching state \'S1176\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1141;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1141 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1464\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1141, "return of CreateFile, state S1464");
                    this.Manager.Comment("reaching state \'S1788\'");
                    bool temp1142;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1143;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,False,False,Fals" +
                            "e,out _)\'");
                    temp1143 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, false, false, out temp1142);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2088\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1142, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2088");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1143, "return of FsCtlFindFilesBySID, state S2088");
                    this.Manager.Comment("reaching state \'S2308\'");
                    goto label209;
                }
                if ((temp1148 == 1)) {
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S485\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S669\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1144;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1144);
                    this.Manager.Comment("reaching state \'S903\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1144, "securityContext of GetSystemConfig, state S903");
                    this.Manager.Comment("reaching state \'S1177\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1145;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1145 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1465\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1145, "return of CreateFile, state S1465");
                    this.Manager.Comment("reaching state \'S1789\'");
                    bool temp1146;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1147;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,False,False,Fals" +
                            "e,out _)\'");
                    temp1147 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, false, false, out temp1146);
                    this.Manager.Checkpoint("MS-FSA_R1022");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.HasManageVolumeAccess is FALSE and Open.HasBackupAccess is " +
                            "FALSE, the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S2089\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1146, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2089");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1147, "return of FsCtlFindFilesBySID, state S2089");
                    this.Manager.Comment("reaching state \'S2309\'");
                    goto label209;
                }
                throw new InvalidOperationException("never reached");
            label209:
;
                goto label211;
            }
            if ((temp1159 == 1)) {
                this.Manager.Comment("reaching state \'S162\'");
                bool temp1149;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1149);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1149);
                this.Manager.Comment("reaching state \'S238\'");
                int temp1158 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS38GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS38GetObjectFunctionalityChecker3)));
                if ((temp1158 == 0)) {
                    this.Manager.Comment("reaching state \'S334\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S486\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S670\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1150;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1150);
                    this.Manager.Comment("reaching state \'S904\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1150, "securityContext of GetSystemConfig, state S904");
                    this.Manager.Comment("reaching state \'S1178\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1151;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1151 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1466\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1151, "return of CreateFile, state S1466");
                    this.Manager.Comment("reaching state \'S1790\'");
                    bool temp1152;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1153;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,False,False,Fals" +
                            "e,out _)\'");
                    temp1153 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, false, false, out temp1152);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2090\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1152, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2090");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1153, "return of FsCtlFindFilesBySID, state S2090");
                    this.Manager.Comment("reaching state \'S2310\'");
                    goto label210;
                }
                if ((temp1158 == 1)) {
                    this.Manager.Comment("reaching state \'S335\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S487\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S671\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1154;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1154);
                    this.Manager.Comment("reaching state \'S905\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1154, "securityContext of GetSystemConfig, state S905");
                    this.Manager.Comment("reaching state \'S1179\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1155;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1155 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1467\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1155, "return of CreateFile, state S1467");
                    this.Manager.Comment("reaching state \'S1791\'");
                    bool temp1156;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1157;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,BufferSizeSuccess,True,False,False," +
                            "out _)\'");
                    temp1157 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, false, false, out temp1156);
                    this.Manager.Checkpoint("MS-FSA_R1023");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.File.Volume.QuotaInformation is empty, the operation MUST b" +
                            "e failed with STATUS_NO_QUOTAS_FOR_ACCOUNT.");
                    this.Manager.Comment("reaching state \'S2091\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:NO_QUOTAS_FOR_ACCOUNT\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1156, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2091");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NO_QUOTAS_FOR_ACCOUNT, temp1157, "return of FsCtlFindFilesBySID, state S2091");
                    this.Manager.Comment("reaching state \'S2311\'");
                    goto label210;
                }
                throw new InvalidOperationException("never reached");
            label210:
;
                goto label211;
            }
            throw new InvalidOperationException("never reached");
        label211:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS38GetopenHasManageVolPrivilegeChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S39");
        }
        
        private void IoCtlRequestTestCaseS38GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S237");
        }
        
        private void IoCtlRequestTestCaseS38GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S237");
        }
        
        private void IoCtlRequestTestCaseS38GetopenHasManageVolPrivilegeChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S39");
        }
        
        private void IoCtlRequestTestCaseS38GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S238");
        }
        
        private void IoCtlRequestTestCaseS38GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S238");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS4() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S144\'");
            bool temp1160;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp1160);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp1160);
            this.Manager.Comment("reaching state \'S220\'");
            int temp1253 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS4GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS4GetIfNtfsFileSystemChecker1)));
            if ((temp1253 == 0)) {
                this.Manager.Comment("reaching state \'S298\'");
                bool temp1161;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1161);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1161);
                this.Manager.Comment("reaching state \'S450\'");
                int temp1206 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS4GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS4GetObjectFunctionalityChecker1)));
                if ((temp1206 == 0)) {
                    this.Manager.Comment("reaching state \'S606\'");
                    bool temp1162;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1162);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1162);
                    this.Manager.Comment("reaching state \'S840\'");
                    int temp1183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker1)));
                    if ((temp1183 == 0)) {
                        this.Manager.Comment("reaching state \'S1082\'");
                        bool temp1163;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1163);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1163);
                        this.Manager.Comment("reaching state \'S1376\'");
                        int temp1172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp1172 == 0)) {
                            this.Manager.Comment("reaching state \'S1636\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1164;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1164 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1960\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1164, "return of CreateFile, state S1960");
                            this.Manager.Comment("reaching state \'S2180\'");
                            bool temp1165;
                            bool temp1166;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1167;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1167 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1165, out temp1166);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2400\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1165, "isBytesReturnedSet of FsCtlForEasyRequest, state S2400");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1166, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2400");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1167, "return of FsCtlForEasyRequest, state S2400");
                            this.Manager.Comment("reaching state \'S2560\'");
                            goto label212;
                        }
                        if ((temp1172 == 1)) {
                            this.Manager.Comment("reaching state \'S1637\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1168;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1168 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1961\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1168, "return of CreateFile, state S1961");
                            this.Manager.Comment("reaching state \'S2181\'");
                            bool temp1169;
                            bool temp1170;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1171;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1171 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1169, out temp1170);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2401\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1169, "isBytesReturnedSet of FsCtlForEasyRequest, state S2401");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1170, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2401");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1171, "return of FsCtlForEasyRequest, state S2401");
                            this.Manager.Comment("reaching state \'S2561\'");
                            goto label212;
                        }
                        throw new InvalidOperationException("never reached");
                    label212:
;
                        goto label214;
                    }
                    if ((temp1183 == 1)) {
                        this.Manager.Comment("reaching state \'S1083\'");
                        bool temp1173;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1173);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1173);
                        this.Manager.Comment("reaching state \'S1377\'");
                        int temp1182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp1182 == 0)) {
                            this.Manager.Comment("reaching state \'S1638\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1174;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1174 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1962\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1174, "return of CreateFile, state S1962");
                            this.Manager.Comment("reaching state \'S2182\'");
                            bool temp1175;
                            bool temp1176;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1177;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1177 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1175, out temp1176);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2402\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1175, "isBytesReturnedSet of FsCtlForEasyRequest, state S2402");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1176, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2402");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1177, "return of FsCtlForEasyRequest, state S2402");
                            this.Manager.Comment("reaching state \'S2562\'");
                            goto label213;
                        }
                        if ((temp1182 == 1)) {
                            this.Manager.Comment("reaching state \'S1639\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1178;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1178 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1963\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1178, "return of CreateFile, state S1963");
                            this.Manager.Comment("reaching state \'S2183\'");
                            bool temp1179;
                            bool temp1180;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1181;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1181 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1179, out temp1180);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2403\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1179, "isBytesReturnedSet of FsCtlForEasyRequest, state S2403");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1180, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2403");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1181, "return of FsCtlForEasyRequest, state S2403");
                            this.Manager.Comment("reaching state \'S2563\'");
                            goto label213;
                        }
                        throw new InvalidOperationException("never reached");
                    label213:
;
                        goto label214;
                    }
                    throw new InvalidOperationException("never reached");
                label214:
;
                    goto label218;
                }
                if ((temp1206 == 1)) {
                    this.Manager.Comment("reaching state \'S607\'");
                    bool temp1184;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1184);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1184);
                    this.Manager.Comment("reaching state \'S841\'");
                    int temp1205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker3)));
                    if ((temp1205 == 0)) {
                        this.Manager.Comment("reaching state \'S1084\'");
                        bool temp1185;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1185);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1185);
                        this.Manager.Comment("reaching state \'S1378\'");
                        int temp1194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp1194 == 0)) {
                            this.Manager.Comment("reaching state \'S1640\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1186;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1186 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1964\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1186, "return of CreateFile, state S1964");
                            this.Manager.Comment("reaching state \'S2184\'");
                            bool temp1187;
                            bool temp1188;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1189;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1189 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1187, out temp1188);
                            this.Manager.Checkpoint("MS-FSA_R5008");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Pseudocode for the operation is as follows:\r\n          " +
                                    "                      If OutputBufferSize is less than sizeof( USHORT ) (2 bytes" +
                                    "), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2404\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1187, "isBytesReturnedSet of FsCtlForEasyRequest, state S2404");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1188, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2404");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1189, "return of FsCtlForEasyRequest, state S2404");
                            this.Manager.Comment("reaching state \'S2564\'");
                            goto label215;
                        }
                        if ((temp1194 == 1)) {
                            this.Manager.Comment("reaching state \'S1641\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1190;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1190 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1965\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1190, "return of CreateFile, state S1965");
                            this.Manager.Comment("reaching state \'S2185\'");
                            bool temp1191;
                            bool temp1192;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1193;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1193 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1191, out temp1192);
                            this.Manager.Checkpoint("MS-FSA_R5008");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Pseudocode for the operation is as follows:\r\n          " +
                                    "                      If OutputBufferSize is less than sizeof( USHORT ) (2 bytes" +
                                    "), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2405\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1191, "isBytesReturnedSet of FsCtlForEasyRequest, state S2405");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1192, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2405");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1193, "return of FsCtlForEasyRequest, state S2405");
                            this.Manager.Comment("reaching state \'S2565\'");
                            goto label215;
                        }
                        throw new InvalidOperationException("never reached");
                    label215:
;
                        goto label217;
                    }
                    if ((temp1205 == 1)) {
                        this.Manager.Comment("reaching state \'S1085\'");
                        bool temp1195;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1195);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1195);
                        this.Manager.Comment("reaching state \'S1379\'");
                        int temp1204 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp1204 == 0)) {
                            this.Manager.Comment("reaching state \'S1642\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1196;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1196 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1966\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1196, "return of CreateFile, state S1966");
                            this.Manager.Comment("reaching state \'S2186\'");
                            bool temp1197;
                            bool temp1198;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1199;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,LessThanFILE_QUERY_SP" +
                                    "ARING_BUFFER,out _,out _)\'");
                            temp1199 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_SPARING_BUFFER, out temp1197, out temp1198);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2406\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1197, "isBytesReturnedSet of FsCtlForEasyRequest, state S2406");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1198, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2406");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1199, "return of FsCtlForEasyRequest, state S2406");
                            this.Manager.Comment("reaching state \'S2566\'");
                            goto label216;
                        }
                        if ((temp1204 == 1)) {
                            this.Manager.Comment("reaching state \'S1643\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1200;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1200 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1967\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1200, "return of CreateFile, state S1967");
                            this.Manager.Comment("reaching state \'S2187\'");
                            bool temp1201;
                            bool temp1202;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1203;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,LessThan" +
                                    "SizeOf_FILESYSTEM_STATISTICS,out _,out _)\'");
                            temp1203 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeOf_FILESYSTEM_STATISTICS, out temp1201, out temp1202);
                            this.Manager.Checkpoint("[2.1.5.9.6   FSCTL_FILESYSTEM_GET_STATISTICS] Pseudocode for the operation is as " +
                                    "follows:\r\n                                If OutputBufferSize is less than sizeo" +
                                    "f(FILESYSTEM_STATISTICS), the operation is failed with STATUS_BUFFER_TOO_SMALL.");
                            this.Manager.Comment("reaching state \'S2407\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:BUFFER_TOO_SMALL\'" +
                                    "");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1201, "isBytesReturnedSet of FsCtlForEasyRequest, state S2407");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1202, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2407");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1203, "return of FsCtlForEasyRequest, state S2407");
                            this.Manager.Comment("reaching state \'S2567\'");
                            goto label216;
                        }
                        throw new InvalidOperationException("never reached");
                    label216:
;
                        goto label217;
                    }
                    throw new InvalidOperationException("never reached");
                label217:
;
                    goto label218;
                }
                throw new InvalidOperationException("never reached");
            label218:
;
                goto label226;
            }
            if ((temp1253 == 1)) {
                this.Manager.Comment("reaching state \'S299\'");
                bool temp1207;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1207);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1207);
                this.Manager.Comment("reaching state \'S451\'");
                int temp1252 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS4GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS4GetObjectFunctionalityChecker3)));
                if ((temp1252 == 0)) {
                    this.Manager.Comment("reaching state \'S608\'");
                    bool temp1208;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1208);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1208);
                    this.Manager.Comment("reaching state \'S842\'");
                    int temp1229 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker5)));
                    if ((temp1229 == 0)) {
                        this.Manager.Comment("reaching state \'S1086\'");
                        bool temp1209;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1209);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1209);
                        this.Manager.Comment("reaching state \'S1380\'");
                        int temp1218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp1218 == 0)) {
                            this.Manager.Comment("reaching state \'S1644\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1210;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1210 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1968\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1210, "return of CreateFile, state S1968");
                            this.Manager.Comment("reaching state \'S2188\'");
                            bool temp1211;
                            bool temp1212;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1213;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,LessThan" +
                                    "SizeOf_FILESYSTEM_STATISTICS,out _,out _)\'");
                            temp1213 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeOf_FILESYSTEM_STATISTICS, out temp1211, out temp1212);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2408\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1211, "isBytesReturnedSet of FsCtlForEasyRequest, state S2408");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1212, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2408");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1213, "return of FsCtlForEasyRequest, state S2408");
                            this.Manager.Comment("reaching state \'S2568\'");
                            goto label219;
                        }
                        if ((temp1218 == 1)) {
                            this.Manager.Comment("reaching state \'S1645\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1214;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1214 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1969\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1214, "return of CreateFile, state S1969");
                            this.Manager.Comment("reaching state \'S2189\'");
                            bool temp1215;
                            bool temp1216;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1217;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_SPARING_INFO,LessThanFILE_QUERY_SP" +
                                    "ARING_BUFFER,out _,out _)\'");
                            temp1217 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_SPARING_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_SPARING_BUFFER, out temp1215, out temp1216);
                            this.Manager.Checkpoint("MS-FSA_R7850");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_SPARING_INFO]If the object store does not implement this function" +
                                    "ality, \r\n                                the operation MUST be failed with STATU" +
                                    "S_INVALID_DEVICE_REQUEST.<35>");
                            this.Manager.Comment("reaching state \'S2409\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1215, "isBytesReturnedSet of FsCtlForEasyRequest, state S2409");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1216, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2409");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1217, "return of FsCtlForEasyRequest, state S2409");
                            this.Manager.Comment("reaching state \'S2569\'");
                            goto label219;
                        }
                        throw new InvalidOperationException("never reached");
                    label219:
;
                        goto label221;
                    }
                    if ((temp1229 == 1)) {
                        this.Manager.Comment("reaching state \'S1087\'");
                        bool temp1219;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1219);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1219);
                        this.Manager.Comment("reaching state \'S1381\'");
                        int temp1228 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp1228 == 0)) {
                            this.Manager.Comment("reaching state \'S1646\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1220;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1220 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1970\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1220, "return of CreateFile, state S1970");
                            this.Manager.Comment("reaching state \'S2190\'");
                            bool temp1221;
                            bool temp1222;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1223;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1223 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1221, out temp1222);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2410\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1221, "isBytesReturnedSet of FsCtlForEasyRequest, state S2410");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1222, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2410");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1223, "return of FsCtlForEasyRequest, state S2410");
                            this.Manager.Comment("reaching state \'S2570\'");
                            goto label220;
                        }
                        if ((temp1228 == 1)) {
                            this.Manager.Comment("reaching state \'S1647\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1224;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1224 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1971\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1224, "return of CreateFile, state S1971");
                            this.Manager.Comment("reaching state \'S2191\'");
                            bool temp1225;
                            bool temp1226;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1227;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1227 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1225, out temp1226);
                            this.Manager.Checkpoint("MS-FSA_R1043");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION] If the object store does not implement this functional" +
                                    "ity,\r\n                                the operation MUST be failed with STATUS_I" +
                                    "NVALID_DEVICE_REQUEST.<26>");
                            this.Manager.Comment("reaching state \'S2411\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1225, "isBytesReturnedSet of FsCtlForEasyRequest, state S2411");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1226, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2411");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1227, "return of FsCtlForEasyRequest, state S2411");
                            this.Manager.Comment("reaching state \'S2571\'");
                            goto label220;
                        }
                        throw new InvalidOperationException("never reached");
                    label220:
;
                        goto label221;
                    }
                    throw new InvalidOperationException("never reached");
                label221:
;
                    goto label225;
                }
                if ((temp1252 == 1)) {
                    this.Manager.Comment("reaching state \'S609\'");
                    bool temp1230;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1230);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1230);
                    this.Manager.Comment("reaching state \'S843\'");
                    int temp1251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker7)));
                    if ((temp1251 == 0)) {
                        this.Manager.Comment("reaching state \'S1088\'");
                        bool temp1231;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1231);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1231);
                        this.Manager.Comment("reaching state \'S1382\'");
                        int temp1240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp1240 == 0)) {
                            this.Manager.Comment("reaching state \'S1648\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1232;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1232 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1972\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1232, "return of CreateFile, state S1972");
                            this.Manager.Comment("reaching state \'S2192\'");
                            bool temp1233;
                            bool temp1234;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1235;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1235 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1233, out temp1234);
                            this.Manager.Checkpoint("MS-FSA_R5008");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Pseudocode for the operation is as follows:\r\n          " +
                                    "                      If OutputBufferSize is less than sizeof( USHORT ) (2 bytes" +
                                    "), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2412\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1233, "isBytesReturnedSet of FsCtlForEasyRequest, state S2412");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1234, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2412");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1235, "return of FsCtlForEasyRequest, state S2412");
                            this.Manager.Comment("reaching state \'S2572\'");
                            goto label222;
                        }
                        if ((temp1240 == 1)) {
                            this.Manager.Comment("reaching state \'S1649\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1236;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1236 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1973\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1236, "return of CreateFile, state S1973");
                            this.Manager.Comment("reaching state \'S2193\'");
                            bool temp1237;
                            bool temp1238;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1239;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1239 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1237, out temp1238);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2413\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1237, "isBytesReturnedSet of FsCtlForEasyRequest, state S2413");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1238, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2413");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp1239, "return of FsCtlForEasyRequest, state S2413");
                            this.Manager.Comment("reaching state \'S2573\'");
                            goto label222;
                        }
                        throw new InvalidOperationException("never reached");
                    label222:
;
                        goto label224;
                    }
                    if ((temp1251 == 1)) {
                        this.Manager.Comment("reaching state \'S1089\'");
                        bool temp1241;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1241);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1241);
                        this.Manager.Comment("reaching state \'S1383\'");
                        int temp1250 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp1250 == 0)) {
                            this.Manager.Comment("reaching state \'S1650\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1242;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1242 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1974\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1242, "return of CreateFile, state S1974");
                            this.Manager.Comment("reaching state \'S2194\'");
                            bool temp1243;
                            bool temp1244;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1245;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1245 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1243, out temp1244);
                            this.Manager.Checkpoint("MS-FSA_R5008");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Pseudocode for the operation is as follows:\r\n          " +
                                    "                      If OutputBufferSize is less than sizeof( USHORT ) (2 bytes" +
                                    "), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2414\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1243, "isBytesReturnedSet of FsCtlForEasyRequest, state S2414");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1244, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2414");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1245, "return of FsCtlForEasyRequest, state S2414");
                            this.Manager.Comment("reaching state \'S2574\'");
                            goto label223;
                        }
                        if ((temp1250 == 1)) {
                            this.Manager.Comment("reaching state \'S1651\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1246;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1246 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1975\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1246, "return of CreateFile, state S1975");
                            this.Manager.Comment("reaching state \'S2195\'");
                            bool temp1247;
                            bool temp1248;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1249;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_GET_COMPRESSION,LessThanTwoBytes,o" +
                                    "ut _,out _)\'");
                            temp1249 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_GET_COMPRESSION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, out temp1247, out temp1248);
                            this.Manager.Checkpoint("MS-FSA_R5008");
                            this.Manager.Checkpoint("[In FSCTL_GET_COMPRESSION]Pseudocode for the operation is as follows:\r\n          " +
                                    "                      If OutputBufferSize is less than sizeof( USHORT ) (2 bytes" +
                                    "), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2415\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1247, "isBytesReturnedSet of FsCtlForEasyRequest, state S2415");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1248, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2415");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1249, "return of FsCtlForEasyRequest, state S2415");
                            this.Manager.Comment("reaching state \'S2575\'");
                            goto label223;
                        }
                        throw new InvalidOperationException("never reached");
                    label223:
;
                        goto label224;
                    }
                    throw new InvalidOperationException("never reached");
                label224:
;
                    goto label225;
                }
                throw new InvalidOperationException("never reached");
            label225:
;
                goto label226;
            }
            throw new InvalidOperationException("never reached");
        label226:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS4GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S220");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S450");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S840");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1376");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1376");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S840");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1377");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1377");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S450");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S841");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1378");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1378");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S841");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1379");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1379");
        }
        
        private void IoCtlRequestTestCaseS4GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S220");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S451");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S842");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1380");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1380");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S842");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1381");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1381");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S451");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S843");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1382");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1382");
        }
        
        private void IoCtlRequestTestCaseS4GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S843");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1383");
        }
        
        private void IoCtlRequestTestCaseS4GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1383");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS40() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            bool temp1254;
            this.Manager.Comment("executing step \'call GetopenHasManageVolPrivilege(out _)\'");
            this.IFSAAdapterInstance.GetopenHasManageVolPrivilege(out temp1254);
            this.Manager.AddReturn(GetopenHasManageVolPrivilegeInfo, null, temp1254);
            this.Manager.Comment("reaching state \'S41\'");
            int temp1275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS40GetopenHasManageVolPrivilegeChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS40GetopenHasManageVolPrivilegeChecker1)));
            if ((temp1275 == 0)) {
                this.Manager.Comment("reaching state \'S163\'");
                bool temp1255;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1255);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1255);
                this.Manager.Comment("reaching state \'S239\'");
                int temp1264 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS40GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS40GetObjectFunctionalityChecker1)));
                if ((temp1264 == 0)) {
                    this.Manager.Comment("reaching state \'S336\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S488\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S672\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1256;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1256);
                    this.Manager.Comment("reaching state \'S906\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1256, "securityContext of GetSystemConfig, state S906");
                    this.Manager.Comment("reaching state \'S1180\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1257;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1257 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1468\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1257, "return of CreateFile, state S1468");
                    this.Manager.Comment("reaching state \'S1792\'");
                    bool temp1258;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1259;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,BufferSizeSuccess,True,True,True,ou" +
                            "t _)\'");
                    temp1259 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, true, out temp1258);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2092\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1258, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2092");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1259, "return of FsCtlFindFilesBySID, state S2092");
                    this.Manager.Comment("reaching state \'S2312\'");
                    goto label227;
                }
                if ((temp1264 == 1)) {
                    this.Manager.Comment("reaching state \'S337\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S489\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S673\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1260;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1260);
                    this.Manager.Comment("reaching state \'S907\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1260, "securityContext of GetSystemConfig, state S907");
                    this.Manager.Comment("reaching state \'S1181\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1261;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1261 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1469\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1261, "return of CreateFile, state S1469");
                    this.Manager.Comment("reaching state \'S1793\'");
                    bool temp1262;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1263;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,BufferSizeSuccess,True,True,True,ou" +
                            "t _)\'");
                    temp1263 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, true, out temp1262);
                    this.Manager.Checkpoint("MS-FSA_R1022");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.HasManageVolumeAccess is FALSE and Open.HasBackupAccess is " +
                            "FALSE, the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S2093\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1262, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2093");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1263, "return of FsCtlFindFilesBySID, state S2093");
                    this.Manager.Comment("reaching state \'S2313\'");
                    goto label227;
                }
                throw new InvalidOperationException("never reached");
            label227:
;
                goto label229;
            }
            if ((temp1275 == 1)) {
                this.Manager.Comment("reaching state \'S164\'");
                bool temp1265;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1265);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1265);
                this.Manager.Comment("reaching state \'S240\'");
                int temp1274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS40GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS40GetObjectFunctionalityChecker3)));
                if ((temp1274 == 0)) {
                    this.Manager.Comment("reaching state \'S338\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S490\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S674\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1266;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1266);
                    this.Manager.Comment("reaching state \'S908\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1266, "securityContext of GetSystemConfig, state S908");
                    this.Manager.Comment("reaching state \'S1182\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1267;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1267 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1470\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1267, "return of CreateFile, state S1470");
                    this.Manager.Comment("reaching state \'S1794\'");
                    bool temp1268;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1269;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,BufferSizeSuccess,True,True,True,ou" +
                            "t _)\'");
                    temp1269 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, true, out temp1268);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2094\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1268, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2094");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1269, "return of FsCtlFindFilesBySID, state S2094");
                    this.Manager.Comment("reaching state \'S2314\'");
                    goto label228;
                }
                if ((temp1274 == 1)) {
                    this.Manager.Comment("reaching state \'S339\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S491\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S675\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1270;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1270);
                    this.Manager.Comment("reaching state \'S909\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1270, "securityContext of GetSystemConfig, state S909");
                    this.Manager.Comment("reaching state \'S1183\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1271;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1271 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1471\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1271, "return of CreateFile, state S1471");
                    this.Manager.Comment("reaching state \'S1795\'");
                    bool temp1272;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1273;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,LessThanFILE_NAME_INFORMATION,True" +
                            ",False,False,out _)\'");
                    temp1273 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), true, false, false, out temp1272);
                    this.Manager.Checkpoint("MS-FSA_R1024");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If OutputBufferSize is less than sizeof( FILE_NAME_INFORMATION ), t" +
                            "he operation MUST be failed with STATUS_INVALID_USER_BUFFER.");
                    this.Manager.Comment("reaching state \'S2095\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_USER_BUFFER\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1272, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2095");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_USER_BUFFER, temp1273, "return of FsCtlFindFilesBySID, state S2095");
                    this.Manager.Comment("reaching state \'S2315\'");
                    goto label228;
                }
                throw new InvalidOperationException("never reached");
            label228:
;
                goto label229;
            }
            throw new InvalidOperationException("never reached");
        label229:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS40GetopenHasManageVolPrivilegeChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S41");
        }
        
        private void IoCtlRequestTestCaseS40GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S239");
        }
        
        private void IoCtlRequestTestCaseS40GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S239");
        }
        
        private void IoCtlRequestTestCaseS40GetopenHasManageVolPrivilegeChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S41");
        }
        
        private void IoCtlRequestTestCaseS40GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S240");
        }
        
        private void IoCtlRequestTestCaseS40GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S240");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS42() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            bool temp1276;
            this.Manager.Comment("executing step \'call GetopenHasManageVolPrivilege(out _)\'");
            this.IFSAAdapterInstance.GetopenHasManageVolPrivilege(out temp1276);
            this.Manager.AddReturn(GetopenHasManageVolPrivilegeInfo, null, temp1276);
            this.Manager.Comment("reaching state \'S43\'");
            int temp1297 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS42GetopenHasManageVolPrivilegeChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS42GetopenHasManageVolPrivilegeChecker1)));
            if ((temp1297 == 0)) {
                this.Manager.Comment("reaching state \'S165\'");
                bool temp1277;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1277);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1277);
                this.Manager.Comment("reaching state \'S241\'");
                int temp1286 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS42GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS42GetObjectFunctionalityChecker1)));
                if ((temp1286 == 0)) {
                    this.Manager.Comment("reaching state \'S340\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S492\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S676\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1278;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1278);
                    this.Manager.Comment("reaching state \'S910\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1278, "securityContext of GetSystemConfig, state S910");
                    this.Manager.Comment("reaching state \'S1184\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1279;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1279 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1472\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1279, "return of CreateFile, state S1472");
                    this.Manager.Comment("reaching state \'S1796\'");
                    bool temp1280;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1281;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,False" +
                            ",False,False,out _)\'");
                    temp1281 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, false, false, out temp1280);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2096\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1280, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2096");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1281, "return of FsCtlFindFilesBySID, state S2096");
                    this.Manager.Comment("reaching state \'S2316\'");
                    goto label230;
                }
                if ((temp1286 == 1)) {
                    this.Manager.Comment("reaching state \'S341\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S493\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S677\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1282;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1282);
                    this.Manager.Comment("reaching state \'S911\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1282, "securityContext of GetSystemConfig, state S911");
                    this.Manager.Comment("reaching state \'S1185\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1283;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1283 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1473\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1283, "return of CreateFile, state S1473");
                    this.Manager.Comment("reaching state \'S1797\'");
                    bool temp1284;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1285;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,False" +
                            ",False,False,out _)\'");
                    temp1285 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, false, false, out temp1284);
                    this.Manager.Checkpoint("MS-FSA_R1022");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.HasManageVolumeAccess is FALSE and Open.HasBackupAccess is " +
                            "FALSE, the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S2097\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1284, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2097");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1285, "return of FsCtlFindFilesBySID, state S2097");
                    this.Manager.Comment("reaching state \'S2317\'");
                    goto label230;
                }
                throw new InvalidOperationException("never reached");
            label230:
;
                goto label232;
            }
            if ((temp1297 == 1)) {
                this.Manager.Comment("reaching state \'S166\'");
                bool temp1287;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1287);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1287);
                this.Manager.Comment("reaching state \'S242\'");
                int temp1296 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS42GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS42GetObjectFunctionalityChecker3)));
                if ((temp1296 == 0)) {
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S494\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S678\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1288;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1288);
                    this.Manager.Comment("reaching state \'S912\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1288, "securityContext of GetSystemConfig, state S912");
                    this.Manager.Comment("reaching state \'S1186\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1289;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1289 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1474\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1289, "return of CreateFile, state S1474");
                    this.Manager.Comment("reaching state \'S1798\'");
                    bool temp1290;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1291;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,False" +
                            ",False,False,out _)\'");
                    temp1291 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, false, false, out temp1290);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2098\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1290, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2098");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1291, "return of FsCtlFindFilesBySID, state S2098");
                    this.Manager.Comment("reaching state \'S2318\'");
                    goto label231;
                }
                if ((temp1296 == 1)) {
                    this.Manager.Comment("reaching state \'S343\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S495\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S679\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1292;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1292);
                    this.Manager.Comment("reaching state \'S913\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1292, "securityContext of GetSystemConfig, state S913");
                    this.Manager.Comment("reaching state \'S1187\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1293;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1293 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1475\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1293, "return of CreateFile, state S1475");
                    this.Manager.Comment("reaching state \'S1799\'");
                    bool temp1294;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1295;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,False,True,True," +
                            "out _)\'");
                    temp1295 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, true, true, out temp1294);
                    this.Manager.Checkpoint("MS-FSA_R1014");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID]On completion, the object store MUST return:\r\n       " +
                            "         [Status,OutputBuffer,BytesReturned ].");
                    this.Manager.Checkpoint("MS-FSA_R1035");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "         Upon successful completion of the operation, the object store MUST retu" +
                            "rn:Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S2099\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1294, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2099");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1295, "return of FsCtlFindFilesBySID, state S2099");
                    this.Manager.Comment("reaching state \'S2319\'");
                    goto label231;
                }
                throw new InvalidOperationException("never reached");
            label231:
;
                goto label232;
            }
            throw new InvalidOperationException("never reached");
        label232:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS42GetopenHasManageVolPrivilegeChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S43");
        }
        
        private void IoCtlRequestTestCaseS42GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S241");
        }
        
        private void IoCtlRequestTestCaseS42GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S241");
        }
        
        private void IoCtlRequestTestCaseS42GetopenHasManageVolPrivilegeChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S43");
        }
        
        private void IoCtlRequestTestCaseS42GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S242");
        }
        
        private void IoCtlRequestTestCaseS42GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S242");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS44() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            bool temp1298;
            this.Manager.Comment("executing step \'call GetopenHasManageVolPrivilege(out _)\'");
            this.IFSAAdapterInstance.GetopenHasManageVolPrivilege(out temp1298);
            this.Manager.AddReturn(GetopenHasManageVolPrivilegeInfo, null, temp1298);
            this.Manager.Comment("reaching state \'S45\'");
            int temp1319 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS44GetopenHasManageVolPrivilegeChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS44GetopenHasManageVolPrivilegeChecker1)));
            if ((temp1319 == 0)) {
                this.Manager.Comment("reaching state \'S167\'");
                bool temp1299;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1299);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1299);
                this.Manager.Comment("reaching state \'S243\'");
                int temp1308 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS44GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS44GetObjectFunctionalityChecker1)));
                if ((temp1308 == 0)) {
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S496\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S680\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1300;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1300);
                    this.Manager.Comment("reaching state \'S914\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1300, "securityContext of GetSystemConfig, state S914");
                    this.Manager.Comment("reaching state \'S1188\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1301;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1301 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1476\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1301, "return of CreateFile, state S1476");
                    this.Manager.Comment("reaching state \'S1800\'");
                    bool temp1302;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1303;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,LessThanFILE_NAME_INFORMATION,True" +
                            ",False,False,out _)\'");
                    temp1303 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), true, false, false, out temp1302);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2100\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1302, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2100");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1303, "return of FsCtlFindFilesBySID, state S2100");
                    this.Manager.Comment("reaching state \'S2320\'");
                    goto label233;
                }
                if ((temp1308 == 1)) {
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S497\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S681\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1304;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1304);
                    this.Manager.Comment("reaching state \'S915\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1304, "securityContext of GetSystemConfig, state S915");
                    this.Manager.Comment("reaching state \'S1189\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1305;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1305 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1477\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1305, "return of CreateFile, state S1477");
                    this.Manager.Comment("reaching state \'S1801\'");
                    bool temp1306;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1307;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,False" +
                            ",True,True,out _)\'");
                    temp1307 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, true, true, out temp1306);
                    this.Manager.Checkpoint("MS-FSA_R1022");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.HasManageVolumeAccess is FALSE and Open.HasBackupAccess is " +
                            "FALSE, the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S2101\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1306, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2101");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1307, "return of FsCtlFindFilesBySID, state S2101");
                    this.Manager.Comment("reaching state \'S2321\'");
                    goto label233;
                }
                throw new InvalidOperationException("never reached");
            label233:
;
                goto label235;
            }
            if ((temp1319 == 1)) {
                this.Manager.Comment("reaching state \'S168\'");
                bool temp1309;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1309);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1309);
                this.Manager.Comment("reaching state \'S244\'");
                int temp1318 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS44GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS44GetObjectFunctionalityChecker3)));
                if ((temp1318 == 0)) {
                    this.Manager.Comment("reaching state \'S346\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S498\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S682\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1310;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1310);
                    this.Manager.Comment("reaching state \'S916\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1310, "securityContext of GetSystemConfig, state S916");
                    this.Manager.Comment("reaching state \'S1190\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1311;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1311 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1478\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1311, "return of CreateFile, state S1478");
                    this.Manager.Comment("reaching state \'S1802\'");
                    bool temp1312;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1313;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,False" +
                            ",True,True,out _)\'");
                    temp1313 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, true, true, out temp1312);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2102\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1312, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2102");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1313, "return of FsCtlFindFilesBySID, state S2102");
                    this.Manager.Comment("reaching state \'S2322\'");
                    goto label234;
                }
                if ((temp1318 == 1)) {
                    this.Manager.Comment("reaching state \'S347\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S499\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S683\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1314;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1314);
                    this.Manager.Comment("reaching state \'S917\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1314, "securityContext of GetSystemConfig, state S917");
                    this.Manager.Comment("reaching state \'S1191\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1315;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1315 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1479\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1315, "return of CreateFile, state S1479");
                    this.Manager.Comment("reaching state \'S1803\'");
                    bool temp1316;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1317;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,True,True,True,o" +
                            "ut _)\'");
                    temp1317 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, true, out temp1316);
                    this.Manager.Checkpoint("MS-FSA_R1028");
                    this.Manager.Checkpoint(@"[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:
                            For each Link in Open.File.DirectoryList, starting at Open.FindBySidRestartIndex:If Link.File.SecurityDescriptor.
                            OwnerSid is equal to FindBySidData.SID:If (OutputBufferLength ¨C OutputBufferOffset) is less than the size of 
                            (Link.Name + 2 bytes) aligned to 4 bytes:]Else[If OutputBufferOffset is 0:]
                            The operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                    this.Manager.Comment("reaching state \'S2103\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:BUFFER_TOO_SMALL\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1316, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2103");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1317, "return of FsCtlFindFilesBySID, state S2103");
                    this.Manager.Comment("reaching state \'S2323\'");
                    goto label234;
                }
                throw new InvalidOperationException("never reached");
            label234:
;
                goto label235;
            }
            throw new InvalidOperationException("never reached");
        label235:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS44GetopenHasManageVolPrivilegeChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S45");
        }
        
        private void IoCtlRequestTestCaseS44GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S243");
        }
        
        private void IoCtlRequestTestCaseS44GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S243");
        }
        
        private void IoCtlRequestTestCaseS44GetopenHasManageVolPrivilegeChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S45");
        }
        
        private void IoCtlRequestTestCaseS44GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S244");
        }
        
        private void IoCtlRequestTestCaseS44GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S244");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS46() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            bool temp1320;
            this.Manager.Comment("executing step \'call GetopenHasManageVolPrivilege(out _)\'");
            this.IFSAAdapterInstance.GetopenHasManageVolPrivilege(out temp1320);
            this.Manager.AddReturn(GetopenHasManageVolPrivilegeInfo, null, temp1320);
            this.Manager.Comment("reaching state \'S47\'");
            int temp1341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS46GetopenHasManageVolPrivilegeChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetopenHasManageVolPrivilegeInfo, null, new GetopenHasManageVolPrivilegeDelegate1(this.IoCtlRequestTestCaseS46GetopenHasManageVolPrivilegeChecker1)));
            if ((temp1341 == 0)) {
                this.Manager.Comment("reaching state \'S169\'");
                bool temp1321;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1321);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1321);
                this.Manager.Comment("reaching state \'S245\'");
                int temp1330 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS46GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS46GetObjectFunctionalityChecker1)));
                if ((temp1330 == 0)) {
                    this.Manager.Comment("reaching state \'S348\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S500\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S684\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1322;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1322);
                    this.Manager.Comment("reaching state \'S918\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1322, "securityContext of GetSystemConfig, state S918");
                    this.Manager.Comment("reaching state \'S1192\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1323;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1323 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1480\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1323, "return of CreateFile, state S1480");
                    this.Manager.Comment("reaching state \'S1804\'");
                    bool temp1324;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1325;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,LessThanFILE_NAME_INFORMATION,Fals" +
                            "e,False,True,out _)\'");
                    temp1325 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), false, false, true, out temp1324);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2104\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1324, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2104");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1325, "return of FsCtlFindFilesBySID, state S2104");
                    this.Manager.Comment("reaching state \'S2324\'");
                    goto label236;
                }
                if ((temp1330 == 1)) {
                    this.Manager.Comment("reaching state \'S349\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S501\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S685\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1326;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1326);
                    this.Manager.Comment("reaching state \'S919\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1326, "securityContext of GetSystemConfig, state S919");
                    this.Manager.Comment("reaching state \'S1193\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1327;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1327 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1481\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1327, "return of CreateFile, state S1481");
                    this.Manager.Comment("reaching state \'S1805\'");
                    bool temp1328;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1329;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,True," +
                            "True,False,out _)\'");
                    temp1329 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), true, true, false, out temp1328);
                    this.Manager.Checkpoint("MS-FSA_R1022");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "             If Open.HasManageVolumeAccess is FALSE and Open.HasBackupAccess is " +
                            "FALSE, the operation MUST be failed with STATUS_ACCESS_DENIED.");
                    this.Manager.Comment("reaching state \'S2105\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:ACCESS_DENIED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1328, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2105");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp1329, "return of FsCtlFindFilesBySID, state S2105");
                    this.Manager.Comment("reaching state \'S2325\'");
                    goto label236;
                }
                throw new InvalidOperationException("never reached");
            label236:
;
                goto label238;
            }
            if ((temp1341 == 1)) {
                this.Manager.Comment("reaching state \'S170\'");
                bool temp1331;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1331);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1331);
                this.Manager.Comment("reaching state \'S246\'");
                int temp1340 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS46GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS46GetObjectFunctionalityChecker3)));
                if ((temp1340 == 0)) {
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S502\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S686\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1332;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1332);
                    this.Manager.Comment("reaching state \'S920\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1332, "securityContext of GetSystemConfig, state S920");
                    this.Manager.Comment("reaching state \'S1194\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1333;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1333 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1482\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1333, "return of CreateFile, state S1482");
                    this.Manager.Comment("reaching state \'S1806\'");
                    bool temp1334;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1335;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(True,LessThanFILE_NAME_INFORMATION,True," +
                            "True,False,out _)\'");
                    temp1335 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(true, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize)(1)), true, true, false, out temp1334);
                    this.Manager.Checkpoint("MS-FSA_R5005");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<25>");
                    this.Manager.Comment("reaching state \'S2106\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1334, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2106");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1335, "return of FsCtlFindFilesBySID, state S2106");
                    this.Manager.Comment("reaching state \'S2326\'");
                    goto label237;
                }
                if ((temp1340 == 1)) {
                    this.Manager.Comment("reaching state \'S351\'");
                    this.Manager.Comment("executing step \'call FsaInitial()\'");
                    this.IFSAAdapterInstance.FsaInitial();
                    this.Manager.Comment("reaching state \'S503\'");
                    this.Manager.Comment("checking step \'return FsaInitial\'");
                    this.Manager.Comment("reaching state \'S687\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp1336;
                    this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
                    this.IFSAAdapterInstance.GetSystemConfig(out temp1336);
                    this.Manager.Comment("reaching state \'S921\'");
                    this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                            "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                            "lse)]\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                                    "privilegeSet",
                                    "isSecurityContextSIDsContainWellKnown",
                                    "isImplementsEncryption"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                                    false,
                                    false}), temp1336, "securityContext of GetSystemConfig, state S921");
                    this.Manager.Comment("reaching state \'S1195\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1337;
                    this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                            "Y,FILE_SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid" +
                            ")\'");
                    temp1337 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1483\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1337, "return of CreateFile, state S1483");
                    this.Manager.Comment("reaching state \'S1807\'");
                    bool temp1338;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1339;
                    this.Manager.Comment("executing step \'call FsCtlFindFilesBySID(False,BufferSizeSuccess,True,True,False," +
                            "out _)\'");
                    temp1339 = this.IFSAAdapterInstance.FsCtlFindFilesBySID(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, false, out temp1338);
                    this.Manager.Checkpoint("MS-FSA_R1027");
                    this.Manager.Checkpoint(@"[In FSCTL_FIND_FILES_BY_SID,For each Link in Open.File.DirectoryList,
                            starting at Open.FindBySidRestartIndex:If Link.File.SecurityDescriptor.OwnerSid is equal to FindBySidData.SID:
                            If (OutputBufferLength ¨C OutputBufferOffset) is less than the size of (Link.Name + 2 bytes) aligned to 4 bytes:]
                            If OutputBufferOffset is not 0:The operation returns with STATUS_SUCCESS.");
                    this.Manager.Checkpoint("MS-FSA_R1034");
                    this.Manager.Checkpoint("[In FSCTL_FIND_FILES_BY_SID,Pseudocode for the operation is as follows:]\r\n       " +
                            "                     Upon successful completion of the operation, the object sto" +
                            "re MUST return:BytesReturned set to OutputBufferOffset.");
                    this.Manager.Comment("reaching state \'S2107\'");
                    this.Manager.Comment("checking step \'return FsCtlFindFilesBySID/[out True]:SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1338, "isBytesReturnedSet of FsCtlFindFilesBySID, state S2107");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1339, "return of FsCtlFindFilesBySID, state S2107");
                    this.Manager.Comment("reaching state \'S2327\'");
                    goto label237;
                }
                throw new InvalidOperationException("never reached");
            label237:
;
                goto label238;
            }
            throw new InvalidOperationException("never reached");
        label238:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS46GetopenHasManageVolPrivilegeChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S47");
        }
        
        private void IoCtlRequestTestCaseS46GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S245");
        }
        
        private void IoCtlRequestTestCaseS46GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S245");
        }
        
        private void IoCtlRequestTestCaseS46GetopenHasManageVolPrivilegeChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetopenHasManageVolPrivilege/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetopenHasManageVolPrivilege, state S47");
        }
        
        private void IoCtlRequestTestCaseS46GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S246");
        }
        
        private void IoCtlRequestTestCaseS46GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S246");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS48() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S171\'");
            bool temp1342;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1342);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1342);
            this.Manager.Comment("reaching state \'S247\'");
            int temp1359 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS48GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS48GetObjectFunctionalityChecker1)));
            if ((temp1359 == 0)) {
                this.Manager.Comment("reaching state \'S352\'");
                bool temp1343;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1343);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1343);
                this.Manager.Comment("reaching state \'S504\'");
                int temp1350 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker1)));
                if ((temp1350 == 0)) {
                    this.Manager.Comment("reaching state \'S688\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1344;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1344 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S922\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1344, "return of CreateFile, state S922");
                    this.Manager.Comment("reaching state \'S1196\'");
                    bool temp1345;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1346;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,NON_MICROSO" +
                            "FT_RANGE_TAG,out _)\'");
                    temp1346 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, out temp1345);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1484\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1345, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1484");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1346, "return of FsCtlGetReparsePoint, state S1484");
                    this.Manager.Comment("reaching state \'S1808\'");
                    goto label239;
                }
                if ((temp1350 == 1)) {
                    this.Manager.Comment("reaching state \'S689\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1347;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1347 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S923\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1347, "return of CreateFile, state S923");
                    this.Manager.Comment("reaching state \'S1197\'");
                    bool temp1348;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1349;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,NON_MICROSO" +
                            "FT_RANGE_TAG,out _)\'");
                    temp1349 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, out temp1348);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1485\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1348, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1485");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1349, "return of FsCtlGetReparsePoint, state S1485");
                    this.Manager.Comment("reaching state \'S1809\'");
                    goto label239;
                }
                throw new InvalidOperationException("never reached");
            label239:
;
                goto label241;
            }
            if ((temp1359 == 1)) {
                this.Manager.Comment("reaching state \'S353\'");
                bool temp1351;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1351);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1351);
                this.Manager.Comment("reaching state \'S505\'");
                int temp1358 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker3)));
                if ((temp1358 == 0)) {
                    this.Manager.Comment("reaching state \'S690\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1352;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1352 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S924\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1352, "return of CreateFile, state S924");
                    this.Manager.Comment("reaching state \'S1198\'");
                    bool temp1353;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1354;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,NON_MICROSO" +
                            "FT_RANGE_TAG,out _)\'");
                    temp1354 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, out temp1353);
                    this.Manager.Checkpoint("MS-FSA_R5040");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] Pseudocode for the operation is as follows:\r\n       " +
                            "             If Open.File.Volume.IsReparsePointsSupported is FALSE, the operatio" +
                            "n MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1486\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1353, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1486");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1354, "return of FsCtlGetReparsePoint, state S1486");
                    this.Manager.Comment("reaching state \'S1810\'");
                    goto label240;
                }
                if ((temp1358 == 1)) {
                    this.Manager.Comment("reaching state \'S691\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1355;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1355 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S925\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1355, "return of CreateFile, state S925");
                    this.Manager.Comment("reaching state \'S1199\'");
                    bool temp1356;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1357;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,NON_MICROSO" +
                            "FT_RANGE_TAG,out _)\'");
                    temp1357 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, out temp1356);
                    this.Manager.Checkpoint("MS-FSA_R1090");
                    this.Manager.Checkpoint(@"[In FSCTL_GET_REPARSE_POINT,Pseudocode for the operation is as follows:
                Phase 3 : Return the reparse data]Upon successful completion of the operation, the object store MUST return:BytesReturned set to the number of bytes written to OutputBuffer.");
                    this.Manager.Checkpoint("MS-FSA_R1073");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT]On completion, the object store MUST return:[OutputBu" +
                            "ffer ,BytesCopied,Status ].");
                    this.Manager.Checkpoint("MS-FSA_R1091");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT,Pseudocode for the operation is as follows:Phase 3 : " +
                            "Return the reparse data]Upon successful completion of the operation, the object " +
                            "store MUST return:Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S1487\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out True]:SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1356, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1487");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1357, "return of FsCtlGetReparsePoint, state S1487");
                    this.Manager.Comment("reaching state \'S1811\'");
                    goto label240;
                }
                throw new InvalidOperationException("never reached");
            label240:
;
                goto label241;
            }
            throw new InvalidOperationException("never reached");
        label241:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS48GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S247");
        }
        
        private void IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S504");
        }
        
        private void IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S504");
        }
        
        private void IoCtlRequestTestCaseS48GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S247");
        }
        
        private void IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S505");
        }
        
        private void IoCtlRequestTestCaseS48GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S505");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS50() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S172\'");
            bool temp1360;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1360);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1360);
            this.Manager.Comment("reaching state \'S248\'");
            int temp1377 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS50GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS50GetObjectFunctionalityChecker1)));
            if ((temp1377 == 0)) {
                this.Manager.Comment("reaching state \'S354\'");
                bool temp1361;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1361);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1361);
                this.Manager.Comment("reaching state \'S506\'");
                int temp1368 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker1)));
                if ((temp1368 == 0)) {
                    this.Manager.Comment("reaching state \'S692\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1362;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1362 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S926\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1362, "return of CreateFile, state S926");
                    this.Manager.Comment("reaching state \'S1200\'");
                    bool temp1363;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1364;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,IO_REPARSE_" +
                            "TAG_RESERVED_ZERO,out _)\'");
                    temp1364 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1363);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1488\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1363, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1488");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1364, "return of FsCtlGetReparsePoint, state S1488");
                    this.Manager.Comment("reaching state \'S1812\'");
                    goto label242;
                }
                if ((temp1368 == 1)) {
                    this.Manager.Comment("reaching state \'S693\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1365;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1365 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S927\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1365, "return of CreateFile, state S927");
                    this.Manager.Comment("reaching state \'S1201\'");
                    bool temp1366;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1367;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,IO_REPARSE_" +
                            "TAG_RESERVED_ZERO,out _)\'");
                    temp1367 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1366);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1489\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1366, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1489");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1367, "return of FsCtlGetReparsePoint, state S1489");
                    this.Manager.Comment("reaching state \'S1813\'");
                    goto label242;
                }
                throw new InvalidOperationException("never reached");
            label242:
;
                goto label244;
            }
            if ((temp1377 == 1)) {
                this.Manager.Comment("reaching state \'S355\'");
                bool temp1369;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1369);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1369);
                this.Manager.Comment("reaching state \'S507\'");
                int temp1376 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker3)));
                if ((temp1376 == 0)) {
                    this.Manager.Comment("reaching state \'S694\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1370;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1370 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S928\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1370, "return of CreateFile, state S928");
                    this.Manager.Comment("reaching state \'S1202\'");
                    bool temp1371;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1372;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,IO_REPARSE_" +
                            "TAG_RESERVED_ZERO,out _)\'");
                    temp1372 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1371);
                    this.Manager.Checkpoint("MS-FSA_R5040");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] Pseudocode for the operation is as follows:\r\n       " +
                            "             If Open.File.Volume.IsReparsePointsSupported is FALSE, the operatio" +
                            "n MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1490\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1371, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1490");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1372, "return of FsCtlGetReparsePoint, state S1490");
                    this.Manager.Comment("reaching state \'S1814\'");
                    goto label243;
                }
                if ((temp1376 == 1)) {
                    this.Manager.Comment("reaching state \'S695\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1373;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1373 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S929\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1373, "return of CreateFile, state S929");
                    this.Manager.Comment("reaching state \'S1203\'");
                    bool temp1374;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1375;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,IO_REPARSE_" +
                            "TAG_RESERVED_ZERO,out _)\'");
                    temp1375 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1374);
                    this.Manager.Checkpoint("MS-FSA_R1080");
                    this.Manager.Checkpoint(@"[In FSCTL_GET_REPARSE_POINT,Pseudocode for the operation is as follows:
                Phase 2 - Verify that OutputBufferSize is large enough to contain the reparse point data header.]
                If it[ Open.File.ReparseTag] is not, the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                    this.Manager.Comment("reaching state \'S1491\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:BUFFER_TOO_SMALL\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1374, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1491");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1375, "return of FsCtlGetReparsePoint, state S1491");
                    this.Manager.Comment("reaching state \'S1815\'");
                    goto label243;
                }
                throw new InvalidOperationException("never reached");
            label243:
;
                goto label244;
            }
            throw new InvalidOperationException("never reached");
        label244:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS50GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S248");
        }
        
        private void IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S506");
        }
        
        private void IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S506");
        }
        
        private void IoCtlRequestTestCaseS50GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S248");
        }
        
        private void IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S507");
        }
        
        private void IoCtlRequestTestCaseS50GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S507");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS52() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S173\'");
            bool temp1378;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1378);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1378);
            this.Manager.Comment("reaching state \'S249\'");
            int temp1395 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS52GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS52GetObjectFunctionalityChecker1)));
            if ((temp1395 == 0)) {
                this.Manager.Comment("reaching state \'S356\'");
                bool temp1379;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1379);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1379);
                this.Manager.Comment("reaching state \'S508\'");
                int temp1386 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker1)));
                if ((temp1386 == 0)) {
                    this.Manager.Comment("reaching state \'S696\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1380;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1380 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S930\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1380, "return of CreateFile, state S930");
                    this.Manager.Comment("reaching state \'S1204\'");
                    bool temp1381;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1382;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,EMPTY,out _" +
                            ")\'");
                    temp1382 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, out temp1381);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1492\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1381, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1492");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1382, "return of FsCtlGetReparsePoint, state S1492");
                    this.Manager.Comment("reaching state \'S1816\'");
                    goto label245;
                }
                if ((temp1386 == 1)) {
                    this.Manager.Comment("reaching state \'S697\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1383;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1383 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S931\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1383, "return of CreateFile, state S931");
                    this.Manager.Comment("reaching state \'S1205\'");
                    bool temp1384;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1385;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,EMPTY,out _" +
                            ")\'");
                    temp1385 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, out temp1384);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1493\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1384, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1493");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1385, "return of FsCtlGetReparsePoint, state S1493");
                    this.Manager.Comment("reaching state \'S1817\'");
                    goto label245;
                }
                throw new InvalidOperationException("never reached");
            label245:
;
                goto label247;
            }
            if ((temp1395 == 1)) {
                this.Manager.Comment("reaching state \'S357\'");
                bool temp1387;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1387);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1387);
                this.Manager.Comment("reaching state \'S509\'");
                int temp1394 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker3)));
                if ((temp1394 == 0)) {
                    this.Manager.Comment("reaching state \'S698\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1388;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1388 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S932\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1388, "return of CreateFile, state S932");
                    this.Manager.Comment("reaching state \'S1206\'");
                    bool temp1389;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1390;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,EMPTY,out _" +
                            ")\'");
                    temp1390 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, out temp1389);
                    this.Manager.Checkpoint("MS-FSA_R5040");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] Pseudocode for the operation is as follows:\r\n       " +
                            "             If Open.File.Volume.IsReparsePointsSupported is FALSE, the operatio" +
                            "n MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1494\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1389, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1494");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1390, "return of FsCtlGetReparsePoint, state S1494");
                    this.Manager.Comment("reaching state \'S1818\'");
                    goto label246;
                }
                if ((temp1394 == 1)) {
                    this.Manager.Comment("reaching state \'S699\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1391;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1391 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S933\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1391, "return of CreateFile, state S933");
                    this.Manager.Comment("reaching state \'S1207\'");
                    bool temp1392;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1393;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_DATA_BUFFER,EMPTY,out _" +
                            ")\'");
                    temp1393 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.EMPTY, out temp1392);
                    this.Manager.Checkpoint("MS-FSA_R1077");
                    this.Manager.Checkpoint(@"[In FSCTL_GET_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 1 : Check whether there is a reparse point on the File]If Open.File.ReparseTag is empty, 
                    the operation MUST be failed with STATUS_NOT_A_REPARSE_POINT.");
                    this.Manager.Comment("reaching state \'S1495\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:NOT_A_REPARSE_POINT\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1392, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1495");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_A_REPARSE_POINT, temp1393, "return of FsCtlGetReparsePoint, state S1495");
                    this.Manager.Comment("reaching state \'S1819\'");
                    goto label246;
                }
                throw new InvalidOperationException("never reached");
            label246:
;
                goto label247;
            }
            throw new InvalidOperationException("never reached");
        label247:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS52GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S249");
        }
        
        private void IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S508");
        }
        
        private void IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S508");
        }
        
        private void IoCtlRequestTestCaseS52GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S249");
        }
        
        private void IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S509");
        }
        
        private void IoCtlRequestTestCaseS52GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S509");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS54() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S174\'");
            bool temp1396;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1396);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1396);
            this.Manager.Comment("reaching state \'S250\'");
            int temp1413 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS54GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS54GetObjectFunctionalityChecker1)));
            if ((temp1413 == 0)) {
                this.Manager.Comment("reaching state \'S358\'");
                bool temp1397;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1397);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1397);
                this.Manager.Comment("reaching state \'S510\'");
                int temp1404 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker1)));
                if ((temp1404 == 0)) {
                    this.Manager.Comment("reaching state \'S700\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1398;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1398 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S934\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1398, "return of CreateFile, state S934");
                    this.Manager.Comment("reaching state \'S1208\'");
                    bool temp1399;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1400;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(BufferSizeSuccess,IO_REPARSE_TAG_RESERV" +
                            "ED_ZERO,out _)\'");
                    temp1400 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1399);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1496\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1399, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1496");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1400, "return of FsCtlGetReparsePoint, state S1496");
                    this.Manager.Comment("reaching state \'S1820\'");
                    goto label248;
                }
                if ((temp1404 == 1)) {
                    this.Manager.Comment("reaching state \'S701\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1401;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1401 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S935\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1401, "return of CreateFile, state S935");
                    this.Manager.Comment("reaching state \'S1209\'");
                    bool temp1402;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1403;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(BufferSizeSuccess,IO_REPARSE_TAG_RESERV" +
                            "ED_ZERO,out _)\'");
                    temp1403 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1402);
                    this.Manager.Checkpoint("MS-FSA_R5039");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] If the object store does not implement this function" +
                            "ality, \r\n                    the operation MUST be failed with STATUS_INVALID_DE" +
                            "VICE_REQUEST.<30>");
                    this.Manager.Comment("reaching state \'S1497\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:INVALID_DEVICE_REQUEST\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1402, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1497");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1403, "return of FsCtlGetReparsePoint, state S1497");
                    this.Manager.Comment("reaching state \'S1821\'");
                    goto label248;
                }
                throw new InvalidOperationException("never reached");
            label248:
;
                goto label250;
            }
            if ((temp1413 == 1)) {
                this.Manager.Comment("reaching state \'S359\'");
                bool temp1405;
                this.Manager.Comment("executing step \'call GetReparsePointsSupported(out _)\'");
                this.IFSAAdapterInstance.GetReparsePointsSupported(out temp1405);
                this.Manager.AddReturn(GetReparsePointsSupportedInfo, null, temp1405);
                this.Manager.Comment("reaching state \'S511\'");
                int temp1412 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetReparsePointsSupportedInfo, null, new GetReparsePointsSupportedDelegate1(this.IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker3)));
                if ((temp1412 == 0)) {
                    this.Manager.Comment("reaching state \'S702\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1406;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1406 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S936\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1406, "return of CreateFile, state S936");
                    this.Manager.Comment("reaching state \'S1210\'");
                    bool temp1407;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1408;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(BufferSizeSuccess,IO_REPARSE_TAG_RESERV" +
                            "ED_ZERO,out _)\'");
                    temp1408 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag)(0)), out temp1407);
                    this.Manager.Checkpoint("MS-FSA_R5040");
                    this.Manager.Checkpoint("[In FSCTL_GET_REPARSE_POINT] Pseudocode for the operation is as follows:\r\n       " +
                            "             If Open.File.Volume.IsReparsePointsSupported is FALSE, the operatio" +
                            "n MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S1498\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1407, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1498");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp1408, "return of FsCtlGetReparsePoint, state S1498");
                    this.Manager.Comment("reaching state \'S1822\'");
                    goto label249;
                }
                if ((temp1412 == 1)) {
                    this.Manager.Comment("reaching state \'S703\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1409;
                    this.Manager.Comment("executing step \'call CreateFile(REPARSE_POINT,NON_DIRECTORY_FILE,NULL,GENERIC_WRI" +
                            "TE,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVal" +
                            "id)\'");
                    temp1409 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.REPARSE_POINT, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                    this.Manager.Checkpoint("MS-FSA_R405");
                    this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                    this.Manager.Checkpoint("MS-FSA_R475");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return:CreateAction set to FILE_CREATED.");
                    this.Manager.Checkpoint("MS-FSA_R474");
                    this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                            "        The object store MUST return :Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S937\'");
                    this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1409, "return of CreateFile, state S937");
                    this.Manager.Comment("reaching state \'S1211\'");
                    bool temp1410;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1411;
                    this.Manager.Comment("executing step \'call FsCtlGetReparsePoint(LessThanREPARSE_GUID_DATA_BUFFER,NON_MI" +
                            "CROSOFT_RANGE_TAG,out _)\'");
                    temp1411 = this.IFSAAdapterInstance.FsCtlGetReparsePoint(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanREPARSE_GUID_DATA_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReparseTag.NON_MICROSOFT_RANGE_TAG, out temp1410);
                    this.Manager.Checkpoint("MS-FSA_R1083");
                    this.Manager.Checkpoint(@"[In FSCTL_GET_REPARSE_POINT,Pseudocode for the operation is as follows:
                    Phase 2 : Verify that OutputBufferSize is large enough to contain the reparse point data header.]
                    If it[Open.File.ReparseTag] is not, the operation MUST be failed with STATUS_BUFFER TOO_SMALL.");
                    this.Manager.Comment("reaching state \'S1499\'");
                    this.Manager.Comment("checking step \'return FsCtlGetReparsePoint/[out False]:BUFFER_TOO_SMALL\'");
                    TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1410, "isBytesReturnedSet of FsCtlGetReparsePoint, state S1499");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1411, "return of FsCtlGetReparsePoint, state S1499");
                    this.Manager.Comment("reaching state \'S1823\'");
                    goto label249;
                }
                throw new InvalidOperationException("never reached");
            label249:
;
                goto label250;
            }
            throw new InvalidOperationException("never reached");
        label250:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS54GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S250");
        }
        
        private void IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S510");
        }
        
        private void IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S510");
        }
        
        private void IoCtlRequestTestCaseS54GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S250");
        }
        
        private void IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetReparsePointsSupported, state S511");
        }
        
        private void IoCtlRequestTestCaseS54GetReparsePointsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetReparsePointsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetReparsePointsSupported, state S511");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS56() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S175\'");
            bool temp1414;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1414);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1414);
            this.Manager.Comment("reaching state \'S251\'");
            int temp1421 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS56GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS56GetObjectFunctionalityChecker1)));
            if ((temp1421 == 0)) {
                this.Manager.Comment("reaching state \'S360\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1415;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1415 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S512\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1415, "return of CreateFile, state S512");
                this.Manager.Comment("reaching state \'S704\'");
                bool temp1416;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1417;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(BufferSizeSuccess,False,False,False,o" +
                        "ut _)\'");
                temp1417 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, false, false, out temp1416);
                this.Manager.Checkpoint("MS-FSA_R1112");
                this.Manager.Checkpoint("Locate and copy the extents into OutputBuffer.]Upon successful completion of the " +
                        "operation, \r\n                the object store MUST return: BytesReturned set to " +
                        "the number of bytes written to OutputBuffer.");
                this.Manager.Checkpoint("MS-FSA_R1096");
                this.Manager.Checkpoint("[In FSCTL_GET_RETRIEVAL_POINTERS]On completion, the object store MUST return:\r\n  " +
                        "              [OutputBuffer,BytesCopied,Status].");
                this.Manager.Checkpoint("MS-FSA_R5041");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                Phase 2 - Locate and copy the extents into OutputBuffer.]Upon successful completion of the operation, 
                the object store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out True]:SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1416, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S938");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1417, "return of FsCtlGetRetrivalPoints, state S938");
                this.Manager.Comment("reaching state \'S1212\'");
                goto label251;
            }
            if ((temp1421 == 1)) {
                this.Manager.Comment("reaching state \'S361\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1418;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1418 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S513\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1418, "return of CreateFile, state S513");
                this.Manager.Comment("reaching state \'S705\'");
                bool temp1419;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1420;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(BufferSizeSuccess,False,False,False,o" +
                        "ut _)\'");
                temp1420 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, false, false, false, out temp1419);
                this.Manager.Checkpoint("MS-FSA_R1112");
                this.Manager.Checkpoint("Locate and copy the extents into OutputBuffer.]Upon successful completion of the " +
                        "operation, \r\n                the object store MUST return: BytesReturned set to " +
                        "the number of bytes written to OutputBuffer.");
                this.Manager.Checkpoint("MS-FSA_R1096");
                this.Manager.Checkpoint("[In FSCTL_GET_RETRIEVAL_POINTERS]On completion, the object store MUST return:\r\n  " +
                        "              [OutputBuffer,BytesCopied,Status].");
                this.Manager.Checkpoint("MS-FSA_R5041");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                Phase 2 - Locate and copy the extents into OutputBuffer.]Upon successful completion of the operation, 
                the object store MUST return:Status set to STATUS_SUCCESS or STATUS_BUFFER_OVERFLOW.");
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out True]:SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1419, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S939");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1420, "return of FsCtlGetRetrivalPoints, state S939");
                this.Manager.Comment("reaching state \'S1213\'");
                goto label251;
            }
            throw new InvalidOperationException("never reached");
        label251:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS56GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S251");
        }
        
        private void IoCtlRequestTestCaseS56GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S251");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS58() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S176\'");
            bool temp1422;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1422);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1422);
            this.Manager.Comment("reaching state \'S252\'");
            int temp1429 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS58GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS58GetObjectFunctionalityChecker1)));
            if ((temp1429 == 0)) {
                this.Manager.Comment("reaching state \'S362\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1423;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1423 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S514\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1423, "return of CreateFile, state S514");
                this.Manager.Comment("reaching state \'S706\'");
                bool temp1424;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1425;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(BufferSizeSuccess,True,True,True,out " +
                        "_)\'");
                temp1425 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, true, true, out temp1424);
                this.Manager.Checkpoint("MS-FSA_R1104");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                    Phase 1 - Verify Parameters]If StartingVcnBuffer.StartingVcn is greater than 
                    or equal to Open.Stream.AllocationSize divided by Open.File.Volume.ClusterSize, the operation MUST be failed with STATUS_END_OF_FILE.");
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:END_OF_FILE\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1424, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S940");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.END_OF_FILE, temp1425, "return of FsCtlGetRetrivalPoints, state S940");
                this.Manager.Comment("reaching state \'S1214\'");
                goto label252;
            }
            if ((temp1429 == 1)) {
                this.Manager.Comment("reaching state \'S363\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1426;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1426 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1426, "return of CreateFile, state S515");
                this.Manager.Comment("reaching state \'S707\'");
                bool temp1427;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1428;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(BufferSizeSuccess,True,False,True,out" +
                        " _)\'");
                temp1428 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true, false, true, out temp1427);
                this.Manager.Checkpoint("MS-FSA_R1103");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                        Phase 1 - Verify Parameters]If StartingVcnBuffer.StartingVcn is negative, 
                        the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S941\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1427, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S941");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1428, "return of FsCtlGetRetrivalPoints, state S941");
                this.Manager.Comment("reaching state \'S1215\'");
                goto label252;
            }
            throw new InvalidOperationException("never reached");
        label252:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS58GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S252");
        }
        
        private void IoCtlRequestTestCaseS58GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S252");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS6() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S145\'");
            bool temp1430;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp1430);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp1430);
            this.Manager.Comment("reaching state \'S221\'");
            int temp1523 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS6GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS6GetIfNtfsFileSystemChecker1)));
            if ((temp1523 == 0)) {
                this.Manager.Comment("reaching state \'S300\'");
                bool temp1431;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1431);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1431);
                this.Manager.Comment("reaching state \'S452\'");
                int temp1476 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS6GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS6GetObjectFunctionalityChecker1)));
                if ((temp1476 == 0)) {
                    this.Manager.Comment("reaching state \'S610\'");
                    bool temp1432;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1432);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1432);
                    this.Manager.Comment("reaching state \'S844\'");
                    int temp1453 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker1)));
                    if ((temp1453 == 0)) {
                        this.Manager.Comment("reaching state \'S1090\'");
                        bool temp1433;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1433);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1433);
                        this.Manager.Comment("reaching state \'S1384\'");
                        int temp1442 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp1442 == 0)) {
                            this.Manager.Comment("reaching state \'S1652\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1434;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1434 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1976\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1434, "return of CreateFile, state S1976");
                            this.Manager.Comment("reaching state \'S2196\'");
                            bool temp1435;
                            bool temp1436;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1437;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1437 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1435, out temp1436);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2416\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1435, "isBytesReturnedSet of FsCtlForEasyRequest, state S2416");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1436, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2416");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1437, "return of FsCtlForEasyRequest, state S2416");
                            this.Manager.Comment("reaching state \'S2576\'");
                            goto label253;
                        }
                        if ((temp1442 == 1)) {
                            this.Manager.Comment("reaching state \'S1653\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1438;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1438 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1977\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1438, "return of CreateFile, state S1977");
                            this.Manager.Comment("reaching state \'S2197\'");
                            bool temp1439;
                            bool temp1440;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1441;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1441 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1439, out temp1440);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2417\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1439, "isBytesReturnedSet of FsCtlForEasyRequest, state S2417");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1440, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2417");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1441, "return of FsCtlForEasyRequest, state S2417");
                            this.Manager.Comment("reaching state \'S2577\'");
                            goto label253;
                        }
                        throw new InvalidOperationException("never reached");
                    label253:
;
                        goto label255;
                    }
                    if ((temp1453 == 1)) {
                        this.Manager.Comment("reaching state \'S1091\'");
                        bool temp1443;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1443);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1443);
                        this.Manager.Comment("reaching state \'S1385\'");
                        int temp1452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp1452 == 0)) {
                            this.Manager.Comment("reaching state \'S1654\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1444;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1444 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1978\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1444, "return of CreateFile, state S1978");
                            this.Manager.Comment("reaching state \'S2198\'");
                            bool temp1445;
                            bool temp1446;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1447;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1447 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1445, out temp1446);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2418\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1445, "isBytesReturnedSet of FsCtlForEasyRequest, state S2418");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1446, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2418");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1447, "return of FsCtlForEasyRequest, state S2418");
                            this.Manager.Comment("reaching state \'S2578\'");
                            goto label254;
                        }
                        if ((temp1452 == 1)) {
                            this.Manager.Comment("reaching state \'S1655\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1448;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1448 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1979\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1448, "return of CreateFile, state S1979");
                            this.Manager.Comment("reaching state \'S2199\'");
                            bool temp1449;
                            bool temp1450;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1451;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1451 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1449, out temp1450);
                            this.Manager.Checkpoint("MS-FSA_R5017");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] \r\n                                If the object s" +
                                    "tore does not implement this functionality, the operation MUST be failed with ST" +
                                    "ATUS_INVALID_DEVICE_REQUEST.<27>");
                            this.Manager.Comment("reaching state \'S2419\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1449, "isBytesReturnedSet of FsCtlForEasyRequest, state S2419");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1450, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2419");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1451, "return of FsCtlForEasyRequest, state S2419");
                            this.Manager.Comment("reaching state \'S2579\'");
                            goto label254;
                        }
                        throw new InvalidOperationException("never reached");
                    label254:
;
                        goto label255;
                    }
                    throw new InvalidOperationException("never reached");
                label255:
;
                    goto label259;
                }
                if ((temp1476 == 1)) {
                    this.Manager.Comment("reaching state \'S611\'");
                    bool temp1454;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1454);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1454);
                    this.Manager.Comment("reaching state \'S845\'");
                    int temp1475 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker3)));
                    if ((temp1475 == 0)) {
                        this.Manager.Comment("reaching state \'S1092\'");
                        bool temp1455;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1455);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1455);
                        this.Manager.Comment("reaching state \'S1386\'");
                        int temp1464 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp1464 == 0)) {
                            this.Manager.Comment("reaching state \'S1656\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1456;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1456 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1980\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1456, "return of CreateFile, state S1980");
                            this.Manager.Comment("reaching state \'S2200\'");
                            bool temp1457;
                            bool temp1458;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1459;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1459 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1457, out temp1458);
                            this.Manager.Checkpoint("MS-FSA_R3961");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                              If OutputBufferSize is less than sizeof( Usn ), th" +
                                    "e operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2420\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1457, "isBytesReturnedSet of FsCtlForEasyRequest, state S2420");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1458, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2420");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1459, "return of FsCtlForEasyRequest, state S2420");
                            this.Manager.Comment("reaching state \'S2580\'");
                            goto label256;
                        }
                        if ((temp1464 == 1)) {
                            this.Manager.Comment("reaching state \'S1657\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1460;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1460 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1981\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1460, "return of CreateFile, state S1981");
                            this.Manager.Comment("reaching state \'S2201\'");
                            bool temp1461;
                            bool temp1462;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1463;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1463 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1461, out temp1462);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2421\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1461, "isBytesReturnedSet of FsCtlForEasyRequest, state S2421");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1462, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2421");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp1463, "return of FsCtlForEasyRequest, state S2421");
                            this.Manager.Comment("reaching state \'S2581\'");
                            goto label256;
                        }
                        throw new InvalidOperationException("never reached");
                    label256:
;
                        goto label258;
                    }
                    if ((temp1475 == 1)) {
                        this.Manager.Comment("reaching state \'S1093\'");
                        bool temp1465;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1465);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1465);
                        this.Manager.Comment("reaching state \'S1387\'");
                        int temp1474 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp1474 == 0)) {
                            this.Manager.Comment("reaching state \'S1658\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1466;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1466 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1982\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1466, "return of CreateFile, state S1982");
                            this.Manager.Comment("reaching state \'S2202\'");
                            bool temp1467;
                            bool temp1468;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1469;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1469 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1467, out temp1468);
                            this.Manager.Checkpoint("MS-FSA_R5017");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] \r\n                                If the object s" +
                                    "tore does not implement this functionality, the operation MUST be failed with ST" +
                                    "ATUS_INVALID_DEVICE_REQUEST.<27>");
                            this.Manager.Comment("reaching state \'S2422\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1467, "isBytesReturnedSet of FsCtlForEasyRequest, state S2422");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1468, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2422");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1469, "return of FsCtlForEasyRequest, state S2422");
                            this.Manager.Comment("reaching state \'S2582\'");
                            goto label257;
                        }
                        if ((temp1474 == 1)) {
                            this.Manager.Comment("reaching state \'S1659\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1470;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1470 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1983\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1470, "return of CreateFile, state S1983");
                            this.Manager.Comment("reaching state \'S2203\'");
                            bool temp1471;
                            bool temp1472;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1473;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1473 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1471, out temp1472);
                            this.Manager.Checkpoint("MS-FSA_R5017");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] \r\n                                If the object s" +
                                    "tore does not implement this functionality, the operation MUST be failed with ST" +
                                    "ATUS_INVALID_DEVICE_REQUEST.<27>");
                            this.Manager.Comment("reaching state \'S2423\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1471, "isBytesReturnedSet of FsCtlForEasyRequest, state S2423");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1472, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2423");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1473, "return of FsCtlForEasyRequest, state S2423");
                            this.Manager.Comment("reaching state \'S2583\'");
                            goto label257;
                        }
                        throw new InvalidOperationException("never reached");
                    label257:
;
                        goto label258;
                    }
                    throw new InvalidOperationException("never reached");
                label258:
;
                    goto label259;
                }
                throw new InvalidOperationException("never reached");
            label259:
;
                goto label267;
            }
            if ((temp1523 == 1)) {
                this.Manager.Comment("reaching state \'S301\'");
                bool temp1477;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1477);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1477);
                this.Manager.Comment("reaching state \'S453\'");
                int temp1522 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS6GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS6GetObjectFunctionalityChecker3)));
                if ((temp1522 == 0)) {
                    this.Manager.Comment("reaching state \'S612\'");
                    bool temp1478;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1478);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1478);
                    this.Manager.Comment("reaching state \'S846\'");
                    int temp1499 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker5)));
                    if ((temp1499 == 0)) {
                        this.Manager.Comment("reaching state \'S1094\'");
                        bool temp1479;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1479);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1479);
                        this.Manager.Comment("reaching state \'S1388\'");
                        int temp1488 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp1488 == 0)) {
                            this.Manager.Comment("reaching state \'S1660\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1480;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1480 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1984\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1480, "return of CreateFile, state S1984");
                            this.Manager.Comment("reaching state \'S2204\'");
                            bool temp1481;
                            bool temp1482;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1483;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1483 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1481, out temp1482);
                            this.Manager.Checkpoint("MS-FSA_R5018");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] Pseudocode for the operation is as follows:\r\n    " +
                                    "                            If OutputBufferSize is less than sizeof( NTFS_VOLUME" +
                                    "_DATA_BUFFER ), the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                            this.Manager.Comment("reaching state \'S2424\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:BUFFER_TOO_SMALL\'" +
                                    "");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1481, "isBytesReturnedSet of FsCtlForEasyRequest, state S2424");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1482, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2424");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1483, "return of FsCtlForEasyRequest, state S2424");
                            this.Manager.Comment("reaching state \'S2584\'");
                            goto label260;
                        }
                        if ((temp1488 == 1)) {
                            this.Manager.Comment("reaching state \'S1661\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1484;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1484 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1985\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1484, "return of CreateFile, state S1985");
                            this.Manager.Comment("reaching state \'S2205\'");
                            bool temp1485;
                            bool temp1486;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1487;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1487 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1485, out temp1486);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2425\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1485, "isBytesReturnedSet of FsCtlForEasyRequest, state S2425");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1486, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2425");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1487, "return of FsCtlForEasyRequest, state S2425");
                            this.Manager.Comment("reaching state \'S2585\'");
                            goto label260;
                        }
                        throw new InvalidOperationException("never reached");
                    label260:
;
                        goto label262;
                    }
                    if ((temp1499 == 1)) {
                        this.Manager.Comment("reaching state \'S1095\'");
                        bool temp1489;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1489);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1489);
                        this.Manager.Comment("reaching state \'S1389\'");
                        int temp1498 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp1498 == 0)) {
                            this.Manager.Comment("reaching state \'S1662\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1490;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1490 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1986\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1490, "return of CreateFile, state S1986");
                            this.Manager.Comment("reaching state \'S2206\'");
                            bool temp1491;
                            bool temp1492;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1493;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1493 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1491, out temp1492);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2426\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1491, "isBytesReturnedSet of FsCtlForEasyRequest, state S2426");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1492, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2426");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1493, "return of FsCtlForEasyRequest, state S2426");
                            this.Manager.Comment("reaching state \'S2586\'");
                            goto label261;
                        }
                        if ((temp1498 == 1)) {
                            this.Manager.Comment("reaching state \'S1663\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1494;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1494 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1987\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1494, "return of CreateFile, state S1987");
                            this.Manager.Comment("reaching state \'S2207\'");
                            bool temp1495;
                            bool temp1496;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1497;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1497 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1495, out temp1496);
                            this.Manager.Checkpoint("MS-FSA_R3959");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD] If the object store does not implement this fun" +
                                    "ctionality, \r\n                                the operation MUST be failed with " +
                                    "STATUS_INVALID_DEVICE_REQUEST.<56>");
                            this.Manager.Comment("reaching state \'S2427\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1495, "isBytesReturnedSet of FsCtlForEasyRequest, state S2427");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1496, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2427");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1497, "return of FsCtlForEasyRequest, state S2427");
                            this.Manager.Comment("reaching state \'S2587\'");
                            goto label261;
                        }
                        throw new InvalidOperationException("never reached");
                    label261:
;
                        goto label262;
                    }
                    throw new InvalidOperationException("never reached");
                label262:
;
                    goto label266;
                }
                if ((temp1522 == 1)) {
                    this.Manager.Comment("reaching state \'S613\'");
                    bool temp1500;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1500);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1500);
                    this.Manager.Comment("reaching state \'S847\'");
                    int temp1521 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker7)));
                    if ((temp1521 == 0)) {
                        this.Manager.Comment("reaching state \'S1096\'");
                        bool temp1501;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1501);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1501);
                        this.Manager.Comment("reaching state \'S1390\'");
                        int temp1510 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp1510 == 0)) {
                            this.Manager.Comment("reaching state \'S1664\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1502;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1502 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1988\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1502, "return of CreateFile, state S1988");
                            this.Manager.Comment("reaching state \'S2208\'");
                            bool temp1503;
                            bool temp1504;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1505;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1505 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1503, out temp1504);
                            this.Manager.Checkpoint("MS-FSA_R3961");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                              If OutputBufferSize is less than sizeof( Usn ), th" +
                                    "e operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2428\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1503, "isBytesReturnedSet of FsCtlForEasyRequest, state S2428");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1504, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2428");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1505, "return of FsCtlForEasyRequest, state S2428");
                            this.Manager.Comment("reaching state \'S2588\'");
                            goto label263;
                        }
                        if ((temp1510 == 1)) {
                            this.Manager.Comment("reaching state \'S1665\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1506;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1506 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1989\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1506, "return of CreateFile, state S1989");
                            this.Manager.Comment("reaching state \'S2209\'");
                            bool temp1507;
                            bool temp1508;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1509;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1509 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1507, out temp1508);
                            this.Manager.Checkpoint("MS-FSA_R5018");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] Pseudocode for the operation is as follows:\r\n    " +
                                    "                            If OutputBufferSize is less than sizeof( NTFS_VOLUME" +
                                    "_DATA_BUFFER ), the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                            this.Manager.Comment("reaching state \'S2429\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:BUFFER_TOO_SMALL\'" +
                                    "");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1507, "isBytesReturnedSet of FsCtlForEasyRequest, state S2429");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1508, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2429");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1509, "return of FsCtlForEasyRequest, state S2429");
                            this.Manager.Comment("reaching state \'S2589\'");
                            goto label263;
                        }
                        throw new InvalidOperationException("never reached");
                    label263:
;
                        goto label265;
                    }
                    if ((temp1521 == 1)) {
                        this.Manager.Comment("reaching state \'S1097\'");
                        bool temp1511;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1511);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1511);
                        this.Manager.Comment("reaching state \'S1391\'");
                        int temp1520 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp1520 == 0)) {
                            this.Manager.Comment("reaching state \'S1666\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1512;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1512 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1990\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1512, "return of CreateFile, state S1990");
                            this.Manager.Comment("reaching state \'S2210\'");
                            bool temp1513;
                            bool temp1514;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1515;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1515 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1513, out temp1514);
                            this.Manager.Checkpoint("MS-FSA_R3961");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD,Pseudocode for the operation is as follows:]\r\n  " +
                                    "                              If OutputBufferSize is less than sizeof( Usn ), th" +
                                    "e operation MUST be failed with STATUS_INVALID_PARAMETER.");
                            this.Manager.Comment("reaching state \'S2430\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_PARAMETER" +
                                    "\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1513, "isBytesReturnedSet of FsCtlForEasyRequest, state S2430");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1514, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2430");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1515, "return of FsCtlForEasyRequest, state S2430");
                            this.Manager.Comment("reaching state \'S2590\'");
                            goto label264;
                        }
                        if ((temp1520 == 1)) {
                            this.Manager.Comment("reaching state \'S1667\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1516;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1516 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1991\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1516, "return of CreateFile, state S1991");
                            this.Manager.Comment("reaching state \'S2211\'");
                            bool temp1517;
                            bool temp1518;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1519;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(WRITE_USN_CLOSE_RECORD,LessThanSizeofUsn" +
                                    ",out _,out _)\'");
                            temp1519 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.WRITE_USN_CLOSE_RECORD, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSizeofUsn, out temp1517, out temp1518);
                            this.Manager.Checkpoint("MS-FSA_R3960");
                            this.Manager.Checkpoint("[In FSCTL_WRITE_USN_CLOSE_RECORD]Pseudocode for the operation is as follows:\r\n   " +
                                    "                             If Open.File.Volume.IsReadOnly is TRUE, the operati" +
                                    "on MUST be failed with STATUS_MEDIA_WRITE_PROTECTED.");
                            this.Manager.Comment("reaching state \'S2431\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:MEDIA_WRITE_PROTE" +
                                    "CTED\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1517, "isBytesReturnedSet of FsCtlForEasyRequest, state S2431");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1518, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2431");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp1519, "return of FsCtlForEasyRequest, state S2431");
                            this.Manager.Comment("reaching state \'S2591\'");
                            goto label264;
                        }
                        throw new InvalidOperationException("never reached");
                    label264:
;
                        goto label265;
                    }
                    throw new InvalidOperationException("never reached");
                label265:
;
                    goto label266;
                }
                throw new InvalidOperationException("never reached");
            label266:
;
                goto label267;
            }
            throw new InvalidOperationException("never reached");
        label267:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS6GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S221");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S452");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S844");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1384");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1384");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S844");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1385");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1385");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S452");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S845");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1386");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1386");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S845");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1387");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1387");
        }
        
        private void IoCtlRequestTestCaseS6GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S221");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S453");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S846");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1388");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1388");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S846");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1389");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1389");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S453");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S847");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1390");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1390");
        }
        
        private void IoCtlRequestTestCaseS6GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S847");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1391");
        }
        
        private void IoCtlRequestTestCaseS6GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1391");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS60() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S177\'");
            bool temp1524;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1524);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1524);
            this.Manager.Comment("reaching state \'S253\'");
            int temp1531 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS60GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS60GetObjectFunctionalityChecker1)));
            if ((temp1531 == 0)) {
                this.Manager.Comment("reaching state \'S364\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1525;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1525 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1525, "return of CreateFile, state S516");
                this.Manager.Comment("reaching state \'S708\'");
                bool temp1526;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1527;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(LessThanRETRIEVAL_POINTERS_BUFFER,Fal" +
                        "se,False,True,out _)\'");
                temp1527 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanRETRIEVAL_POINTERS_BUFFER, false, false, true, out temp1526);
                this.Manager.Checkpoint("MS-FSA_R1101");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                    Phase 1 - Verify Parameters]If OutputBufferSize is smaller than sizeof( RETRIEVAL_POINTERS_BUFFER ), 
                    the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                this.Manager.Comment("reaching state \'S942\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:BUFFER_TOO_SMALL\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1526, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S942");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1527, "return of FsCtlGetRetrivalPoints, state S942");
                this.Manager.Comment("reaching state \'S1216\'");
                goto label268;
            }
            if ((temp1531 == 1)) {
                this.Manager.Comment("reaching state \'S365\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1528;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1528 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1528, "return of CreateFile, state S517");
                this.Manager.Comment("reaching state \'S709\'");
                bool temp1529;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1530;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(LessThanRETRIEVAL_POINTERS_BUFFER,Tru" +
                        "e,True,True,out _)\'");
                temp1530 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanRETRIEVAL_POINTERS_BUFFER, true, true, true, out temp1529);
                this.Manager.Checkpoint("MS-FSA_R1101");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                    Phase 1 - Verify Parameters]If OutputBufferSize is smaller than sizeof( RETRIEVAL_POINTERS_BUFFER ), 
                    the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                this.Manager.Comment("reaching state \'S943\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:BUFFER_TOO_SMALL\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1529, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S943");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1530, "return of FsCtlGetRetrivalPoints, state S943");
                this.Manager.Comment("reaching state \'S1217\'");
                goto label268;
            }
            throw new InvalidOperationException("never reached");
        label268:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS60GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S253");
        }
        
        private void IoCtlRequestTestCaseS60GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S253");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS62() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S178\'");
            bool temp1532;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1532);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1532);
            this.Manager.Comment("reaching state \'S254\'");
            int temp1539 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS62GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS62GetObjectFunctionalityChecker1)));
            if ((temp1539 == 0)) {
                this.Manager.Comment("reaching state \'S366\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1533;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1533 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1533, "return of CreateFile, state S518");
                this.Manager.Comment("reaching state \'S710\'");
                bool temp1534;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1535;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(LessThanSTARTING_VCN_INPUT_BUFFER,Tru" +
                        "e,True,True,out _)\'");
                temp1535 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSTARTING_VCN_INPUT_BUFFER, true, true, true, out temp1534);
                this.Manager.Checkpoint("MS-FSA_R1100");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                    Phase 1 - Verify Parameters]If the size of StartingVcnBuffer is less than sizeof ( STARTING_VCN_INPUT_BUFFER ),
                    the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S944\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1534, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S944");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1535, "return of FsCtlGetRetrivalPoints, state S944");
                this.Manager.Comment("reaching state \'S1218\'");
                goto label269;
            }
            if ((temp1539 == 1)) {
                this.Manager.Comment("reaching state \'S367\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1536;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1536 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1536, "return of CreateFile, state S519");
                this.Manager.Comment("reaching state \'S711\'");
                bool temp1537;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1538;
                this.Manager.Comment("executing step \'call FsCtlGetRetrivalPoints(LessThanSTARTING_VCN_INPUT_BUFFER,Fal" +
                        "se,False,False,out _)\'");
                temp1538 = this.IFSAAdapterInstance.FsCtlGetRetrivalPoints(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanSTARTING_VCN_INPUT_BUFFER, false, false, false, out temp1537);
                this.Manager.Checkpoint("MS-FSA_R1100");
                this.Manager.Checkpoint(@"[In FSCTL_GET_RETRIEVAL_POINTERS,Pseudocode for the operation is as follows:
                    Phase 1 - Verify Parameters]If the size of StartingVcnBuffer is less than sizeof ( STARTING_VCN_INPUT_BUFFER ),
                    the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("checking step \'return FsCtlGetRetrivalPoints/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1537, "isBytesReturnedSet of FsCtlGetRetrivalPoints, state S945");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1538, "return of FsCtlGetRetrivalPoints, state S945");
                this.Manager.Comment("reaching state \'S1219\'");
                goto label269;
            }
            throw new InvalidOperationException("never reached");
        label269:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS62GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S254");
        }
        
        private void IoCtlRequestTestCaseS62GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S254");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS64() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S179\'");
            bool temp1540;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1540);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1540);
            this.Manager.Comment("reaching state \'S255\'");
            int temp1547 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS64GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS64GetObjectFunctionalityChecker1)));
            if ((temp1547 == 0)) {
                this.Manager.Comment("reaching state \'S368\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1541;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1541 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S520\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1541, "return of CreateFile, state S520");
                this.Manager.Comment("reaching state \'S712\'");
                bool temp1542;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1543;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,EqualZero,out _)" +
                        "\'");
                temp1543 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength)(0)), out temp1542);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S946\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1542, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S946");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1543, "return of FsCtlQueryAllocatedRanges, state S946");
                this.Manager.Comment("reaching state \'S1220\'");
                goto label270;
            }
            if ((temp1547 == 1)) {
                this.Manager.Comment("reaching state \'S369\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1544;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1544 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S521\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1544, "return of CreateFile, state S521");
                this.Manager.Comment("reaching state \'S713\'");
                bool temp1545;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1546;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,LessThanZero,out" +
                        " _)\'");
                temp1546 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.LessThanZero, out temp1545);
                this.Manager.Checkpoint("MS-FSA_R3774");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                          If (InputBuffer.Length < 0), the operation MUST be fai" +
                        "led with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S947\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1545, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S947");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1546, "return of FsCtlQueryAllocatedRanges, state S947");
                this.Manager.Comment("reaching state \'S1221\'");
                goto label270;
            }
            throw new InvalidOperationException("never reached");
        label270:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS64GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S255");
        }
        
        private void IoCtlRequestTestCaseS64GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S255");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS66() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S180\'");
            bool temp1548;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1548);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1548);
            this.Manager.Comment("reaching state \'S256\'");
            int temp1555 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS66GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS66GetObjectFunctionalityChecker1)));
            if ((temp1555 == 0)) {
                this.Manager.Comment("reaching state \'S370\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1549;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1549 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S522\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1549, "return of CreateFile, state S522");
                this.Manager.Comment("reaching state \'S714\'");
                bool temp1550;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1551;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(OutLessThanFILE_ALLOCATED_RANGE_BU" +
                        "FFER,MoreThanMAXLONGLONG,out _)\'");
                temp1551 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.OutLessThanFILE_ALLOCATED_RANGE_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.MoreThanMAXLONGLONG, out temp1550);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S948\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1550, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S948");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1551, "return of FsCtlQueryAllocatedRanges, state S948");
                this.Manager.Comment("reaching state \'S1222\'");
                goto label271;
            }
            if ((temp1555 == 1)) {
                this.Manager.Comment("reaching state \'S371\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1552;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1552 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S523\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1552, "return of CreateFile, state S523");
                this.Manager.Comment("reaching state \'S715\'");
                bool temp1553;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1554;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,EqualZero,out _)" +
                        "\'");
                temp1554 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength)(0)), out temp1553);
                this.Manager.Checkpoint("MS-FSA_R3777");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                          If InputBuffer.Length is 0:Return STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R3765");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]On completion, the object store MUST return:\r\n  " +
                        "              [Status ,OutputBuffer,BytesReturned ].");
                this.Manager.Checkpoint("MS-FSA_R3782");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:\r\n   " +
                        "             If Open.Stream.IsSparse is FALSE:]Return STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R5047");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "              Upon successful completion of the operation, the object store MUST" +
                        " return:Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S949\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out True]:SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1553, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S949");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1554, "return of FsCtlQueryAllocatedRanges, state S949");
                this.Manager.Comment("reaching state \'S1223\'");
                goto label271;
            }
            throw new InvalidOperationException("never reached");
        label271:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS66GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S256");
        }
        
        private void IoCtlRequestTestCaseS66GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S256");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS68() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S181\'");
            bool temp1556;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1556);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1556);
            this.Manager.Comment("reaching state \'S257\'");
            int temp1563 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS68GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS68GetObjectFunctionalityChecker1)));
            if ((temp1563 == 0)) {
                this.Manager.Comment("reaching state \'S372\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1557;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1557 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S524\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1557, "return of CreateFile, state S524");
                this.Manager.Comment("reaching state \'S716\'");
                bool temp1558;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1559;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(OutLessThanFILE_ALLOCATED_RANGE_BU" +
                        "FFER,LessThanZero,out _)\'");
                temp1559 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.OutLessThanFILE_ALLOCATED_RANGE_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.LessThanZero, out temp1558);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S950\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1558, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S950");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1559, "return of FsCtlQueryAllocatedRanges, state S950");
                this.Manager.Comment("reaching state \'S1224\'");
                goto label272;
            }
            if ((temp1563 == 1)) {
                this.Manager.Comment("reaching state \'S373\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1560;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1560 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S525\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1560, "return of CreateFile, state S525");
                this.Manager.Comment("reaching state \'S717\'");
                bool temp1561;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1562;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,MoreThanMAXLONGL" +
                        "ONG,out _)\'");
                temp1562 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.MoreThanMAXLONGLONG, out temp1561);
                this.Manager.Checkpoint("MS-FSA_R3775");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                         If  (InputBuffer.Length > MAXLONGLONG - InputBuffer.Fil" +
                        "eOffset), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S951\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1561, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S951");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1562, "return of FsCtlQueryAllocatedRanges, state S951");
                this.Manager.Comment("reaching state \'S1225\'");
                goto label272;
            }
            throw new InvalidOperationException("never reached");
        label272:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS68GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S257");
        }
        
        private void IoCtlRequestTestCaseS68GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S257");
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS70() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S182\'");
            bool temp1564;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1564);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1564);
            this.Manager.Comment("reaching state \'S258\'");
            int temp1571 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS70GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS70GetObjectFunctionalityChecker1)));
            if ((temp1571 == 0)) {
                this.Manager.Comment("reaching state \'S374\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1565;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1565 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1565, "return of CreateFile, state S526");
                this.Manager.Comment("reaching state \'S718\'");
                bool temp1566;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1567;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(LessThanFILE_ALLOCATED_RANGE_BUFFE" +
                        "R,LessThanZero,out _)\'");
                temp1567 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ALLOCATED_RANGE_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.LessThanZero, out temp1566);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S952\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1566, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S952");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1567, "return of FsCtlQueryAllocatedRanges, state S952");
                this.Manager.Comment("reaching state \'S1226\'");
                goto label273;
            }
            if ((temp1571 == 1)) {
                this.Manager.Comment("reaching state \'S375\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1568;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1568 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1568, "return of CreateFile, state S527");
                this.Manager.Comment("reaching state \'S719\'");
                bool temp1569;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1570;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(LessThanFILE_ALLOCATED_RANGE_BUFFE" +
                        "R,FileOffsetLessThanZero,out _)\'");
                temp1570 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ALLOCATED_RANGE_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.FileOffsetLessThanZero, out temp1569);
                this.Manager.Checkpoint("MS-FSA_R3771");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                  If InputBufferSize is less than sizeof( FILE_ALLOCATED_RANGE_B" +
                        "UFFER ), the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S953\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1569, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S953");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1570, "return of FsCtlQueryAllocatedRanges, state S953");
                this.Manager.Comment("reaching state \'S1227\'");
                goto label273;
            }
            throw new InvalidOperationException("never reached");
        label273:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS70GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S258");
        }
        
        private void IoCtlRequestTestCaseS70GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S258");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS72() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S183\'");
            bool temp1572;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1572);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1572);
            this.Manager.Comment("reaching state \'S259\'");
            int temp1579 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS72GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS72GetObjectFunctionalityChecker1)));
            if ((temp1579 == 0)) {
                this.Manager.Comment("reaching state \'S376\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1573;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1573 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1573, "return of CreateFile, state S528");
                this.Manager.Comment("reaching state \'S720\'");
                bool temp1574;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1575;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,BufferLengthSucc" +
                        "ess,out _)\'");
                temp1575 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength)(1)), out temp1574);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1574, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S954");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1575, "return of FsCtlQueryAllocatedRanges, state S954");
                this.Manager.Comment("reaching state \'S1228\'");
                goto label274;
            }
            if ((temp1579 == 1)) {
                this.Manager.Comment("reaching state \'S377\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1576;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1576 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1576, "return of CreateFile, state S529");
                this.Manager.Comment("reaching state \'S721\'");
                bool temp1577;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1578;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(BufferSizeSuccess,FileOffsetLessTh" +
                        "anZero,out _)\'");
                temp1578 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.FileOffsetLessThanZero, out temp1577);
                this.Manager.Checkpoint("MS-FSA_R3773");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                          If (InputBuffer.FileOffset < 0) , the operation MUST b" +
                        "e failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1577, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S955");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1578, "return of FsCtlQueryAllocatedRanges, state S955");
                this.Manager.Comment("reaching state \'S1229\'");
                goto label274;
            }
            throw new InvalidOperationException("never reached");
        label274:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS72GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S259");
        }
        
        private void IoCtlRequestTestCaseS72GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S259");
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS74() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S184\'");
            bool temp1580;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1580);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1580);
            this.Manager.Comment("reaching state \'S260\'");
            int temp1587 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS74GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS74GetObjectFunctionalityChecker1)));
            if ((temp1587 == 0)) {
                this.Manager.Comment("reaching state \'S378\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1581;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1581 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1581, "return of CreateFile, state S530");
                this.Manager.Comment("reaching state \'S722\'");
                bool temp1582;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1583;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(LessThanFILE_ALLOCATED_RANGE_BUFFE" +
                        "R,FileOffsetLessThanZero,out _)\'");
                temp1583 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_ALLOCATED_RANGE_BUFFER, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength.FileOffsetLessThanZero, out temp1582);
                this.Manager.Checkpoint("MS-FSA_R5045");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES]If the object store does not implement this func" +
                        "tionality, \r\n                    the operation MUST be failed with STATUS_INVALI" +
                        "D_DEVICE_REQUEST.<33>");
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:INVALID_DEVICE_REQUES" +
                        "T\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1582, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S956");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1583, "return of FsCtlQueryAllocatedRanges, state S956");
                this.Manager.Comment("reaching state \'S1230\'");
                goto label275;
            }
            if ((temp1587 == 1)) {
                this.Manager.Comment("reaching state \'S379\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1584;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                        "SHARE_READ,OPEN,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1584 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1584, "return of CreateFile, state S531");
                this.Manager.Comment("reaching state \'S723\'");
                bool temp1585;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1586;
                this.Manager.Comment("executing step \'call FsCtlQueryAllocatedRanges(OutLessThanFILE_ALLOCATED_RANGE_BU" +
                        "FFER,BufferLengthSuccess,out _)\'");
                temp1586 = this.IFSAAdapterInstance.FsCtlQueryAllocatedRanges(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.OutLessThanFILE_ALLOCATED_RANGE_BUFFER, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferLength)(1)), out temp1585);
                this.Manager.Checkpoint("MS-FSA_R3778");
                this.Manager.Checkpoint("[In FSCTL_QUERY_ALLOCATED_RANGES,Pseudocode for the operation is as follows:]\r\n  " +
                        "                  If OutputBufferSize < sizeof( FILE_ALLOCATED_RANGE_BUFFER ), t" +
                        "he operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                this.Manager.Comment("reaching state \'S957\'");
                this.Manager.Comment("checking step \'return FsCtlQueryAllocatedRanges/[out False]:BUFFER_TOO_SMALL\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1585, "isBytesReturnedSet of FsCtlQueryAllocatedRanges, state S957");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1586, "return of FsCtlQueryAllocatedRanges, state S957");
                this.Manager.Comment("reaching state \'S1231\'");
                goto label275;
            }
            throw new InvalidOperationException("never reached");
        label275:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS74GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S260");
        }
        
        private void IoCtlRequestTestCaseS74GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S260");
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS76() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S185\'");
            bool temp1588;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1588);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1588);
            this.Manager.Comment("reaching state \'S261\'");
            int temp1595 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS76GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS76GetObjectFunctionalityChecker1)));
            if ((temp1595 == 0)) {
                this.Manager.Comment("reaching state \'S380\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1589;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1589 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1589, "return of CreateFile, state S532");
                this.Manager.Comment("reaching state \'S724\'");
                bool temp1590;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1591;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(LessThanUSN_RECORD,out _)\'");
                temp1591 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanUSN_RECORD, out temp1590);
                this.Manager.Checkpoint("MS-FSA_R7936");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST. <36>");
                this.Manager.Comment("reaching state \'S958\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out False]:INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1590, "isBytesReturnedSet of FsCtlReadFileUSNData, state S958");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1591, "return of FsCtlReadFileUSNData, state S958");
                this.Manager.Comment("reaching state \'S1232\'");
                goto label276;
            }
            if ((temp1595 == 1)) {
                this.Manager.Comment("reaching state \'S381\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1592;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1592 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1592, "return of CreateFile, state S533");
                this.Manager.Comment("reaching state \'S725\'");
                bool temp1593;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1594;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(LessThanUSN_RECORD,out _)\'");
                temp1594 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanUSN_RECORD, out temp1593);
                this.Manager.Checkpoint("MS-FSA_R3866");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA] Pseudocode for the operation is as follows:\r\n      " +
                        "              If OutputBufferSize is less than sizeof( USN_RECORD ), the operati" +
                        "on MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                this.Manager.Comment("reaching state \'S959\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out False]:BUFFER_TOO_SMALL\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1593, "isBytesReturnedSet of FsCtlReadFileUSNData, state S959");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1594, "return of FsCtlReadFileUSNData, state S959");
                this.Manager.Comment("reaching state \'S1233\'");
                goto label276;
            }
            throw new InvalidOperationException("never reached");
        label276:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS76GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S261");
        }
        
        private void IoCtlRequestTestCaseS76GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S261");
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS78() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S186\'");
            bool temp1596;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1596);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1596);
            this.Manager.Comment("reaching state \'S262\'");
            int temp1603 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS78GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS78GetObjectFunctionalityChecker1)));
            if ((temp1603 == 0)) {
                this.Manager.Comment("reaching state \'S382\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1597;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1597 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1597, "return of CreateFile, state S534");
                this.Manager.Comment("reaching state \'S726\'");
                bool temp1598;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1599;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(LessThanRecordLength,out _)\'");
                temp1599 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanRecordLength, out temp1598);
                this.Manager.Checkpoint("MS-FSA_R7936");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST. <36>");
                this.Manager.Comment("reaching state \'S960\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out False]:INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1598, "isBytesReturnedSet of FsCtlReadFileUSNData, state S960");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1599, "return of FsCtlReadFileUSNData, state S960");
                this.Manager.Comment("reaching state \'S1234\'");
                goto label277;
            }
            if ((temp1603 == 1)) {
                this.Manager.Comment("reaching state \'S383\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1600;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1600 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1600, "return of CreateFile, state S535");
                this.Manager.Comment("reaching state \'S727\'");
                bool temp1601;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1602;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(LessThanRecordLength,out _)\'");
                temp1602 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanRecordLength, out temp1601);
                this.Manager.Checkpoint("MS-FSA_R3873");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA]If OutputBufferSize is less than RecordLength, \r\n   " +
                        "                 the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                this.Manager.Comment("reaching state \'S961\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out False]:INFO_LENGTH_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1601, "isBytesReturnedSet of FsCtlReadFileUSNData, state S961");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp1602, "return of FsCtlReadFileUSNData, state S961");
                this.Manager.Comment("reaching state \'S1235\'");
                goto label277;
            }
            throw new InvalidOperationException("never reached");
        label277:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS78GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S262");
        }
        
        private void IoCtlRequestTestCaseS78GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S262");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS8() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S146\'");
            bool temp1604;
            this.Manager.Comment("executing step \'call GetIfNtfsFileSystem(out _)\'");
            this.IFSAAdapterInstance.GetIfNtfsFileSystem(out temp1604);
            this.Manager.AddReturn(GetIfNtfsFileSystemInfo, null, temp1604);
            this.Manager.Comment("reaching state \'S222\'");
            int temp1697 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS8GetIfNtfsFileSystemChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfNtfsFileSystemInfo, null, new GetIfNtfsFileSystemDelegate1(this.IoCtlRequestTestCaseS8GetIfNtfsFileSystemChecker1)));
            if ((temp1697 == 0)) {
                this.Manager.Comment("reaching state \'S302\'");
                bool temp1605;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1605);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1605);
                this.Manager.Comment("reaching state \'S454\'");
                int temp1650 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS8GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS8GetObjectFunctionalityChecker1)));
                if ((temp1650 == 0)) {
                    this.Manager.Comment("reaching state \'S614\'");
                    bool temp1606;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1606);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1606);
                    this.Manager.Comment("reaching state \'S848\'");
                    int temp1627 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker1)));
                    if ((temp1627 == 0)) {
                        this.Manager.Comment("reaching state \'S1098\'");
                        bool temp1607;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1607);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1607);
                        this.Manager.Comment("reaching state \'S1392\'");
                        int temp1616 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker1)));
                        if ((temp1616 == 0)) {
                            this.Manager.Comment("reaching state \'S1668\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1608;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1608 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1992\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1608, "return of CreateFile, state S1992");
                            this.Manager.Comment("reaching state \'S2212\'");
                            bool temp1609;
                            bool temp1610;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1611;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1611 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1609, out temp1610);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2432\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1609, "isBytesReturnedSet of FsCtlForEasyRequest, state S2432");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1610, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2432");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1611, "return of FsCtlForEasyRequest, state S2432");
                            this.Manager.Comment("reaching state \'S2592\'");
                            goto label278;
                        }
                        if ((temp1616 == 1)) {
                            this.Manager.Comment("reaching state \'S1669\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1612;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1612 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1993\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1612, "return of CreateFile, state S1993");
                            this.Manager.Comment("reaching state \'S2213\'");
                            bool temp1613;
                            bool temp1614;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1615;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1615 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1613, out temp1614);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2433\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1613, "isBytesReturnedSet of FsCtlForEasyRequest, state S2433");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1614, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2433");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1615, "return of FsCtlForEasyRequest, state S2433");
                            this.Manager.Comment("reaching state \'S2593\'");
                            goto label278;
                        }
                        throw new InvalidOperationException("never reached");
                    label278:
;
                        goto label280;
                    }
                    if ((temp1627 == 1)) {
                        this.Manager.Comment("reaching state \'S1099\'");
                        bool temp1617;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1617);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1617);
                        this.Manager.Comment("reaching state \'S1393\'");
                        int temp1626 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker3)));
                        if ((temp1626 == 0)) {
                            this.Manager.Comment("reaching state \'S1670\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1618;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1618 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1994\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1618, "return of CreateFile, state S1994");
                            this.Manager.Comment("reaching state \'S2214\'");
                            bool temp1619;
                            bool temp1620;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1621;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1621 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1619, out temp1620);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2434\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1619, "isBytesReturnedSet of FsCtlForEasyRequest, state S2434");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1620, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2434");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1621, "return of FsCtlForEasyRequest, state S2434");
                            this.Manager.Comment("reaching state \'S2594\'");
                            goto label279;
                        }
                        if ((temp1626 == 1)) {
                            this.Manager.Comment("reaching state \'S1671\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1622;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1622 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1995\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1622, "return of CreateFile, state S1995");
                            this.Manager.Comment("reaching state \'S2215\'");
                            bool temp1623;
                            bool temp1624;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1625;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_FILESYSTEM_GET_STATISTICS,BufferSi" +
                                    "zeSuccess,out _,out _)\'");
                            temp1625 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_FILESYSTEM_GET_STATISTICS, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1623, out temp1624);
                            this.Manager.Checkpoint("MS-FSA_R5803");
                            this.Manager.Checkpoint("[In FSCTL_FILESYSTEM_GET_STATISTICS] If the object store does not implement \r\n   " +
                                    "                             this functionality, the operation MUST be failed wi" +
                                    "th STATUS_INVALID_DEVICE_REQUEST. <23>");
                            this.Manager.Comment("reaching state \'S2435\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1623, "isBytesReturnedSet of FsCtlForEasyRequest, state S2435");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1624, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2435");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1625, "return of FsCtlForEasyRequest, state S2435");
                            this.Manager.Comment("reaching state \'S2595\'");
                            goto label279;
                        }
                        throw new InvalidOperationException("never reached");
                    label279:
;
                        goto label280;
                    }
                    throw new InvalidOperationException("never reached");
                label280:
;
                    goto label284;
                }
                if ((temp1650 == 1)) {
                    this.Manager.Comment("reaching state \'S615\'");
                    bool temp1628;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1628);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1628);
                    this.Manager.Comment("reaching state \'S849\'");
                    int temp1649 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker3)));
                    if ((temp1649 == 0)) {
                        this.Manager.Comment("reaching state \'S1100\'");
                        bool temp1629;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1629);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1629);
                        this.Manager.Comment("reaching state \'S1394\'");
                        int temp1638 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker5)));
                        if ((temp1638 == 0)) {
                            this.Manager.Comment("reaching state \'S1672\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1630;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1630 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1996\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1630, "return of CreateFile, state S1996");
                            this.Manager.Comment("reaching state \'S2216\'");
                            bool temp1631;
                            bool temp1632;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1633;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1633 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1631, out temp1632);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2436\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1631, "isBytesReturnedSet of FsCtlForEasyRequest, state S2436");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1632, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2436");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1633, "return of FsCtlForEasyRequest, state S2436");
                            this.Manager.Comment("reaching state \'S2596\'");
                            goto label281;
                        }
                        if ((temp1638 == 1)) {
                            this.Manager.Comment("reaching state \'S1673\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1634;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1634 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1997\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1634, "return of CreateFile, state S1997");
                            this.Manager.Comment("reaching state \'S2217\'");
                            bool temp1635;
                            bool temp1636;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1637;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1637 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1635, out temp1636);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2437\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1635, "isBytesReturnedSet of FsCtlForEasyRequest, state S2437");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1636, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2437");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1637, "return of FsCtlForEasyRequest, state S2437");
                            this.Manager.Comment("reaching state \'S2597\'");
                            goto label281;
                        }
                        throw new InvalidOperationException("never reached");
                    label281:
;
                        goto label283;
                    }
                    if ((temp1649 == 1)) {
                        this.Manager.Comment("reaching state \'S1101\'");
                        bool temp1639;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1639);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1639);
                        this.Manager.Comment("reaching state \'S1395\'");
                        int temp1648 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker7)));
                        if ((temp1648 == 0)) {
                            this.Manager.Comment("reaching state \'S1674\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1640;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1640 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1998\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1640, "return of CreateFile, state S1998");
                            this.Manager.Comment("reaching state \'S2218\'");
                            bool temp1641;
                            bool temp1642;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1643;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1643 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1641, out temp1642);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2438\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1641, "isBytesReturnedSet of FsCtlForEasyRequest, state S2438");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1642, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2438");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1643, "return of FsCtlForEasyRequest, state S2438");
                            this.Manager.Comment("reaching state \'S2598\'");
                            goto label282;
                        }
                        if ((temp1648 == 1)) {
                            this.Manager.Comment("reaching state \'S1675\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1644;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1644 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S1999\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1644, "return of CreateFile, state S1999");
                            this.Manager.Comment("reaching state \'S2219\'");
                            bool temp1645;
                            bool temp1646;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1647;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_ON_DISK_VOLUME_INFO,LessThanFILE_Q" +
                                    "UERY_ON_DISK_VOL_INFO_BUFFER,out _,out _)\'");
                            temp1647 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_ON_DISK_VOLUME_INFO, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanFILE_QUERY_ON_DISK_VOL_INFO_BUFFER, out temp1645, out temp1646);
                            this.Manager.Checkpoint("MS-FSA_R5508");
                            this.Manager.Checkpoint("[In FSCTL_QUERY_ON_DISK_VOLUME_INFO]If the object store does not implement this f" +
                                    "unctionality, \r\n                                the operation MUST be failed wit" +
                                    "h STATUS_INVALID_DEVICE_REQUEST.<34>");
                            this.Manager.Comment("reaching state \'S2439\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1645, "isBytesReturnedSet of FsCtlForEasyRequest, state S2439");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1646, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2439");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1647, "return of FsCtlForEasyRequest, state S2439");
                            this.Manager.Comment("reaching state \'S2599\'");
                            goto label282;
                        }
                        throw new InvalidOperationException("never reached");
                    label282:
;
                        goto label283;
                    }
                    throw new InvalidOperationException("never reached");
                label283:
;
                    goto label284;
                }
                throw new InvalidOperationException("never reached");
            label284:
;
                goto label292;
            }
            if ((temp1697 == 1)) {
                this.Manager.Comment("reaching state \'S303\'");
                bool temp1651;
                this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
                this.IFSAAdapterInstance.GetObjectFunctionality(out temp1651);
                this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1651);
                this.Manager.Comment("reaching state \'S455\'");
                int temp1696 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS8GetObjectFunctionalityChecker2)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS8GetObjectFunctionalityChecker3)));
                if ((temp1696 == 0)) {
                    this.Manager.Comment("reaching state \'S616\'");
                    bool temp1652;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1652);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1652);
                    this.Manager.Comment("reaching state \'S850\'");
                    int temp1673 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker4)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker5)));
                    if ((temp1673 == 0)) {
                        this.Manager.Comment("reaching state \'S1102\'");
                        bool temp1653;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1653);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1653);
                        this.Manager.Comment("reaching state \'S1396\'");
                        int temp1662 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker8)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker9)));
                        if ((temp1662 == 0)) {
                            this.Manager.Comment("reaching state \'S1676\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1654;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1654 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2000\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1654, "return of CreateFile, state S2000");
                            this.Manager.Comment("reaching state \'S2220\'");
                            bool temp1655;
                            bool temp1656;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1657;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(RECALL_FILE,BufferSizeSuccess,out _,out " +
                                    "_)\'");
                            temp1657 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.RECALL_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1655, out temp1656);
                            this.Manager.Checkpoint("MS-FSA_R1132");
                            this.Manager.Checkpoint("[ In FSCTL_RECALL_FILE] If the object store does not implement this functionality" +
                                    ", \r\n                                the operation MUST be failed with STATUS_INV" +
                                    "ALID_DEVICE_REQUEST.<37>");
                            this.Manager.Comment("reaching state \'S2440\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1655, "isBytesReturnedSet of FsCtlForEasyRequest, state S2440");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1656, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2440");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1657, "return of FsCtlForEasyRequest, state S2440");
                            this.Manager.Comment("reaching state \'S2600\'");
                            goto label285;
                        }
                        if ((temp1662 == 1)) {
                            this.Manager.Comment("reaching state \'S1677\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1658;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1658 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2001\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1658, "return of CreateFile, state S2001");
                            this.Manager.Comment("reaching state \'S2221\'");
                            bool temp1659;
                            bool temp1660;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1661;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(RECALL_FILE,BufferSizeSuccess,out _,out " +
                                    "_)\'");
                            temp1661 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.RECALL_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1659, out temp1660);
                            this.Manager.Checkpoint("MS-FSA_R1132");
                            this.Manager.Checkpoint("[ In FSCTL_RECALL_FILE] If the object store does not implement this functionality" +
                                    ", \r\n                                the operation MUST be failed with STATUS_INV" +
                                    "ALID_DEVICE_REQUEST.<37>");
                            this.Manager.Comment("reaching state \'S2441\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1659, "isBytesReturnedSet of FsCtlForEasyRequest, state S2441");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1660, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2441");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1661, "return of FsCtlForEasyRequest, state S2441");
                            this.Manager.Comment("reaching state \'S2601\'");
                            goto label285;
                        }
                        throw new InvalidOperationException("never reached");
                    label285:
;
                        goto label287;
                    }
                    if ((temp1673 == 1)) {
                        this.Manager.Comment("reaching state \'S1103\'");
                        bool temp1663;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1663);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1663);
                        this.Manager.Comment("reaching state \'S1397\'");
                        int temp1672 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker10)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker11)));
                        if ((temp1672 == 0)) {
                            this.Manager.Comment("reaching state \'S1678\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1664;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1664 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2002\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1664, "return of CreateFile, state S2002");
                            this.Manager.Comment("reaching state \'S2222\'");
                            bool temp1665;
                            bool temp1666;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1667;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(GET_NTFS_VOLUME_DATA,LessThanNTFS_VOLUME" +
                                    "_DATA_BUFFER,out _,out _)\'");
                            temp1667 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.GET_NTFS_VOLUME_DATA, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanNTFS_VOLUME_DATA_BUFFER, out temp1665, out temp1666);
                            this.Manager.Checkpoint("MS-FSA_R5018");
                            this.Manager.Checkpoint("[In FSCTL_GET_NTFS_VOLUME_DATA] Pseudocode for the operation is as follows:\r\n    " +
                                    "                            If OutputBufferSize is less than sizeof( NTFS_VOLUME" +
                                    "_DATA_BUFFER ), the operation MUST be failed with STATUS_BUFFER_TOO_SMALL.");
                            this.Manager.Comment("reaching state \'S2442\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:BUFFER_TOO_SMALL\'" +
                                    "");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1665, "isBytesReturnedSet of FsCtlForEasyRequest, state S2442");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1666, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2442");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1667, "return of FsCtlForEasyRequest, state S2442");
                            this.Manager.Comment("reaching state \'S2602\'");
                            goto label286;
                        }
                        if ((temp1672 == 1)) {
                            this.Manager.Comment("reaching state \'S1679\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1668;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1668 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2003\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1668, "return of CreateFile, state S2003");
                            this.Manager.Comment("reaching state \'S2223\'");
                            bool temp1669;
                            bool temp1670;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1671;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1671 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1669, out temp1670);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2443\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1669, "isBytesReturnedSet of FsCtlForEasyRequest, state S2443");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1670, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2443");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1671, "return of FsCtlForEasyRequest, state S2443");
                            this.Manager.Comment("reaching state \'S2603\'");
                            goto label286;
                        }
                        throw new InvalidOperationException("never reached");
                    label286:
;
                        goto label287;
                    }
                    throw new InvalidOperationException("never reached");
                label287:
;
                    goto label291;
                }
                if ((temp1696 == 1)) {
                    this.Manager.Comment("reaching state \'S617\'");
                    bool temp1674;
                    this.Manager.Comment("executing step \'call GetObjectIDsSupported(out _)\'");
                    this.IFSAAdapterInstance.GetObjectIDsSupported(out temp1674);
                    this.Manager.AddReturn(GetObjectIDsSupportedInfo, null, temp1674);
                    this.Manager.Comment("reaching state \'S851\'");
                    int temp1695 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker6)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectIDsSupportedInfo, null, new GetObjectIDsSupportedDelegate1(this.IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker7)));
                    if ((temp1695 == 0)) {
                        this.Manager.Comment("reaching state \'S1104\'");
                        bool temp1675;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1675);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1675);
                        this.Manager.Comment("reaching state \'S1398\'");
                        int temp1684 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker12)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker13)));
                        if ((temp1684 == 0)) {
                            this.Manager.Comment("reaching state \'S1680\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1676;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1676 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2004\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1676, "return of CreateFile, state S2004");
                            this.Manager.Comment("reaching state \'S2224\'");
                            bool temp1677;
                            bool temp1678;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1679;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1679 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1677, out temp1678);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2444\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1677, "isBytesReturnedSet of FsCtlForEasyRequest, state S2444");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1678, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2444");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1679, "return of FsCtlForEasyRequest, state S2444");
                            this.Manager.Comment("reaching state \'S2604\'");
                            goto label288;
                        }
                        if ((temp1684 == 1)) {
                            this.Manager.Comment("reaching state \'S1681\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1680;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1680 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2005\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1680, "return of CreateFile, state S2005");
                            this.Manager.Comment("reaching state \'S2225\'");
                            bool temp1681;
                            bool temp1682;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1683;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(FSCTL_SET_SHORT_NAME_BEHAVIOR,BufferSize" +
                                    "Success,out _,out _)\'");
                            temp1683 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.FSCTL_SET_SHORT_NAME_BEHAVIOR, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1681, out temp1682);
                            this.Manager.Checkpoint("[2.1.5.9.34   FSCTL_SET_SHORT_NAME_BEHAVIOR]\r\n                                Thi" +
                                    "s control code is reserved for the WinPE <95> environment; the object store MUST" +
                                    " return STATUS_INVALID_DEVICE_REQUEST.");
                            this.Manager.Comment("reaching state \'S2445\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1681, "isBytesReturnedSet of FsCtlForEasyRequest, state S2445");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1682, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2445");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1683, "return of FsCtlForEasyRequest, state S2445");
                            this.Manager.Comment("reaching state \'S2605\'");
                            goto label288;
                        }
                        throw new InvalidOperationException("never reached");
                    label288:
;
                        goto label290;
                    }
                    if ((temp1695 == 1)) {
                        this.Manager.Comment("reaching state \'S1105\'");
                        bool temp1685;
                        this.Manager.Comment("executing step \'call GetIfOpenFileVolumeIsReadOnly(out _)\'");
                        this.IFSAAdapterInstance.GetIfOpenFileVolumeIsReadOnly(out temp1685);
                        this.Manager.AddReturn(GetIfOpenFileVolumeIsReadOnlyInfo, null, temp1685);
                        this.Manager.Comment("reaching state \'S1399\'");
                        int temp1694 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker14)), new ExpectedReturn(IoCtlRequestTestCase.GetIfOpenFileVolumeIsReadOnlyInfo, null, new GetIfOpenFileVolumeIsReadOnlyDelegate1(this.IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker15)));
                        if ((temp1694 == 0)) {
                            this.Manager.Comment("reaching state \'S1682\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1686;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1686 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2006\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1686, "return of CreateFile, state S2006");
                            this.Manager.Comment("reaching state \'S2226\'");
                            bool temp1687;
                            bool temp1688;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1689;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1689 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1687, out temp1688);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2446\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1687, "isBytesReturnedSet of FsCtlForEasyRequest, state S2446");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1688, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2446");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1689, "return of FsCtlForEasyRequest, state S2446");
                            this.Manager.Comment("reaching state \'S2606\'");
                            goto label289;
                        }
                        if ((temp1694 == 1)) {
                            this.Manager.Comment("reaching state \'S1683\'");
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1690;
                            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                                    "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                            temp1690 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                            this.Manager.Checkpoint("MS-FSA_R405");
                            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                            this.Manager.Checkpoint("MS-FSA_R475");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
                            this.Manager.Checkpoint("MS-FSA_R474");
                            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
                            this.Manager.Comment("reaching state \'S2007\'");
                            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1690, "return of CreateFile, state S2007");
                            this.Manager.Comment("reaching state \'S2227\'");
                            bool temp1691;
                            bool temp1692;
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1693;
                            this.Manager.Comment("executing step \'call FsCtlForEasyRequest(QUERY_FAT_BPB,LessThan0x24,out _,out _)\'" +
                                    "");
                            temp1693 = this.IFSAAdapterInstance.FsCtlForEasyRequest(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsControlRequestType.QUERY_FAT_BPB, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThan0x24, out temp1691, out temp1692);
                            this.Manager.Checkpoint("MS-FSA_R1117");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]If this operation is not supported, \r\n                  " +
                                    "              this operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<" +
                                    "31>");
                            this.Manager.Checkpoint("MS-FSA_R5944");
                            this.Manager.Checkpoint("[ In FSCTL_QUERY_FAT_BPB]implement this functionality, \r\n                        " +
                                    "        the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<32>");
                            this.Manager.Comment("reaching state \'S2447\'");
                            this.Manager.Comment("checking step \'return FsCtlForEasyRequest/[out False,out False]:INVALID_DEVICE_RE" +
                                    "QUEST\'");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1691, "isBytesReturnedSet of FsCtlForEasyRequest, state S2447");
                            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1692, "isOutputBufferSizeReturn of FsCtlForEasyRequest, state S2447");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1693, "return of FsCtlForEasyRequest, state S2447");
                            this.Manager.Comment("reaching state \'S2607\'");
                            goto label289;
                        }
                        throw new InvalidOperationException("never reached");
                    label289:
;
                        goto label290;
                    }
                    throw new InvalidOperationException("never reached");
                label290:
;
                    goto label291;
                }
                throw new InvalidOperationException("never reached");
            label291:
;
                goto label292;
            }
            throw new InvalidOperationException("never reached");
        label292:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS8GetIfNtfsFileSystemChecker(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S222");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S454");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S848");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1392");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker1(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1392");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S848");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker2(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1393");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker3(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1393");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S454");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker2(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S849");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker4(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1394");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker5(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1394");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker3(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S849");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker6(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1395");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker7(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1395");
        }
        
        private void IoCtlRequestTestCaseS8GetIfNtfsFileSystemChecker1(bool isNtfsFileSystem) {
            this.Manager.Comment("checking step \'return GetIfNtfsFileSystem/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isNtfsFileSystem, "isNtfsFileSystem of GetIfNtfsFileSystem, state S222");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectFunctionalityChecker2(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S455");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker4(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S850");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker8(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1396");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker9(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1396");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker5(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S850");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker10(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1397");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker11(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1397");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectFunctionalityChecker3(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S455");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker6(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetObjectIDsSupported, state S851");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker12(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1398");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker13(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1398");
        }
        
        private void IoCtlRequestTestCaseS8GetObjectIDsSupportedChecker7(bool isSupported) {
            this.Manager.Comment("checking step \'return GetObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetObjectIDsSupported, state S851");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker14(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1399");
        }
        
        private void IoCtlRequestTestCaseS8GetIfOpenFileVolumeIsReadOnlyChecker15(bool isReadOnly) {
            this.Manager.Comment("checking step \'return GetIfOpenFileVolumeIsReadOnly/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isReadOnly, "isReadOnly of GetIfOpenFileVolumeIsReadOnly, state S1399");
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS80() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S187\'");
            bool temp1698;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1698);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1698);
            this.Manager.Comment("reaching state \'S263\'");
            int temp1705 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS80GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS80GetObjectFunctionalityChecker1)));
            if ((temp1705 == 0)) {
                this.Manager.Comment("reaching state \'S384\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1699;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1699 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S536\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1699, "return of CreateFile, state S536");
                this.Manager.Comment("reaching state \'S728\'");
                bool temp1700;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1701;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(BufferSizeSuccess,out _)\'");
                temp1701 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1700);
                this.Manager.Checkpoint("MS-FSA_R7936");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA] If the object store does not implement this functio" +
                        "nality, \r\n                    the operation MUST be failed with STATUS_INVALID_D" +
                        "EVICE_REQUEST. <36>");
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out False]:INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1700, "isBytesReturnedSet of FsCtlReadFileUSNData, state S962");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1701, "return of FsCtlReadFileUSNData, state S962");
                this.Manager.Comment("reaching state \'S1236\'");
                goto label293;
            }
            if ((temp1705 == 1)) {
                this.Manager.Comment("reaching state \'S385\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1702;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1702 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1702, "return of CreateFile, state S537");
                this.Manager.Comment("reaching state \'S729\'");
                bool temp1703;
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1704;
                this.Manager.Comment("executing step \'call FsCtlReadFileUSNData(BufferSizeSuccess,out _)\'");
                temp1704 = this.IFSAAdapterInstance.FsCtlReadFileUSNData(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, out temp1703);
                this.Manager.Checkpoint("MS-FSA_R3888");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA]Upon successful completion of the operation, \r\n     " +
                        "           the object store MUST return:BytesReturned set to RecordLength.");
                this.Manager.Checkpoint("MS-FSA_R3860");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA]On completion, the object store MUST return:\r\n      " +
                        "          [Status ,OutputBuffer ,BytesReturned].");
                this.Manager.Checkpoint("MS-FSA_R3889");
                this.Manager.Checkpoint("[In FSCTL_READ_FILE_USN_DATA]Upon successful completion of the operation, \r\n     " +
                        "           the object store MUST return:Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("checking step \'return FsCtlReadFileUSNData/[out True]:SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, temp1703, "isBytesReturnedSet of FsCtlReadFileUSNData, state S963");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1704, "return of FsCtlReadFileUSNData, state S963");
                this.Manager.Comment("reaching state \'S1237\'");
                goto label293;
            }
            throw new InvalidOperationException("never reached");
        label293:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS80GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S263");
        }
        
        private void IoCtlRequestTestCaseS80GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S263");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS82() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S188\'");
            bool temp1706;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1706);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1706);
            this.Manager.Comment("reaching state \'S264\'");
            int temp1711 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS82GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS82GetObjectFunctionalityChecker1)));
            if ((temp1711 == 0)) {
                this.Manager.Comment("reaching state \'S386\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1707;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1707 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1707, "return of CreateFile, state S538");
                this.Manager.Comment("reaching state \'S730\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1708;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(BufferSizeSuccess,NotPrefinedValue,True)" +
                        "\'");
                temp1708 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(1)), true);
                this.Manager.Checkpoint("MS-FSA_R7732");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]On completion, the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1708, "return of FsCtlSetCompression, state S964");
                this.Manager.Comment("reaching state \'S1238\'");
                goto label294;
            }
            if ((temp1711 == 1)) {
                this.Manager.Comment("reaching state \'S387\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1709;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1709 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1709, "return of CreateFile, state S539");
                this.Manager.Comment("reaching state \'S731\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1710;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(LessThanTwoBytes,NotPrefinedValue,False)" +
                        "\'");
                temp1710 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanTwoBytes, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(1)), false);
                this.Manager.Checkpoint("MS-FSA_R1142");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]The operation MUST be failed with STATUS_INVALID_PARAM" +
                        "ETER \r\n                    under any of the following conditions:InputBufferSize" +
                        " is less than sizeof( USHORT ) (2 bytes).");
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1710, "return of FsCtlSetCompression, state S965");
                this.Manager.Comment("reaching state \'S1239\'");
                goto label294;
            }
            throw new InvalidOperationException("never reached");
        label294:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS82GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S264");
        }
        
        private void IoCtlRequestTestCaseS82GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S264");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS84() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S189\'");
            bool temp1712;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1712);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1712);
            this.Manager.Comment("reaching state \'S265\'");
            int temp1717 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS84GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS84GetObjectFunctionalityChecker1)));
            if ((temp1717 == 0)) {
                this.Manager.Comment("reaching state \'S388\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1713;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1713 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1713, "return of CreateFile, state S540");
                this.Manager.Comment("reaching state \'S732\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1714;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(BufferSizeSuccess,COMPRESSION_FORMAT_NON" +
                        "E,False)\'");
                temp1714 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(0)), false);
                this.Manager.Checkpoint("MS-FSA_R7732");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]On completion, the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S966\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1714, "return of FsCtlSetCompression, state S966");
                this.Manager.Comment("reaching state \'S1240\'");
                goto label295;
            }
            if ((temp1717 == 1)) {
                this.Manager.Comment("reaching state \'S389\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1715;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1715 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1715, "return of CreateFile, state S541");
                this.Manager.Comment("reaching state \'S733\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1716;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(BufferSizeSuccess,COMPRESSION_FORMAT_NON" +
                        "E,False)\'");
                temp1716 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(0)), false);
                this.Manager.Checkpoint("MS-FSA_R1266");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]On completion, the object store MUST return:[Status].");
                this.Manager.Checkpoint("MS-FSA_R1724");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]If (InputBuffer.CompressionState == COMPRESSION_FORMAT" +
                        "_NONE \r\n                and Open.Stream.IsCompressed is FALSE),the operation MUS" +
                        "T immediately return STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R1725");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]If (InputBuffer.CompressionState != COMPRESSION_FORMAT" +
                        "_NONE \r\n                and Open.Stream.IsCompressed is TRUE), the operation MUS" +
                        "T immediately return STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R1169");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]Upon successful completion of the operation, \r\n       " +
                        "         the object store MUST return:[ Status set to STATUS_SUCCESS].");
                this.Manager.Comment("reaching state \'S967\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1716, "return of FsCtlSetCompression, state S967");
                this.Manager.Comment("reaching state \'S1241\'");
                goto label295;
            }
            throw new InvalidOperationException("never reached");
        label295:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS84GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S265");
        }
        
        private void IoCtlRequestTestCaseS84GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S265");
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS86() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S190\'");
            bool temp1718;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1718);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1718);
            this.Manager.Comment("reaching state \'S266\'");
            int temp1723 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS86GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS86GetObjectFunctionalityChecker1)));
            if ((temp1723 == 0)) {
                this.Manager.Comment("reaching state \'S390\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1719;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1719 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1719, "return of CreateFile, state S542");
                this.Manager.Comment("reaching state \'S734\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1720;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(BufferSizeSuccess,COMPRESSION_FORMAT_NON" +
                        "E,False)\'");
                temp1720 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(0)), false);
                this.Manager.Checkpoint("MS-FSA_R7732");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]On completion, the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S968\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1720, "return of FsCtlSetCompression, state S968");
                this.Manager.Comment("reaching state \'S1242\'");
                goto label296;
            }
            if ((temp1723 == 1)) {
                this.Manager.Comment("reaching state \'S391\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1721;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1721 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1721, "return of CreateFile, state S543");
                this.Manager.Comment("reaching state \'S735\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1722;
                this.Manager.Comment("executing step \'call FsCtlSetCompression(BufferSizeSuccess,NotPrefinedValue,True)" +
                        "\'");
                temp1722 = this.IFSAAdapterInstance.FsCtlSetCompression(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferCompressionState)(1)), true);
                this.Manager.Checkpoint("MS-FSA_R1143");
                this.Manager.Checkpoint("[ In FSCTL_SET_COMPRESSION]The operation MUST be failed with STATUS_INVALID_PARAM" +
                        "ETER \r\n                    under any of the following conditions:InputBuffer.Com" +
                        "pressionState is not one of the predefined values in [MS-FSCC] section 2.3.45.");
                this.Manager.Comment("reaching state \'S969\'");
                this.Manager.Comment("checking step \'return FsCtlSetCompression/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1722, "return of FsCtlSetCompression, state S969");
                this.Manager.Comment("reaching state \'S1243\'");
                goto label296;
            }
            throw new InvalidOperationException("never reached");
        label296:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS86GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S266");
        }
        
        private void IoCtlRequestTestCaseS86GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S266");
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS88() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS88");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S191\'");
            bool temp1724;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1724);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1724);
            this.Manager.Comment("reaching state \'S267\'");
            int temp1729 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS88GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS88GetObjectFunctionalityChecker1)));
            if ((temp1729 == 0)) {
                this.Manager.Comment("reaching state \'S392\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1725;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1725 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S544\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1725, "return of CreateFile, state S544");
                this.Manager.Comment("reaching state \'S736\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1726;
                this.Manager.Comment("executing step \'call FsCtlSetDefectManagement(LessThanOneBytes,True)\'");
                temp1726 = this.IFSAAdapterInstance.FsCtlSetDefectManagement(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanOneBytes, true);
                this.Manager.Checkpoint("MS-FSA_R1178");
                this.Manager.Checkpoint("[ In FSCTL_SET_DEFECT_MANAGEMENT, Pseudocode for the operation is as follows]\r\n  " +
                        "                  If InputBufferSize is less than sizeof( Boolean ) (1 byte), th" +
                        "e operation MUST be failed with STATUS_INVALID_PARAMETER.");
                this.Manager.Comment("reaching state \'S970\'");
                this.Manager.Comment("checking step \'return FsCtlSetDefectManagement/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1726, "return of FsCtlSetDefectManagement, state S970");
                this.Manager.Comment("reaching state \'S1244\'");
                goto label297;
            }
            if ((temp1729 == 1)) {
                this.Manager.Comment("reaching state \'S393\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1727;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1727 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S545\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1727, "return of CreateFile, state S545");
                this.Manager.Comment("reaching state \'S737\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1728;
                this.Manager.Comment("executing step \'call FsCtlSetDefectManagement(LessThanOneBytes,True)\'");
                temp1728 = this.IFSAAdapterInstance.FsCtlSetDefectManagement(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanOneBytes, true);
                this.Manager.Checkpoint("MS-FSA_R4147");
                this.Manager.Checkpoint("[ In FSCTL_SET_DEFECT_MANAGEMENT] If the object store does not implement this fun" +
                        "ctionality \r\n                    or the target media is not a software defect-ma" +
                        "naged media, the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<40" +
                        ">");
                this.Manager.Comment("reaching state \'S971\'");
                this.Manager.Comment("checking step \'return FsCtlSetDefectManagement/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1728, "return of FsCtlSetDefectManagement, state S971");
                this.Manager.Comment("reaching state \'S1245\'");
                goto label297;
            }
            throw new InvalidOperationException("never reached");
        label297:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS88GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S267");
        }
        
        private void IoCtlRequestTestCaseS88GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S267");
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS90() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS90");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S192\'");
            bool temp1730;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1730);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1730);
            this.Manager.Comment("reaching state \'S268\'");
            int temp1735 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS90GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS90GetObjectFunctionalityChecker1)));
            if ((temp1735 == 0)) {
                this.Manager.Comment("reaching state \'S394\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1731;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1731 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S546\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1731, "return of CreateFile, state S546");
                this.Manager.Comment("reaching state \'S738\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1732;
                this.Manager.Comment("executing step \'call FsCtlSetDefectManagement(BufferSizeSuccess,True)\'");
                temp1732 = this.IFSAAdapterInstance.FsCtlSetDefectManagement(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true);
                this.Manager.Checkpoint("MS-FSA_R1182");
                this.Manager.Checkpoint("[ In FSCTL_SET_DEFECT_MANAGEMENT]Upon successful completion of the operation, \r\n " +
                        "               the object store MUST return:Status set to STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R1176");
                this.Manager.Checkpoint("[ In FSCTL_SET_DEFECT_MANAGEMENT]On completion, the object store MUST return:Stat" +
                        "us: \r\n                An NTSTATUS code that specifies the result.");
                this.Manager.Comment("reaching state \'S972\'");
                this.Manager.Comment("checking step \'return FsCtlSetDefectManagement/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1732, "return of FsCtlSetDefectManagement, state S972");
                this.Manager.Comment("reaching state \'S1246\'");
                goto label298;
            }
            if ((temp1735 == 1)) {
                this.Manager.Comment("reaching state \'S395\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1733;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1733 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S547\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1733, "return of CreateFile, state S547");
                this.Manager.Comment("reaching state \'S739\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1734;
                this.Manager.Comment("executing step \'call FsCtlSetDefectManagement(BufferSizeSuccess,True)\'");
                temp1734 = this.IFSAAdapterInstance.FsCtlSetDefectManagement(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess, true);
                this.Manager.Checkpoint("MS-FSA_R4147");
                this.Manager.Checkpoint("[ In FSCTL_SET_DEFECT_MANAGEMENT] If the object store does not implement this fun" +
                        "ctionality \r\n                    or the target media is not a software defect-ma" +
                        "naged media, the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST.<40" +
                        ">");
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment("checking step \'return FsCtlSetDefectManagement/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1734, "return of FsCtlSetDefectManagement, state S973");
                this.Manager.Comment("reaching state \'S1247\'");
                goto label298;
            }
            throw new InvalidOperationException("never reached");
        label298:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS90GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S268");
        }
        
        private void IoCtlRequestTestCaseS90GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S268");
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS92() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS92");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S193\'");
            bool temp1736;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1736);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1736);
            this.Manager.Comment("reaching state \'S269\'");
            int temp1741 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS92GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS92GetObjectFunctionalityChecker1)));
            if ((temp1741 == 0)) {
                this.Manager.Comment("reaching state \'S396\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1737;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1737 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1737, "return of CreateFile, state S548");
                this.Manager.Comment("reaching state \'S740\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1738;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(True,NOT_VALID_IN_FSCC,BufferSizeSuccess)" +
                        "\'");
                temp1738 = this.IFSAAdapterInstance.FsCtlSetEncryption(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.NOT_VALID_IN_FSCC, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3891");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]If the object store does not implement encryption, \r\n   " +
                        "                 the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST" +
                        ".<41>");
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1738, "return of FsCtlSetEncryption, state S974");
                this.Manager.Comment("reaching state \'S1248\'");
                goto label299;
            }
            if ((temp1741 == 1)) {
                this.Manager.Comment("reaching state \'S397\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1739;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1739 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1739, "return of CreateFile, state S549");
                this.Manager.Comment("reaching state \'S741\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1740;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(False,STREAM_SET_ENCRYPTION,BufferSizeSuc" +
                        "cess)\'");
                temp1740 = this.IFSAAdapterInstance.FsCtlSetEncryption(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.STREAM_SET_ENCRYPTION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3896");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]On completion, the object store MUST return:[Status].");
                this.Manager.Checkpoint("MS-FSA_R3919");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]Upon successful completion of this operation, \r\n        " +
                        "        the object store MUST return:Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S975\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1740, "return of FsCtlSetEncryption, state S975");
                this.Manager.Comment("reaching state \'S1249\'");
                goto label299;
            }
            throw new InvalidOperationException("never reached");
        label299:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS92GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S269");
        }
        
        private void IoCtlRequestTestCaseS92GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S269");
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS94() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS94");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S194\'");
            bool temp1742;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1742);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1742);
            this.Manager.Comment("reaching state \'S270\'");
            int temp1747 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS94GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS94GetObjectFunctionalityChecker1)));
            if ((temp1747 == 0)) {
                this.Manager.Comment("reaching state \'S398\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1743;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1743 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1743, "return of CreateFile, state S550");
                this.Manager.Comment("reaching state \'S742\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1744;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(False,NOT_VALID_IN_FSCC,LessThanENCRYPTIO" +
                        "N_BUFFER)\'");
                temp1744 = this.IFSAAdapterInstance.FsCtlSetEncryption(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.NOT_VALID_IN_FSCC, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanENCRYPTION_BUFFER);
                this.Manager.Checkpoint("MS-FSA_R3891");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]If the object store does not implement encryption, \r\n   " +
                        "                 the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST" +
                        ".<41>");
                this.Manager.Comment("reaching state \'S976\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1744, "return of FsCtlSetEncryption, state S976");
                this.Manager.Comment("reaching state \'S1250\'");
                goto label300;
            }
            if ((temp1747 == 1)) {
                this.Manager.Comment("reaching state \'S399\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1745;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1745 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1745, "return of CreateFile, state S551");
                this.Manager.Comment("reaching state \'S743\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1746;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(True,NOT_VALID_IN_FSCC,LessThanENCRYPTION" +
                        "_BUFFER)\'");
                temp1746 = this.IFSAAdapterInstance.FsCtlSetEncryption(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.NOT_VALID_IN_FSCC, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.LessThanENCRYPTION_BUFFER);
                this.Manager.Checkpoint("MS-FSA_R3899");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]If InputBufferSize is smaller than BlockAlign\r\n         " +
                        "           ( sizeof( ENCRYPTION_BUFFER ), 4 ), the operation MUST be failed with" +
                        " STATUS_BUFFER_TOO_SMALL.");
                this.Manager.Comment("reaching state \'S977\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/BUFFER_TOO_SMALL\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp1746, "return of FsCtlSetEncryption, state S977");
                this.Manager.Comment("reaching state \'S1251\'");
                goto label300;
            }
            throw new InvalidOperationException("never reached");
        label300:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS94GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S270");
        }
        
        private void IoCtlRequestTestCaseS94GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S270");
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS96() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS96");
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S195\'");
            bool temp1748;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1748);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1748);
            this.Manager.Comment("reaching state \'S271\'");
            int temp1753 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS96GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS96GetObjectFunctionalityChecker1)));
            if ((temp1753 == 0)) {
                this.Manager.Comment("reaching state \'S400\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1749;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1749 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1749, "return of CreateFile, state S552");
                this.Manager.Comment("reaching state \'S744\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1750;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(True,STREAM_CLEAR_ENCRYPTION,BufferSizeSu" +
                        "ccess)\'");
                temp1750 = this.IFSAAdapterInstance.FsCtlSetEncryption(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.STREAM_CLEAR_ENCRYPTION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3891");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]If the object store does not implement encryption, \r\n   " +
                        "                 the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST" +
                        ".<41>");
                this.Manager.Comment("reaching state \'S978\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1750, "return of FsCtlSetEncryption, state S978");
                this.Manager.Comment("reaching state \'S1252\'");
                goto label301;
            }
            if ((temp1753 == 1)) {
                this.Manager.Comment("reaching state \'S401\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1751;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1751 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S553\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1751, "return of CreateFile, state S553");
                this.Manager.Comment("reaching state \'S745\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1752;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(True,STREAM_SET_ENCRYPTION,BufferSizeSucc" +
                        "ess)\'");
                temp1752 = this.IFSAAdapterInstance.FsCtlSetEncryption(true, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.STREAM_SET_ENCRYPTION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3901");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]The operation MUST be failed with STATUS_INVALID_PARAMET" +
                        "ER \r\n                    under any of the following conditions:If InputBuffer.En" +
                        "cryptionOperation == STREAM_SET_ENCRYPTION and Open.Stream.IsCompressed is TRUE." +
                        "");
                this.Manager.Comment("reaching state \'S979\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1752, "return of FsCtlSetEncryption, state S979");
                this.Manager.Comment("reaching state \'S1253\'");
                goto label301;
            }
            throw new InvalidOperationException("never reached");
        label301:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS96GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S271");
        }
        
        private void IoCtlRequestTestCaseS96GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S271");
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.IoCtlRequest)]
        public void IoCtlRequestTestCaseS98() {
            this.Manager.BeginTest("IoCtlRequestTestCaseS98");
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S196\'");
            bool temp1754;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp1754);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp1754);
            this.Manager.Comment("reaching state \'S272\'");
            int temp1759 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS98GetObjectFunctionalityChecker)), new ExpectedReturn(IoCtlRequestTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.IoCtlRequestTestCaseS98GetObjectFunctionalityChecker1)));
            if ((temp1759 == 0)) {
                this.Manager.Comment("reaching state \'S402\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1755;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1755 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S554\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1755, "return of CreateFile, state S554");
                this.Manager.Comment("reaching state \'S746\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1756;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(False,None,BufferSizeSuccess)\'");
                temp1756 = this.IFSAAdapterInstance.FsCtlSetEncryption(false, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3891");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]If the object store does not implement encryption, \r\n   " +
                        "                 the operation MUST be failed with STATUS_INVALID_DEVICE_REQUEST" +
                        ".<41>");
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp1756, "return of FsCtlSetEncryption, state S980");
                this.Manager.Comment("reaching state \'S1254\'");
                goto label302;
            }
            if ((temp1759 == 1)) {
                this.Manager.Comment("reaching state \'S403\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1757;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1757 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1757, "return of CreateFile, state S555");
                this.Manager.Comment("reaching state \'S747\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1758;
                this.Manager.Comment("executing step \'call FsCtlSetEncryption(False,NOT_VALID_IN_FSCC,BufferSizeSuccess" +
                        ")\'");
                temp1758 = this.IFSAAdapterInstance.FsCtlSetEncryption(false, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.EncryptionOperation.NOT_VALID_IN_FSCC, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.BufferSize.BufferSizeSuccess);
                this.Manager.Checkpoint("MS-FSA_R3900");
                this.Manager.Checkpoint("[In FSCTL_SET_ENCRYPTION]The operation MUST be failed with STATUS_INVALID_PARAMET" +
                        "ER \r\n                    under any of the following conditions:If InputBuffer.En" +
                        "cryptionOperation is not one of the predefined values in [MS-FSCC] section 2.3.4" +
                        "7.");
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return FsCtlSetEncryption/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp1758, "return of FsCtlSetEncryption, state S981");
                this.Manager.Comment("reaching state \'S1255\'");
                goto label302;
            }
            throw new InvalidOperationException("never reached");
        label302:
;
            this.Manager.EndTest();
        }
        
        private void IoCtlRequestTestCaseS98GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S272");
        }
        
        private void IoCtlRequestTestCaseS98GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S272");
        }
        #endregion
    }
}
