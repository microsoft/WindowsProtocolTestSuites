// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QuerySecurityInformationTestCase : PtfTestClassBase {
        
        public QuerySecurityInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS0() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp0;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp0 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp0, "return of CreateFile, state S36");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp1;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp2;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(None,False,out _)\'");
            temp2 = this.IFSAAdapterInstance.QuerySecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), false, out temp1);
            this.Manager.Checkpoint("MS-FSA_R2800");
            this.Manager.Checkpoint("[In Server Requests a Query of Security Information,Pseudocode for the operation " +
                    "is as follows:]The object store MUST set OutputBuffer.Revision equal to 1.");
            this.Manager.Checkpoint("MS-FSA_R2769");
            this.Manager.Checkpoint("[In Server Requests a Query of Security Information]On completion, \r\n            " +
                    "    the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Checkpoint("MS-FSA_R2832");
            this.Manager.Checkpoint("[In Server Requests a Query of Security Information] \r\n                Pseudocode" +
                    " for the operation is as follows:The operation returns STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=1)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            1u}), temp1, "outputBuffer of QuerySecurityInfo, state S60");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp2, "return of QuerySecurityInfo, state S60");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS10() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S29\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp3 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp3, "return of CreateFile, state S41");
            this.Manager.Comment("reaching state \'S53\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp4;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp5;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(DACL_SECURITY_INFORMATION,False,out _)\'");
            temp5 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, false, out temp4);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp4, "outputBuffer of QuerySecurityInfo, state S65");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp5, "return of QuerySecurityInfo, state S65");
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS12() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S30\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp6;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp6 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp6, "return of CreateFile, state S42");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp7;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(LABEL_SECURITY_INFORMATION,True,out _)\'");
            temp8 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, true, out temp7);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp7, "outputBuffer of QuerySecurityInfo, state S66");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp8, "return of QuerySecurityInfo, state S66");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS14() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S31\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp9 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp9, "return of CreateFile, state S43");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp10;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp11;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(LABEL_SECURITY_INFORMATION,False,out _)\'");
            temp11 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, false, out temp10);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp10, "outputBuffer of QuerySecurityInfo, state S67");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp11, "return of QuerySecurityInfo, state S67");
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS16() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S32\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp12;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp12 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp12, "return of CreateFile, state S44");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp13;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp14;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(GROUP_SECURITY_INFORMATION,True,out _)\'");
            temp14 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, true, out temp13);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp13, "outputBuffer of QuerySecurityInfo, state S68");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp14, "return of QuerySecurityInfo, state S68");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS18() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S33\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp15, "return of CreateFile, state S45");
            this.Manager.Comment("reaching state \'S57\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp16;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(SACL_SECURITY_INFORMATION,True,out _)\'");
            temp17 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, true, out temp16);
            this.Manager.Checkpoint("MS-FSA_R2777");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains SACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain ACCESS_SYSTEM_SECURITY.");
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp16, "outputBuffer of QuerySecurityInfo, state S69");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp17, "return of QuerySecurityInfo, state S69");
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS2() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S25\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp18;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp18 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp18, "return of CreateFile, state S37");
            this.Manager.Comment("reaching state \'S49\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp19;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(None,True,out _)\'");
            temp20 = this.IFSAAdapterInstance.QuerySecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), true, out temp19);
            this.Manager.Checkpoint("MS-FSA_R2799");
            this.Manager.Checkpoint("[In Server Requests a Query of Security Information,Pseudocode for the operation " +
                    "is as follows:]If ByteCount is greater than OutputBufferSize, the operation MUST" +
                    " be failed with STATUS_BUFFER_OVERFLOW.");
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:BUFFER_OVERFLOW\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp19, "outputBuffer of QuerySecurityInfo, state S61");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_OVERFLOW, temp20, "return of QuerySecurityInfo, state S61");
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS20() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S34\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp21, "return of CreateFile, state S46");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp22;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(SACL_SECURITY_INFORMATION,False,out _)\'");
            temp23 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, false, out temp22);
            this.Manager.Checkpoint("MS-FSA_R2777");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains SACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain ACCESS_SYSTEM_SECURITY.");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp22, "outputBuffer of QuerySecurityInfo, state S70");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp23, "return of QuerySecurityInfo, state S70");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS22() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S35\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp24;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp24 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp24, "return of CreateFile, state S47");
            this.Manager.Comment("reaching state \'S59\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp25;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(GROUP_SECURITY_INFORMATION,False,out _)\'");
            temp26 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, false, out temp25);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp25, "outputBuffer of QuerySecurityInfo, state S71");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp26, "return of QuerySecurityInfo, state S71");
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS4() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp27 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp27, "return of CreateFile, state S38");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp28;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp29;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(OWNER_SECURITY_INFORMATION,True,out _)\'");
            temp29 = this.IFSAAdapterInstance.QuerySecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), true, out temp28);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp28, "outputBuffer of QuerySecurityInfo, state S62");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp29, "return of QuerySecurityInfo, state S62");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS6() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S27\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp30;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp30 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp30, "return of CreateFile, state S39");
            this.Manager.Comment("reaching state \'S51\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp31;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp32;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(OWNER_SECURITY_INFORMATION,False,out _)\'");
            temp32 = this.IFSAAdapterInstance.QuerySecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), false, out temp31);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp31, "outputBuffer of QuerySecurityInfo, state S63");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp32, "return of QuerySecurityInfo, state S63");
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QuerySecurityInformation)]
        public void QuerySecurityInformationTestCaseS8() {
            this.Manager.BeginTest("QuerySecurityInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S28\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,FILE_LIST_DIRECTOR" +
                    "Y,FILE_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameVali" +
                    "d)\'");
            temp33 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp33, "return of CreateFile, state S40");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp34;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp35;
            this.Manager.Comment("executing step \'call QuerySecurityInfo(DACL_SECURITY_INFORMATION,True,out _)\'");
            temp35 = this.IFSAAdapterInstance.QuerySecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, true, out temp34);
            this.Manager.Checkpoint("MS-FSA_R2776");
            this.Manager.Checkpoint(@"[In Server Requests a Query of Security Information,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_ACCESS_DENIED under either of the following conditions:
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION, GROUP_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, 
                    or DACL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain READ_CONTROL.");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("checking step \'return QuerySecurityInfo/[out OutputBuffer(AccessFlags=None,Revisi" +
                    "on=0)]:ACCESS_DENIED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp34, "outputBuffer of QuerySecurityInfo, state S64");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp35, "return of QuerySecurityInfo, state S64");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
