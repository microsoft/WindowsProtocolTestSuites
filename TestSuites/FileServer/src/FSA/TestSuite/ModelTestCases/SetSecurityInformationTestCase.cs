// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SetSecurityInformationTestCase : PtfTestClassBase {
        
        public SetSecurityInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetObjectFunctionalityDelegate1(bool isImplemented);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetObjectFunctionalityInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetObjectFunctionality", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS0() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S36\'");
            bool temp0;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp0);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp0);
            this.Manager.Comment("reaching state \'S54\'");
            int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS0GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS0GetObjectFunctionalityChecker1)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S72\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1, "return of CreateFile, state S108");
                this.Manager.Comment("reaching state \'S144\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp2;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp2 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp2, "return of SetSecurityInfo, state S180");
                this.Manager.Comment("reaching state \'S216\'");
                goto label0;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S73\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp3 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp3, "return of CreateFile, state S109");
                this.Manager.Comment("reaching state \'S145\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp4;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,OpenFileSecDesOwnerIsNull)\'");
                temp4 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3252");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information,Pseudocode for the operation is as follows:
                        else If SecurityInformation doesn't contain OWNER_SECURITY_INFORMATION:]If Open.File.SecurityDescriptor.Owner is NULL, 
                        the operation MUST be failed with STATUS_INVALID_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_OWNER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_OWNER, temp4, "return of SetSecurityInfo, state S181");
                this.Manager.Comment("reaching state \'S217\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS0GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S54");
        }
        
        private void SetSecurityInformationTestCaseS0GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S54");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS10() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S41\'");
            bool temp6;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp6);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp6);
            this.Manager.Comment("reaching state \'S59\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS10GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS10GetObjectFunctionalityChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S82\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp7 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp7, "return of CreateFile, state S118");
                this.Manager.Comment("reaching state \'S154\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp8 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp8, "return of SetSecurityInfo, state S190");
                this.Manager.Comment("reaching state \'S226\'");
                goto label1;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S83\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp9 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp9, "return of CreateFile, state S119");
                this.Manager.Comment("reaching state \'S155\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp10;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,OpenFileSecDesOwne" +
                        "rIsNull)\'");
                temp10 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3243");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                    SecurityInformation contains DACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain WRITE_DAC.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp10, "return of SetSecurityInfo, state S191");
                this.Manager.Comment("reaching state \'S227\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS10GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S59");
        }
        
        private void SetSecurityInformationTestCaseS10GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S59");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS12() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S42\'");
            bool temp12;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp12);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp12);
            this.Manager.Comment("reaching state \'S60\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS12GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS12GetObjectFunctionalityChecker1)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S84\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp13 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S120\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp13, "return of CreateFile, state S120");
                this.Manager.Comment("reaching state \'S156\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp14;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp14 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S192\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp14, "return of SetSecurityInfo, state S192");
                this.Manager.Comment("reaching state \'S228\'");
                goto label2;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S85\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S121\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp15, "return of CreateFile, state S121");
                this.Manager.Comment("reaching state \'S157\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp16;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp16 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S193\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp16, "return of SetSecurityInfo, state S193");
                this.Manager.Comment("reaching state \'S229\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS12GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S60");
        }
        
        private void SetSecurityInformationTestCaseS12GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S60");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS14() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S43\'");
            bool temp18;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp18);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp18);
            this.Manager.Comment("reaching state \'S61\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS14GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS14GetObjectFunctionalityChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S86\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp19;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp19 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S122\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp19, "return of CreateFile, state S122");
                this.Manager.Comment("reaching state \'S158\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp20 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp20, "return of SetSecurityInfo, state S194");
                this.Manager.Comment("reaching state \'S230\'");
                goto label3;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S87\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp21, "return of CreateFile, state S123");
                this.Manager.Comment("reaching state \'S159\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp22;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp22 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp22, "return of SetSecurityInfo, state S195");
                this.Manager.Comment("reaching state \'S231\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS14GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S61");
        }
        
        private void SetSecurityInformationTestCaseS14GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S61");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS16() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S44\'");
            bool temp24;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp24);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp24);
            this.Manager.Comment("reaching state \'S62\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS16GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS16GetObjectFunctionalityChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S88\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp25;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp25 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp25, "return of CreateFile, state S124");
                this.Manager.Comment("reaching state \'S160\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotValid)\'");
                temp26 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S196\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp26, "return of SetSecurityInfo, state S196");
                this.Manager.Comment("reaching state \'S232\'");
                goto label4;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S89\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp27 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp27, "return of CreateFile, state S125");
                this.Manager.Comment("reaching state \'S161\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp28;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,InputBufferOwnerSidNotValid)\'");
                temp28 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3255");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information,Pseudocode for the operation " +
                        "is as follows:]\r\n                 The operation returns STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp28, "return of SetSecurityInfo, state S197");
                this.Manager.Comment("reaching state \'S233\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS16GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S62");
        }
        
        private void SetSecurityInformationTestCaseS16GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S62");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS18() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S45\'");
            bool temp30;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp30);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp30);
            this.Manager.Comment("reaching state \'S63\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS18GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS18GetObjectFunctionalityChecker1)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S90\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp31;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp31 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp31, "return of CreateFile, state S126");
                this.Manager.Comment("reaching state \'S162\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp32;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp32 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp32, "return of SetSecurityInfo, state S198");
                this.Manager.Comment("reaching state \'S234\'");
                goto label5;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S91\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp33 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S127\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp33, "return of CreateFile, state S127");
                this.Manager.Comment("reaching state \'S163\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp34;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotPresent)\'");
                temp34 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3243");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                    SecurityInformation contains DACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain WRITE_DAC.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp34, "return of SetSecurityInfo, state S199");
                this.Manager.Comment("reaching state \'S235\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS18GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S63");
        }
        
        private void SetSecurityInformationTestCaseS18GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S63");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS2() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S37\'");
            bool temp36;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp36);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp36);
            this.Manager.Comment("reaching state \'S55\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS2GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS2GetObjectFunctionalityChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S74\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp37;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp37 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp37, "return of CreateFile, state S110");
                this.Manager.Comment("reaching state \'S146\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp38;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp38 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp38, "return of SetSecurityInfo, state S182");
                this.Manager.Comment("reaching state \'S218\'");
                goto label6;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S75\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp39;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp39 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp39, "return of CreateFile, state S111");
                this.Manager.Comment("reaching state \'S147\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp40;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotValid)\'");
                temp40 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3244");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: SecurityInformation contains SACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain ACCESS_SYSTEM_SECURITY.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp40, "return of SetSecurityInfo, state S183");
                this.Manager.Comment("reaching state \'S219\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS2GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S55");
        }
        
        private void SetSecurityInformationTestCaseS2GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S55");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS20() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S46\'");
            bool temp42;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp42);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp42);
            this.Manager.Comment("reaching state \'S64\'");
            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS20GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS20GetObjectFunctionalityChecker1)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S92\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp43 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp43, "return of CreateFile, state S128");
                this.Manager.Comment("reaching state \'S164\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp44;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,InputBufferOwnerSidNotValid)\'");
                temp44 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp44, "return of SetSecurityInfo, state S200");
                this.Manager.Comment("reaching state \'S236\'");
                goto label7;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S93\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp45;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp45 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp45, "return of CreateFile, state S129");
                this.Manager.Comment("reaching state \'S165\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp46;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp46 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp46, "return of SetSecurityInfo, state S201");
                this.Manager.Comment("reaching state \'S237\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS20GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S64");
        }
        
        private void SetSecurityInformationTestCaseS20GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S64");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS22() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S47\'");
            bool temp48;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp48);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp48);
            this.Manager.Comment("reaching state \'S65\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS22GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS22GetObjectFunctionalityChecker1)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S94\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp49;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp49 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp49, "return of CreateFile, state S130");
                this.Manager.Comment("reaching state \'S166\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,OpenFileSecDesOwne" +
                        "rIsNull)\'");
                temp50 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp50, "return of SetSecurityInfo, state S202");
                this.Manager.Comment("reaching state \'S238\'");
                goto label8;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S95\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp51 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp51, "return of CreateFile, state S131");
                this.Manager.Comment("reaching state \'S167\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp52;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp52 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp52, "return of SetSecurityInfo, state S203");
                this.Manager.Comment("reaching state \'S239\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS22GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S65");
        }
        
        private void SetSecurityInformationTestCaseS22GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S65");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS24() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S48\'");
            bool temp54;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp54);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp54);
            this.Manager.Comment("reaching state \'S66\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS24GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS24GetObjectFunctionalityChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S96\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp55;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp55 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp55, "return of CreateFile, state S132");
                this.Manager.Comment("reaching state \'S168\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp56;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotValid)\'");
                temp56 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S204\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp56, "return of SetSecurityInfo, state S204");
                this.Manager.Comment("reaching state \'S240\'");
                goto label9;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S97\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp57;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp57 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp57, "return of CreateFile, state S133");
                this.Manager.Comment("reaching state \'S169\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp58;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp58 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp58, "return of SetSecurityInfo, state S205");
                this.Manager.Comment("reaching state \'S241\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS24GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S66");
        }
        
        private void SetSecurityInformationTestCaseS24GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S66");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS26() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S49\'");
            bool temp60;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp60);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp60);
            this.Manager.Comment("reaching state \'S67\'");
            int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS26GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS26GetObjectFunctionalityChecker1)));
            if ((temp65 == 0)) {
                this.Manager.Comment("reaching state \'S98\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp61;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp61 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp61, "return of CreateFile, state S134");
                this.Manager.Comment("reaching state \'S170\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp62;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp62 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp62, "return of SetSecurityInfo, state S206");
                this.Manager.Comment("reaching state \'S242\'");
                goto label10;
            }
            if ((temp65 == 1)) {
                this.Manager.Comment("reaching state \'S99\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp63 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp63, "return of CreateFile, state S135");
                this.Manager.Comment("reaching state \'S171\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp64;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp64 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S207\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp64, "return of SetSecurityInfo, state S207");
                this.Manager.Comment("reaching state \'S243\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS26GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S67");
        }
        
        private void SetSecurityInformationTestCaseS26GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S67");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS28() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S50\'");
            bool temp66;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp66);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp66);
            this.Manager.Comment("reaching state \'S68\'");
            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS28GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS28GetObjectFunctionalityChecker1)));
            if ((temp71 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp67;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp67 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S136\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp67, "return of CreateFile, state S136");
                this.Manager.Comment("reaching state \'S172\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp68;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotPresent)\'");
                temp68 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S208\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp68, "return of SetSecurityInfo, state S208");
                this.Manager.Comment("reaching state \'S244\'");
                goto label11;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S101\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp69;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp69 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp69, "return of CreateFile, state S137");
                this.Manager.Comment("reaching state \'S173\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp70;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp70 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp70, "return of SetSecurityInfo, state S209");
                this.Manager.Comment("reaching state \'S245\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS28GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S68");
        }
        
        private void SetSecurityInformationTestCaseS28GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S68");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS30() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S51\'");
            bool temp72;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp72);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp72);
            this.Manager.Comment("reaching state \'S69\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS30GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS30GetObjectFunctionalityChecker1)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S102\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp73;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp73 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp73, "return of CreateFile, state S138");
                this.Manager.Comment("reaching state \'S174\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp74;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotPresent)\'");
                temp74 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp74, "return of SetSecurityInfo, state S210");
                this.Manager.Comment("reaching state \'S246\'");
                goto label12;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S103\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp75;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp75 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp75, "return of CreateFile, state S139");
                this.Manager.Comment("reaching state \'S175\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp76;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,OpenFileSecDesOwne" +
                        "rIsNull)\'");
                temp76 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3244");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: SecurityInformation contains SACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain ACCESS_SYSTEM_SECURITY.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp76, "return of SetSecurityInfo, state S211");
                this.Manager.Comment("reaching state \'S247\'");
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS30GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S69");
        }
        
        private void SetSecurityInformationTestCaseS30GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S69");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS32() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S52\'");
            bool temp78;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp78);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp78);
            this.Manager.Comment("reaching state \'S70\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS32GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS32GetObjectFunctionalityChecker1)));
            if ((temp83 == 0)) {
                this.Manager.Comment("reaching state \'S104\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp79;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp79 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp79, "return of CreateFile, state S140");
                this.Manager.Comment("reaching state \'S176\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp80;
                this.Manager.Comment("executing step \'call SetSecurityInfo(GROUP_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotPresent)\'");
                temp80 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.GROUP_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp80, "return of SetSecurityInfo, state S212");
                this.Manager.Comment("reaching state \'S248\'");
                goto label13;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S105\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp81;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp81 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp81, "return of CreateFile, state S141");
                this.Manager.Comment("reaching state \'S177\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp82;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotPresent)\'");
                temp82 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3244");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: SecurityInformation contains SACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain ACCESS_SYSTEM_SECURITY.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp82, "return of SetSecurityInfo, state S213");
                this.Manager.Comment("reaching state \'S249\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS32GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S70");
        }
        
        private void SetSecurityInformationTestCaseS32GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S70");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS34() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S53\'");
            bool temp84;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp84);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp84);
            this.Manager.Comment("reaching state \'S71\'");
            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS34GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS34GetObjectFunctionalityChecker1)));
            if ((temp89 == 0)) {
                this.Manager.Comment("reaching state \'S106\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp85;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp85 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp85, "return of CreateFile, state S142");
                this.Manager.Comment("reaching state \'S178\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp86;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,InputBufferOwnerSidNotPresent)\'");
                temp86 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp86, "return of SetSecurityInfo, state S214");
                this.Manager.Comment("reaching state \'S250\'");
                goto label14;
            }
            if ((temp89 == 1)) {
                this.Manager.Comment("reaching state \'S107\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp87;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp87 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp87, "return of CreateFile, state S143");
                this.Manager.Comment("reaching state \'S179\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp88;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,InputBufferOwnerSidNotPresent)\'");
                temp88 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(0)));
                this.Manager.Checkpoint("MS-FSA_R3255");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information,Pseudocode for the operation " +
                        "is as follows:]\r\n                 The operation returns STATUS_SUCCESS.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp88, "return of SetSecurityInfo, state S215");
                this.Manager.Comment("reaching state \'S251\'");
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS34GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S71");
        }
        
        private void SetSecurityInformationTestCaseS34GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S71");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS4() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S38\'");
            bool temp90;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp90);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp90);
            this.Manager.Comment("reaching state \'S56\'");
            int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS4GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS4GetObjectFunctionalityChecker1)));
            if ((temp95 == 0)) {
                this.Manager.Comment("reaching state \'S76\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp91;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp91 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp91, "return of CreateFile, state S112");
                this.Manager.Comment("reaching state \'S148\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp92;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,OpenFileSecDesOwn" +
                        "erIsNull)\'");
                temp92 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S184\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp92, "return of SetSecurityInfo, state S184");
                this.Manager.Comment("reaching state \'S220\'");
                goto label15;
            }
            if ((temp95 == 1)) {
                this.Manager.Comment("reaching state \'S77\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp93;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp93 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S113\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp93, "return of CreateFile, state S113");
                this.Manager.Comment("reaching state \'S149\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp94;
                this.Manager.Comment("executing step \'call SetSecurityInfo(LABEL_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp94 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.LABEL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S185\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp94, "return of SetSecurityInfo, state S185");
                this.Manager.Comment("reaching state \'S221\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS4GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S56");
        }
        
        private void SetSecurityInformationTestCaseS4GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S56");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS6() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S39\'");
            bool temp96;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp96);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp96);
            this.Manager.Comment("reaching state \'S57\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS6GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS6GetObjectFunctionalityChecker1)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S78\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp97;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp97 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp97, "return of CreateFile, state S114");
                this.Manager.Comment("reaching state \'S150\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp98;
                this.Manager.Comment("executing step \'call SetSecurityInfo(None,OpenFileSecDesOwnerIsNull)\'");
                temp98 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S186\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp98, "return of SetSecurityInfo, state S186");
                this.Manager.Comment("reaching state \'S222\'");
                goto label16;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S79\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp99;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp99 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp99, "return of CreateFile, state S115");
                this.Manager.Comment("reaching state \'S151\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp100;
                this.Manager.Comment("executing step \'call SetSecurityInfo(DACL_SECURITY_INFORMATION,InputBufferOwnerSi" +
                        "dNotValid)\'");
                temp100 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.DACL_SECURITY_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3243");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                    SecurityInformation contains DACL_SECURITY_INFORMATION and Open.GrantedAccess does not contain WRITE_DAC.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp100, "return of SetSecurityInfo, state S187");
                this.Manager.Comment("reaching state \'S223\'");
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS6GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S57");
        }
        
        private void SetSecurityInformationTestCaseS6GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S57");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetSecurityInformation)]
        public void SetSecurityInformationTestCaseS8() {
            this.Manager.BeginTest("SetSecurityInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S40\'");
            bool temp102;
            this.Manager.Comment("executing step \'call GetObjectFunctionality(out _)\'");
            this.IFSAAdapterInstance.GetObjectFunctionality(out temp102);
            this.Manager.AddReturn(GetObjectFunctionalityInfo, null, temp102);
            this.Manager.Comment("reaching state \'S58\'");
            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS8GetObjectFunctionalityChecker)), new ExpectedReturn(SetSecurityInformationTestCase.GetObjectFunctionalityInfo, null, new GetObjectFunctionalityDelegate1(this.SetSecurityInformationTestCaseS8GetObjectFunctionalityChecker1)));
            if ((temp107 == 0)) {
                this.Manager.Comment("reaching state \'S80\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp103;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp103 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp103, "return of CreateFile, state S116");
                this.Manager.Comment("reaching state \'S152\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp104;
                this.Manager.Comment("executing step \'call SetSecurityInfo(SACL_SECURITY_INFORMATION,OpenFileSecDesOwne" +
                        "rIsNull)\'");
                temp104 = this.IFSAAdapterInstance.SetSecurityInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation.SACL_SECURITY_INFORMATION, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid.OpenFileSecDesOwnerIsNull);
                this.Manager.Checkpoint("MS-FSA_R3232");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information] If the object store does not" +
                        " implement security, \r\n                    the operation MUST be failed with STA" +
                        "TUS_INVALID_DEVICE_REQUEST.");
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/INVALID_DEVICE_REQUEST\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_DEVICE_REQUEST, temp104, "return of SetSecurityInfo, state S188");
                this.Manager.Comment("reaching state \'S224\'");
                goto label17;
            }
            if ((temp107 == 1)) {
                this.Manager.Comment("reaching state \'S81\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp105;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_WRITE,FILE" +
                        "_SHARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp105 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp105, "return of CreateFile, state S117");
                this.Manager.Comment("reaching state \'S153\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp106;
                this.Manager.Comment("executing step \'call SetSecurityInfo(OWNER_SECURITY_INFORMATION,InputBufferOwnerS" +
                        "idNotValid)\'");
                temp106 = this.IFSAAdapterInstance.SetSecurityInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SecurityInformation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OwnerSid)(1)));
                this.Manager.Checkpoint("MS-FSA_R3258");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:SecurityInformation 
                    contains any of LABEL_SECURITY_INFORMATION, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3256");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                    The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions: 
                    SecurityInformation contains any of OWNER_SECURITY_INFORMATION,  and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3257");
                this.Manager.Checkpoint(@"[In Server Requests Setting of Security Information]  
                     The operation MUST be failed with STATUS_ACCESS_DENIED under any of the following conditions:
                     SecurityInformation contains any of GROUP_SECURITY_INFORMATION,, and Open.GrantedAccess does not contain WRITE_OWNER.");
                this.Manager.Checkpoint("MS-FSA_R3239");
                this.Manager.Checkpoint("[In Server Requests Setting of Security Information]On completion, \r\n            " +
                        "            the object store MUST return:[Status].");
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return SetSecurityInfo/ACCESS_DENIED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.ACCESS_DENIED, temp106, "return of SetSecurityInfo, state S189");
                this.Manager.Comment("reaching state \'S225\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void SetSecurityInformationTestCaseS8GetObjectFunctionalityChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetObjectFunctionality, state S58");
        }
        
        private void SetSecurityInformationTestCaseS8GetObjectFunctionalityChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetObjectFunctionality/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetObjectFunctionality, state S58");
        }
        #endregion
    }
}
