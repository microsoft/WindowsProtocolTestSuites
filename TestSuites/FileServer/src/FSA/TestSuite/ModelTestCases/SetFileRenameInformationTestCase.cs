// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SetFileRenameInformationTestCase : PtfTestClassBase {
        
        public SetFileRenameInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetIsOpenListContainsDelegate1(bool openListContains);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetIsOpenListContainsInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIsOpenListContains", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS0() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S18\'");
            bool temp0;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp0);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp0);
            this.Manager.Comment("reaching state \'S27\'");
            int temp5 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS0GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS0GetIsOpenListContainsChecker1)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S36\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp1 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1, "return of CreateFile, state S54");
                this.Manager.Comment("reaching state \'S72\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp2;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp2 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp2, "return of SetFileRenameInfo, state S90");
                this.Manager.Comment("reaching state \'S108\'");
                goto label0;
            }
            if ((temp5 == 1)) {
                this.Manager.Comment("reaching state \'S37\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp3 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp3, "return of CreateFile, state S55");
                this.Manager.Comment("reaching state \'S73\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp4;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp4 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp4, "return of SetFileRenameInfo, state S91");
                this.Manager.Comment("reaching state \'S109\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS0GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S27");
        }
        
        private void SetFileRenameInformationTestCaseS0GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S27");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS10() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S23\'");
            bool temp6;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp6);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp6);
            this.Manager.Comment("reaching state \'S32\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS10GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS10GetIsOpenListContainsChecker1)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S46\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp7 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp7, "return of CreateFile, state S64");
                this.Manager.Comment("reaching state \'S82\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp8 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp8, "return of SetFileRenameInfo, state S100");
                this.Manager.Comment("reaching state \'S118\'");
                goto label1;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S47\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp9 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp9, "return of CreateFile, state S65");
                this.Manager.Comment("reaching state \'S83\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp10;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp10 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp10, "return of SetFileRenameInfo, state S101");
                this.Manager.Comment("reaching state \'S119\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS10GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S32");
        }
        
        private void SetFileRenameInformationTestCaseS10GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S32");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS12() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S24\'");
            bool temp12;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp12);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp12);
            this.Manager.Comment("reaching state \'S33\'");
            int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS12GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS12GetIsOpenListContainsChecker1)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S48\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp13 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp13, "return of CreateFile, state S66");
                this.Manager.Comment("reaching state \'S84\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp14;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp14 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp14, "return of SetFileRenameInfo, state S102");
                this.Manager.Comment("reaching state \'S120\'");
                goto label2;
            }
            if ((temp17 == 1)) {
                this.Manager.Comment("reaching state \'S49\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp15, "return of CreateFile, state S67");
                this.Manager.Comment("reaching state \'S85\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp16;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp16 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp16, "return of SetFileRenameInfo, state S103");
                this.Manager.Comment("reaching state \'S121\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS12GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S33");
        }
        
        private void SetFileRenameInformationTestCaseS12GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S33");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS14() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S25\'");
            bool temp18;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp18);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp18);
            this.Manager.Comment("reaching state \'S34\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS14GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS14GetIsOpenListContainsChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S50\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp19;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp19 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp19, "return of CreateFile, state S68");
                this.Manager.Comment("reaching state \'S86\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp20 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp20, "return of SetFileRenameInfo, state S104");
                this.Manager.Comment("reaching state \'S122\'");
                goto label3;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S51\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp21, "return of CreateFile, state S69");
                this.Manager.Comment("reaching state \'S87\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp22;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp22 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S105\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp22, "return of SetFileRenameInfo, state S105");
                this.Manager.Comment("reaching state \'S123\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS14GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S34");
        }
        
        private void SetFileRenameInformationTestCaseS14GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S34");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS16() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S26\'");
            bool temp24;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp24);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp24);
            this.Manager.Comment("reaching state \'S35\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS16GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS16GetIsOpenListContainsChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S52\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp25;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp25 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp25, "return of CreateFile, state S70");
                this.Manager.Comment("reaching state \'S88\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp26 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S106\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp26, "return of SetFileRenameInfo, state S106");
                this.Manager.Comment("reaching state \'S124\'");
                goto label4;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S53\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp27 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S71\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp27, "return of CreateFile, state S71");
                this.Manager.Comment("reaching state \'S89\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp28;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(Greater,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp28 = this.IFSAAdapterInstance.SetFileRenameInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength.Greater, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3025");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is greater than InputBufferLength minus the byte offset into the FILE_RENAME_INFORMATION InputBuffer 
                    of the InputBuffer.FileName field (that is, the total length of InputBuffer as given in InputBufferLength 
is insufficient to contain the fixed-size fields of InputBuffer plus the length of InputBuffer.FileName).");
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/MEDIA_WRITE_PROTECTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.MEDIA_WRITE_PROTECTED, temp28, "return of SetFileRenameInfo, state S107");
                this.Manager.Comment("reaching state \'S125\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS16GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S35");
        }
        
        private void SetFileRenameInformationTestCaseS16GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S35");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS2() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S19\'");
            bool temp30;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp30);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp30);
            this.Manager.Comment("reaching state \'S28\'");
            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS2GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS2GetIsOpenListContainsChecker1)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp31;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp31 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp31, "return of CreateFile, state S56");
                this.Manager.Comment("reaching state \'S74\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp32;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp32 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp32, "return of SetFileRenameInfo, state S92");
                this.Manager.Comment("reaching state \'S110\'");
                goto label5;
            }
            if ((temp35 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp33 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp33, "return of CreateFile, state S57");
                this.Manager.Comment("reaching state \'S75\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp34;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp34 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp34, "return of SetFileRenameInfo, state S93");
                this.Manager.Comment("reaching state \'S111\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS2GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S28");
        }
        
        private void SetFileRenameInformationTestCaseS2GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S28");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS4() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S20\'");
            bool temp36;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp36);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp36);
            this.Manager.Comment("reaching state \'S29\'");
            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS4GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS4GetIsOpenListContainsChecker1)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S40\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp37;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp37 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp37, "return of CreateFile, state S58");
                this.Manager.Comment("reaching state \'S76\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp38;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp38 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp38, "return of SetFileRenameInfo, state S94");
                this.Manager.Comment("reaching state \'S112\'");
                goto label6;
            }
            if ((temp41 == 1)) {
                this.Manager.Comment("reaching state \'S41\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp39;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp39 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp39, "return of CreateFile, state S59");
                this.Manager.Comment("reaching state \'S77\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp40;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,StartWithBackSlash,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp40 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S95\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp40, "return of SetFileRenameInfo, state S95");
                this.Manager.Comment("reaching state \'S113\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS4GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S29");
        }
        
        private void SetFileRenameInformationTestCaseS4GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S29");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS6() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S21\'");
            bool temp42;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp42);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp42);
            this.Manager.Comment("reaching state \'S30\'");
            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS6GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS6GetIsOpenListContainsChecker1)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S42\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp43 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp43, "return of CreateFile, state S60");
                this.Manager.Comment("reaching state \'S78\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp44;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp44 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S96\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp44, "return of SetFileRenameInfo, state S96");
                this.Manager.Comment("reaching state \'S114\'");
                goto label7;
            }
            if ((temp47 == 1)) {
                this.Manager.Comment("reaching state \'S43\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp45;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp45 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp45, "return of CreateFile, state S61");
                this.Manager.Comment("reaching state \'S79\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp46;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(OddNumber,NotValid,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp46 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.NotValid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3024");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is an odd number.");
                this.Manager.Comment("reaching state \'S97\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp46, "return of SetFileRenameInfo, state S97");
                this.Manager.Comment("reaching state \'S115\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS6GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S30");
        }
        
        private void SetFileRenameInformationTestCaseS6GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S30");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileRenameInformationTestCaseS8() {
            this.Manager.BeginTest("SetFileRenameInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S22\'");
            bool temp48;
            this.Manager.Comment("executing step \'call GetIsOpenListContains(out _)\'");
            this.IFSAAdapterInstance.GetIsOpenListContains(out temp48);
            this.Manager.AddReturn(GetIsOpenListContainsInfo, null, temp48);
            this.Manager.Comment("reaching state \'S31\'");
            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS8GetIsOpenListContainsChecker)), new ExpectedReturn(SetFileRenameInformationTestCase.GetIsOpenListContainsInfo, null, new GetIsOpenListContainsDelegate1(this.SetFileRenameInformationTestCaseS8GetIsOpenListContainsChecker1)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S44\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp49;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp49 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S62\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp49, "return of CreateFile, state S62");
                this.Manager.Comment("reaching state \'S80\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp50 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp50, "return of SetFileRenameInfo, state S98");
                this.Manager.Comment("reaching state \'S116\'");
                goto label8;
            }
            if ((temp53 == 1)) {
                this.Manager.Comment("reaching state \'S45\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
                this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,DELETE,FILE_SHARE_" +
                        "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
                temp51 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
                this.Manager.Checkpoint("MS-FSA_R405");
                this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
                this.Manager.Checkpoint("MS-FSA_R475");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return:CreateAction set to FILE_CREATED.");
                this.Manager.Checkpoint("MS-FSA_R474");
                this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                        "        The object store MUST return :Status set to STATUS_SUCCESS.");
                this.Manager.Comment("reaching state \'S63\'");
                this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp51, "return of CreateFile, state S63");
                this.Manager.Comment("reaching state \'S81\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp52;
                this.Manager.Comment(@"executing step 'call SetFileRenameInfo(EqualTo_Zero,StartWithColon,DestDirVolumeEqualToOpenFileVolume,DestDirIsSameAsOpenLinkParentFile,NewLinkNameIsCaseSensitive,NewLinkNameMatchTargetLinkShortName,ReplaceIfExists,TargetLinkIsDeleted,HasNoOplockBreak,TargetLinkFileOpenListContainMatchedOpen)'");
                temp52 = this.IFSAAdapterInstance.SetFileRenameInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileNameLength)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DirectoryVolumeType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.DestinationDirectoryType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameFormatType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.NewLinkNameMatchType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkDeleteType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OplockBreakStatusType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.TargetLinkFileOpenListType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3023");
                this.Manager.Checkpoint(@"[In FileRenameInformation,Pseudocode for the operation is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    If InputBuffer.FileNameLength is equal to zero.");
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return SetFileRenameInfo/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp52, "return of SetFileRenameInfo, state S99");
                this.Manager.Comment("reaching state \'S117\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void SetFileRenameInformationTestCaseS8GetIsOpenListContainsChecker(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, openListContains, "openListContains of GetIsOpenListContains, state S31");
        }
        
        private void SetFileRenameInformationTestCaseS8GetIsOpenListContainsChecker1(bool openListContains) {
            this.Manager.Comment("checking step \'return GetIsOpenListContains/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, openListContains, "openListContains of GetIsOpenListContains, state S31");
        }
        #endregion
    }
}
