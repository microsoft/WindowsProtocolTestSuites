// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReadFileTestCase : PtfTestClassBase {
        
        public ReadFileTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.ReadFile)]
        public void ReadFileTestCaseS0() {
            this.Manager.BeginTest("ReadFileTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR507Implemented(out temp0);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp0, "isFlagValue of CheckIsR507Implemented, state S9");
            this.Manager.Comment("reaching state \'S12\'");
            bool temp1;
            this.Manager.Comment("executing step \'call CheckIsR405Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR405Implemented(out temp1);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return CheckIsR405Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp1, "isFlagValue of CheckIsR405Implemented, state S15");
            this.Manager.Comment("reaching state \'S18\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp2;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp2);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp2, "securityContext of GetSystemConfig, state S21");
            this.Manager.Comment("reaching state \'S24\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED,FI" +
                    "LE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp3 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp3, "return of CreateFile, state S27");
            this.Manager.Comment("reaching state \'S30\'");
            long temp4;
            this.Manager.Comment("executing step \'call GetFileVolumSize(out _)\'");
            this.IFSAAdapterInstance.GetFileVolumSize(out temp4);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return GetFileVolumSize/[out 4096]\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 4096, temp4, "openFileVolumeSize of GetFileVolumSize, state S33");
            this.Manager.Comment("reaching state \'S36\'");
            long temp5;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp6;
            this.Manager.Comment("executing step \'call ReadFile(-1,0,out _)\'");
            temp6 = this.IFSAAdapterInstance.ReadFile(-1, 0, out temp5);
            this.Manager.Checkpoint("MS-FSA_R671");
            this.Manager.Checkpoint("[In Server Requests a Read]If ByteOffset is negative, \r\n                    then " +
                    "the operation MUST be failed with STATUS_INVALID_PARAMETER.");
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return ReadFile/[out 0]:INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 0, temp5, "byteRead of ReadFile, state S39");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp6, "return of ReadFile, state S39");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.ReadFile)]
        public void ReadFileTestCaseS2() {
            this.Manager.BeginTest("ReadFileTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S7\'");
            bool temp7;
            this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR507Implemented(out temp7);
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp7, "isFlagValue of CheckIsR507Implemented, state S10");
            this.Manager.Comment("reaching state \'S13\'");
            bool temp8;
            this.Manager.Comment("executing step \'call CheckIsR405Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR405Implemented(out temp8);
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("checking step \'return CheckIsR405Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp8, "isFlagValue of CheckIsR405Implemented, state S16");
            this.Manager.Comment("reaching state \'S19\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp9;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp9);
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp9, "securityContext of GetSystemConfig, state S22");
            this.Manager.Comment("reaching state \'S25\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp10;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED,FI" +
                    "LE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp10 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp10, "return of CreateFile, state S28");
            this.Manager.Comment("reaching state \'S31\'");
            long temp11;
            this.Manager.Comment("executing step \'call GetFileVolumSize(out _)\'");
            this.IFSAAdapterInstance.GetFileVolumSize(out temp11);
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("checking step \'return GetFileVolumSize/[out 4096]\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 4096, temp11, "openFileVolumeSize of GetFileVolumSize, state S34");
            this.Manager.Comment("reaching state \'S37\'");
            long temp12;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
            this.Manager.Comment("executing step \'call ReadFile(0,0,out _)\'");
            temp13 = this.IFSAAdapterInstance.ReadFile(0, 0, out temp12);
            this.Manager.Checkpoint("MS-FSA_R674");
            this.Manager.Checkpoint("[In Server Requests a Read]If ByteCount is zero, the object store MUST return:Byt" +
                    "esRead set to zero.");
            this.Manager.Checkpoint("MS-FSA_R675");
            this.Manager.Checkpoint("[In Server Requests a Read,If ByteCount is zero,]the object store MUST return:Sta" +
                    "tus set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("checking step \'return ReadFile/[out 0]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 0, temp12, "byteRead of ReadFile, state S40");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp13, "return of ReadFile, state S40");
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.ReadFile)]
        public void ReadFileTestCaseS4() {
            this.Manager.BeginTest("ReadFileTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp14;
            this.Manager.Comment("executing step \'call CheckIsR507Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR507Implemented(out temp14);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return CheckIsR507Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp14, "isFlagValue of CheckIsR507Implemented, state S11");
            this.Manager.Comment("reaching state \'S14\'");
            bool temp15;
            this.Manager.Comment("executing step \'call CheckIsR405Implemented(out _)\'");
            this.IFSAAdapterInstance.CheckIsR405Implemented(out temp15);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return CheckIsR405Implemented/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, temp15, "isFlagValue of CheckIsR405Implemented, state S17");
            this.Manager.Comment("reaching state \'S20\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp16;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp16);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp16, "securityContext of GetSystemConfig, state S23");
            this.Manager.Comment("reaching state \'S26\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,MAXIMUM_ALLOWED,FI" +
                    "LE_SHARE_WRITE,CREATE,StreamIsFound,IsNotSymbolicLink,DataFile,Normal)\'");
            temp17 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.MAXIMUM_ALLOWED, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.CREATE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.Normal);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp17, "return of CreateFile, state S29");
            this.Manager.Comment("reaching state \'S32\'");
            long temp18;
            this.Manager.Comment("executing step \'call GetFileVolumSize(out _)\'");
            this.IFSAAdapterInstance.GetFileVolumSize(out temp18);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return GetFileVolumSize/[out 4096]\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 4096, temp18, "openFileVolumeSize of GetFileVolumSize, state S35");
            this.Manager.Comment("reaching state \'S38\'");
            long temp19;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
            this.Manager.Comment("executing step \'call ReadFile(9223372036854775806,1,out _)\'");
            temp20 = this.IFSAAdapterInstance.ReadFile(9223372036854775806, 1, out temp19);
            this.Manager.Checkpoint("MS-FSA_R668");
            this.Manager.Checkpoint(@"[In Server Requests a Read]If Open.Mode.FILE_NO_INTERMEDIATE_BUFFERING is TRUE 
                        & (ByteOffset >= 0), the operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                       (ByteOffset % Open.File.Volume.SectorSize) is not zero.");
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return ReadFile/[out 0]:INVALID_PARAMETER\'");
            TestManagerHelpers.AssertAreEqual<long>(this.Manager, 0, temp19, "byteRead of ReadFile, state S41");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp20, "return of ReadFile, state S41");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
