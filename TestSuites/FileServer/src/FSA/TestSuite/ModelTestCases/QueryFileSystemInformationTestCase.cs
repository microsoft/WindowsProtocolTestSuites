// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryFileSystemInformationTestCase : PtfTestClassBase {
        
        public QueryFileSystemInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetIfImplementQueryFileFsObjectIdInformationDelegate1(bool isImplemented);
        
        public delegate void GetIfImplementQueryFileFsControlInformationDelegate1(bool isImplemented);
        
        public delegate void GetIFObjectIDsSupportedDelegate1(bool isObjectIDsSupported);
        
        public delegate void GetIFQuotasSupportedDelegate1(bool isQuotasSupported);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetIfImplementQueryFileFsObjectIdInformationInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfImplementQueryFileFsObjectIdInformation", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIFObjectIDsSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIFObjectIDsSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIfImplementQueryFileFsControlInformationInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfImplementQueryFileFsControlInformation", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase GetIFQuotasSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIFQuotasSupported", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS0() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S48\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp0;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp0 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp0, "return of CreateFile, state S72");
            this.Manager.Comment("reaching state \'S96\'");
            bool temp1;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileFsObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileFsObjectIdInformation(out temp1);
            this.Manager.AddReturn(GetIfImplementQueryFileFsObjectIdInformationInfo, null, temp1);
            this.Manager.Comment("reaching state \'S120\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsObjectIdInformationInfo, null, new GetIfImplementQueryFileFsObjectIdInformationDelegate1(this.QueryFileSystemInformationTestCaseS0GetIfImplementQueryFileFsObjectIdInformationChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsObjectIdInformationInfo, null, new GetIfImplementQueryFileFsObjectIdInformationDelegate1(this.QueryFileSystemInformationTestCaseS0GetIfImplementQueryFileFsObjectIdInformationChecker1)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S144\'");
                bool temp2;
                this.Manager.Comment("executing step \'call GetIFObjectIDsSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFObjectIDsSupported(out temp2);
                this.Manager.AddReturn(GetIFObjectIDsSupportedInfo, null, temp2);
                this.Manager.Comment("reaching state \'S153\'");
                int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker1)));
                if ((temp7 == 0)) {
                    this.Manager.Comment("reaching state \'S161\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp3;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp4;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,LessThan,out" +
                            " _)\'");
                    temp4 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp3);
                    this.Manager.Checkpoint("MS-FSA_R2755");
                    this.Manager.Checkpoint(@"[In FileFsObjectIdInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is less than sizeof( FILE_FS_OBJECTID_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S177\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp3, "byteCount of QueryFileSystemInfo, state S177");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp4, "return of QueryFileSystemInfo, state S177");
                    QueryFileSystemInformationTestCaseS193();
                    goto label0;
                }
                if ((temp7 == 1)) {
                    this.Manager.Comment("reaching state \'S162\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp5;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp6;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,LessThan,out" +
                            " _)\'");
                    temp6 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp5);
                    this.Manager.Checkpoint("MS-FSA_R2755");
                    this.Manager.Checkpoint(@"[In FileFsObjectIdInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is less than sizeof( FILE_FS_OBJECTID_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S178\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp5, "byteCount of QueryFileSystemInfo, state S178");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp6, "return of QueryFileSystemInfo, state S178");
                    QueryFileSystemInformationTestCaseS194();
                    goto label0;
                }
                throw new InvalidOperationException("never reached");
            label0:
;
                goto label2;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S145\'");
                bool temp8;
                this.Manager.Comment("executing step \'call GetIFObjectIDsSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFObjectIDsSupported(out temp8);
                this.Manager.AddReturn(GetIFObjectIDsSupportedInfo, null, temp8);
                this.Manager.Comment("reaching state \'S154\'");
                int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker2)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker3)));
                if ((temp13 == 0)) {
                    this.Manager.Comment("reaching state \'S163\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp9;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp10;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,LessThan,out" +
                            " _)\'");
                    temp10 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp9);
                    this.Manager.Checkpoint("MS-FSA_R2755");
                    this.Manager.Checkpoint(@"[In FileFsObjectIdInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is less than sizeof( FILE_FS_OBJECTID_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S179\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp9, "byteCount of QueryFileSystemInfo, state S179");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp10, "return of QueryFileSystemInfo, state S179");
                    QueryFileSystemInformationTestCaseS150();
                    goto label1;
                }
                if ((temp13 == 1)) {
                    this.Manager.Comment("reaching state \'S164\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp11;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp12;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,LessThan,out" +
                            " _)\'");
                    temp12 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp11);
                    this.Manager.Checkpoint("MS-FSA_R2755");
                    this.Manager.Checkpoint(@"[In FileFsObjectIdInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is less than sizeof( FILE_FS_OBJECTID_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S180\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp11, "byteCount of QueryFileSystemInfo, state S180");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp12, "return of QueryFileSystemInfo, state S180");
                    QueryFileSystemInformationTestCaseS195();
                    goto label1;
                }
                throw new InvalidOperationException("never reached");
            label1:
;
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIfImplementQueryFileFsObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileFsObjectIdInformation, state S120");
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S153");
        }
        
        private void QueryFileSystemInformationTestCaseS193() {
            this.Manager.Comment("reaching state \'S193\'");
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker1(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S153");
        }
        
        private void QueryFileSystemInformationTestCaseS194() {
            this.Manager.Comment("reaching state \'S194\'");
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIfImplementQueryFileFsObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileFsObjectIdInformation, state S120");
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker2(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S154");
        }
        
        private void QueryFileSystemInformationTestCaseS150() {
            this.Manager.Comment("reaching state \'S150\'");
        }
        
        private void QueryFileSystemInformationTestCaseS0GetIFObjectIDsSupportedChecker3(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S154");
        }
        
        private void QueryFileSystemInformationTestCaseS195() {
            this.Manager.Comment("reaching state \'S195\'");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS10() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S53\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp15, "return of CreateFile, state S77");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp16;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsDevice_Information,LessThan,out _" +
                    ")\'");
            temp17 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsDevice_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp16);
            this.Manager.Checkpoint("[2.1.5.12.4 FileFsDeviceInformation] Pseudocode for the operation is as follows: " +
                    "\r\n                                If OutputBufferSize is smaller than sizeof(FIL" +
                    "E_FS_DEVICE_INFORMATION), the operation MUST be failed with STATUS_INFO_LENGTH_M" +
                    "ISMATCH.");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp16, "byteCount of QueryFileSystemInfo, state S125");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp17, "return of QueryFileSystemInfo, state S125");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS12() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S54\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp18;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp18 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp18, "return of CreateFile, state S78");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp19;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsLabelInformation,LessThan,out _)\'" +
                    "");
            temp20 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsLabelInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp19);
            this.Manager.Checkpoint("MS-FSA_R2751");
            this.Manager.Checkpoint("[MS-FSCC] section 2.5, FileFsLabelInformation is intended for local use only. Que" +
                    "ry request does not match the usage, STATUS_INVALID_INFO_CLASS is returned.");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp19, "byteCount of QueryFileSystemInfo, state S126");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp20, "return of QueryFileSystemInfo, state S126");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS14() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S55\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp21, "return of CreateFile, state S79");
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp22;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(Zero,LessThan,out _)\'");
            temp23 = this.IFSAAdapterInstance.QueryFileSystemInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp22);
            this.Manager.Checkpoint("[MS-FSCC 2.5 File System Information Classes] If an Information Class is specifie" +
                    "d that does not match the usage in the above table, STATUS_INVALID_INFO_CLASS MU" +
                    "ST be returned.");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp22, "byteCount of QueryFileSystemInfo, state S127");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp23, "return of QueryFileSystemInfo, state S127");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS16() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S56\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp24;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp24 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp24, "return of CreateFile, state S80");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp25;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(Zero,NotLessThan,out _)\'");
            temp26 = this.IFSAAdapterInstance.QueryFileSystemInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp25);
            this.Manager.Checkpoint("[MS-FSCC 2.5 File System Information Classes] If an Information Class is specifie" +
                    "d that does not match the usage in the above table, STATUS_INVALID_INFO_CLASS MU" +
                    "ST be returned.");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp25, "byteCount of QueryFileSystemInfo, state S128");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp26, "return of QueryFileSystemInfo, state S128");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS18() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S57\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp27 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp27, "return of CreateFile, state S81");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp28;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp29;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsDevice_Information,NotLessThan,ou" +
                    "t _)\'");
            temp29 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsDevice_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp28);
            this.Manager.Checkpoint("MS-FSA_R2753");
            this.Manager.Checkpoint("[In FileFsDeviceInformation,Pseudocode for the operation is as follows:]\r\n       " +
                    "                     Upon successful completion of the operation, the object sto" +
                    "re MUST return:ByteCount set to sizeof( FILE_FS_DEVICE_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R2680");
            this.Manager.Checkpoint("[In FileFsDeviceInformation,Pseudocode for the operation is as follows:]\r\n       " +
                    "                     Upon successful completion of the operation, the object sto" +
                    "re MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_DEVICE_INFORMATION]" +
                    ":SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_DEVICE_INFORMATION, temp28, "byteCount of QueryFileSystemInfo, state S129");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp29, "return of QueryFileSystemInfo, state S129");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS2() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S49\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp30;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp30 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp30, "return of CreateFile, state S73");
            this.Manager.Comment("reaching state \'S97\'");
            bool temp31;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileFsControlInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileFsControlInformation(out temp31);
            this.Manager.AddReturn(GetIfImplementQueryFileFsControlInformationInfo, null, temp31);
            this.Manager.Comment("reaching state \'S121\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsControlInformationInfo, null, new GetIfImplementQueryFileFsControlInformationDelegate1(this.QueryFileSystemInformationTestCaseS2GetIfImplementQueryFileFsControlInformationChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsControlInformationInfo, null, new GetIfImplementQueryFileFsControlInformationDelegate1(this.QueryFileSystemInformationTestCaseS2GetIfImplementQueryFileFsControlInformationChecker1)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S146\'");
                bool temp32;
                this.Manager.Comment("executing step \'call GetIFQuotasSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFQuotasSupported(out temp32);
                this.Manager.AddReturn(GetIFQuotasSupportedInfo, null, temp32);
                this.Manager.Comment("reaching state \'S155\'");
                int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker1)));
                if ((temp37 == 0)) {
                    this.Manager.Comment("reaching state \'S165\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp33;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp34;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,NotLessThan,ou" +
                            "t _)\'");
                    temp34 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp33);
                    this.Manager.Checkpoint("MS-FSA_R7802");
                    this.Manager.Checkpoint("[In FileFsControlInformation,Pseudocode for the operation is as follows:] \r\n     " +
                            "                           If the object store does not implement this functiona" +
                            "lity, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp33, "byteCount of QueryFileSystemInfo, state S181");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp34, "return of QueryFileSystemInfo, state S181");
                    QueryFileSystemInformationTestCaseS196();
                    goto label3;
                }
                if ((temp37 == 1)) {
                    this.Manager.Comment("reaching state \'S166\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp35;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp36;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,NotLessThan,ou" +
                            "t _)\'");
                    temp36 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp35);
                    this.Manager.Checkpoint("MS-FSA_R7802");
                    this.Manager.Checkpoint("[In FileFsControlInformation,Pseudocode for the operation is as follows:] \r\n     " +
                            "                           If the object store does not implement this functiona" +
                            "lity, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp35, "byteCount of QueryFileSystemInfo, state S182");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp36, "return of QueryFileSystemInfo, state S182");
                    QueryFileSystemInformationTestCaseS150();
                    goto label3;
                }
                throw new InvalidOperationException("never reached");
            label3:
;
                goto label5;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S147\'");
                bool temp38;
                this.Manager.Comment("executing step \'call GetIFQuotasSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFQuotasSupported(out temp38);
                this.Manager.AddReturn(GetIFQuotasSupportedInfo, null, temp38);
                this.Manager.Comment("reaching state \'S156\'");
                int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker2)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker3)));
                if ((temp43 == 0)) {
                    this.Manager.Comment("reaching state \'S167\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp39;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp40;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,NotLessThan,ou" +
                            "t _)\'");
                    temp40 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp39);
                    this.Manager.Checkpoint("MS-FSA_R7803");
                    this.Manager.Checkpoint("[In FileFsControlInformation,Pseudocode for the operation is as follows:] \r\n     " +
                            "                           If Open.File.Volume.IsQuotasSupported is FALSE, the o" +
                            "peration MUST be failed with STATUS_VOLUME_NOT_UPGRADED");
                    this.Manager.Comment("reaching state \'S183\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp39, "byteCount of QueryFileSystemInfo, state S183");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp40, "return of QueryFileSystemInfo, state S183");
                    QueryFileSystemInformationTestCaseS197();
                    goto label4;
                }
                if ((temp43 == 1)) {
                    this.Manager.Comment("reaching state \'S168\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp41;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp42;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,NotLessThan,ou" +
                            "t _)\'");
                    temp42 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp41);
                    this.Manager.Checkpoint("MS-FSA_R2715");
                    this.Manager.Checkpoint("[In FileFsControlInformation,Pseudocode for the operation is as follows:] \r\n     " +
                            "                       Upon successful completion of the operation, the object s" +
                            "tore MUST return:ByteCount set to sizeof(FILE_FS_CONTROL_INFORMATION).");
                    this.Manager.Checkpoint("MS-FSA_R2716");
                    this.Manager.Checkpoint("[In FileFsControlInformation,Pseudocode for the operation is as follows:]\r\n      " +
                            "                      Upon successful completion of the operation, the object st" +
                            "ore MUST return:Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S184\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_CONTROL_INFORMATION" +
                            "]:SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_CONTROL_INFORMATION, temp41, "byteCount of QueryFileSystemInfo, state S184");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp42, "return of QueryFileSystemInfo, state S184");
                    QueryFileSystemInformationTestCaseS198();
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIfImplementQueryFileFsControlInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsControlInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileFsControlInformation, state S121");
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S155");
        }
        
        private void QueryFileSystemInformationTestCaseS196() {
            this.Manager.Comment("reaching state \'S196\'");
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker1(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S155");
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIfImplementQueryFileFsControlInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsControlInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileFsControlInformation, state S121");
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker2(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S156");
        }
        
        private void QueryFileSystemInformationTestCaseS197() {
            this.Manager.Comment("reaching state \'S197\'");
        }
        
        private void QueryFileSystemInformationTestCaseS2GetIFQuotasSupportedChecker3(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S156");
        }
        
        private void QueryFileSystemInformationTestCaseS198() {
            this.Manager.Comment("reaching state \'S198\'");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS20() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp45;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp45 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp45, "return of CreateFile, state S82");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp46;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp47;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsLabelInformation,NotLessThan,out " +
                    "_)\'");
            temp47 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsLabelInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp46);
            this.Manager.Checkpoint("MS-FSA_R2751");
            this.Manager.Checkpoint("[MS-FSCC] section 2.5, FileFsLabelInformation is intended for local use only. Que" +
                    "ry request does not match the usage, STATUS_INVALID_INFO_CLASS is returned.");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp46, "byteCount of QueryFileSystemInfo, state S130");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp47, "return of QueryFileSystemInfo, state S130");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS22() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S59\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp48;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp48 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp48, "return of CreateFile, state S83");
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp49;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsVolumeInformation,NotLessThan,out" +
                    " _)\'");
            temp50 = this.IFSAAdapterInstance.QueryFileSystemInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp49);
            this.Manager.Checkpoint(@"[2.1.5.12.1 FileFsVolumeInformation, Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return: ByteCount set to FieldOffset(FILE_FS_VOLUME_INFORMATION.VolumeLabel) + BytesToCopy.");
            this.Manager.Checkpoint(@"[2.1.5.12.1 FileFsVolumeInformation, Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return: Status set to STATUS_BUFFER_OVERFLOW if BytesToCopy < OutputBuffer.VolumeLabelLength else STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out FieldOffset_FILE_FS_VOLUME_INFORMA" +
                    "TION_VolumeLabel_Add_BytesToCopy]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(1)), temp49, "byteCount of QueryFileSystemInfo, state S131");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp50, "return of QueryFileSystemInfo, state S131");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS24() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S60\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp51 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp51, "return of CreateFile, state S84");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp52;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp53;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsSizeInformation,NotLessThan,out _" +
                    ")\'");
            temp53 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsSizeInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp52);
            this.Manager.Checkpoint("MS-FSA_R2672");
            this.Manager.Checkpoint("[In FileFsSizeInformation, Pseudocode for the operation is as follows:]\r\n        " +
                    "                    Upon successful completion of the operation, the object stor" +
                    "e MUST return:ByteCount MUST be set to sizeof(FILE_FS_SIZE_INFORMATION).");
            this.Manager.Checkpoint("MS-FSA_R2673");
            this.Manager.Checkpoint("[In FileFsSizeInformation, Pseudocode for the operation is as follows:]\r\n        " +
                    "                    Upon successful completion of the operation, the object stor" +
                    "e MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_SIZE_INFORMATION]:S" +
                    "UCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_SIZE_INFORMATION, temp52, "byteCount of QueryFileSystemInfo, state S132");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp53, "return of QueryFileSystemInfo, state S132");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS26() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S61\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp54;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp54 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp54, "return of CreateFile, state S85");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp55;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp56;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsSectorSizeInformation,NotLessThan" +
                    ",out _)\'");
            temp56 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsSectorSizeInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp55);
            this.Manager.Checkpoint(@"[2.1.5.12.10 FileFsSectorSizeInformation], Pseudocode for the operation is as follows:
                            Upon successful completion of the operation, the object store MUST return: ByteCount set to the size of the FILE_FS_SECTOR_SIZE_INFORMATION structure.");
            this.Manager.Checkpoint("[2.1.5.12.10 FileFsSectorSizeInformation], Pseudocode for the operation is as fol" +
                    "lows:\r\n                            Upon successful completion of the operation, " +
                    "the object store MUST return: Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_SECTOR_SIZE_INFORMA" +
                    "TION]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_SECTOR_SIZE_INFORMATION, temp55, "byteCount of QueryFileSystemInfo, state S133");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp56, "return of QueryFileSystemInfo, state S133");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS28() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S62\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp57;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp57 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp57, "return of CreateFile, state S86");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp58;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp59;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsAttribute_Information,NotLessThan" +
                    ",out _)\'");
            temp59 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsAttribute_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp58);
            this.Manager.Checkpoint(@"[2.1.5.12.5 FileFsAttributeInformation], Pseudocode for the operation is as follows:
                            Upon successful completion of the operation, the object store MUST return: ByteCount set to FieldOffset(FILE_FS_ATTRIBUTE_INFORMATION.FileSystemName) + BytesToCopy.");
            this.Manager.Checkpoint(@"[2.1.5.12.5 FileFsAttributeInformation], Pseudocode for the operation is as follows:
                            Upon successful completion of the operation, the object store MUST return: Status set to STATUS_BUFFER_OVERFLOW if BytesToCopy < OutputBuffer.FileSystemNameLength else STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out FieldOffset_FILE_FS_ATTRIBUTE_INFO" +
                    "RMATION_FileSystemName_Add_BytesToCopy]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.FieldOffset_FILE_FS_ATTRIBUTE_INFORMATION_FileSystemName_Add_BytesToCopy, temp58, "byteCount of QueryFileSystemInfo, state S134");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp59, "return of QueryFileSystemInfo, state S134");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS30() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S63\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp60;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp60 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp60, "return of CreateFile, state S87");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp61;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp62;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsDriverPath_Information,NotLessTha" +
                    "n,out _)\'");
            temp62 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsDriverPath_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp61);
            this.Manager.Checkpoint("MS-FSA_R2764");
            this.Manager.Checkpoint("[In FileFsDriverPathInformation]This operation MUST be failed with STATUS_NOT_SUP" +
                    "PORTED.");
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:NOT_SUPPORTED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp61, "byteCount of QueryFileSystemInfo, state S135");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp62, "return of QueryFileSystemInfo, state S135");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS32() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S64\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp63 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp63, "return of CreateFile, state S88");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp64;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp65;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsFullSize_Information,NotLessThan," +
                    "out _)\'");
            temp65 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsFullSize_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp64);
            this.Manager.Checkpoint("MS-FSA_R2729");
            this.Manager.Checkpoint("[In FileFsFullSizeInformation,Pseudocode for the operation is as follows:]\r\n     " +
                    "                       Upon successful completion of the operation, the object s" +
                    "tore MUST return:ByteCount set to sizeof( FILE_FS_FULL_SIZE_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R2730");
            this.Manager.Checkpoint("[In FileFsFullSizeInformation,Pseudocode for the operation is as follows:]\r\n     " +
                    "                       Upon successful completion of the operation, the object s" +
                    "tore MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_FULL_SIZE_INFORMATI" +
                    "ON]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_FULL_SIZE_INFORMATION, temp64, "byteCount of QueryFileSystemInfo, state S136");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp65, "return of QueryFileSystemInfo, state S136");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS34() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S65\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp66;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp66 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp66, "return of CreateFile, state S89");
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp67;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp68;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsVolumeInformation,LessThan,out _)" +
                    "\'");
            temp68 = this.IFSAAdapterInstance.QueryFileSystemInfo(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp67);
            this.Manager.Checkpoint("MS-FSA_R2638");
            this.Manager.Checkpoint(@"[In FileFsVolumeInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than BlockAlign( FieldOffset( FILE_FS_VOLUME_INFORMATION.VolumeLabel ), 8 ), the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp67, "byteCount of QueryFileSystemInfo, state S137");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp68, "return of QueryFileSystemInfo, state S137");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS36() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S66\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp69;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp69 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp69, "return of CreateFile, state S90");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp70;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp71;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsSizeInformation,LessThan,out _)\'");
            temp71 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsSizeInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp70);
            this.Manager.Checkpoint("[2.1.5.12.3 FileFsSizeInformation] Pseudocode for the operation is as follows:\r\n " +
                    "                               If OutputBufferSize is smaller than sizeof(FILE_F" +
                    "S_SIZE_INFORMATION), the operation MUST be failed with STATUS_INFO_LENGTH_MISMAT" +
                    "CH.");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp70, "byteCount of QueryFileSystemInfo, state S138");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp71, "return of QueryFileSystemInfo, state S138");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS38() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S67\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp72;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp72 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp72, "return of CreateFile, state S91");
            this.Manager.Comment("reaching state \'S115\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp73;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp74;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsDriverPath_Information,LessThan,o" +
                    "ut _)\'");
            temp74 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsDriverPath_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp73);
            this.Manager.Checkpoint("[2.1.5.12.4   FileFsDeviceInformation, Pseudocode for the operation is as follows" +
                    ":]\r\n                                If OutputBufferSize is smaller than sizeof(F" +
                    "ILE_FS_DRIVER_INFORMATION), the operation MUST be failed with STATUS_INFO_LENGTH" +
                    "_MISMATCH.");
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp73, "byteCount of QueryFileSystemInfo, state S139");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp74, "return of QueryFileSystemInfo, state S139");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS4() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S50\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp75;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp75 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp75, "return of CreateFile, state S74");
            this.Manager.Comment("reaching state \'S98\'");
            bool temp76;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileFsObjectIdInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileFsObjectIdInformation(out temp76);
            this.Manager.AddReturn(GetIfImplementQueryFileFsObjectIdInformationInfo, null, temp76);
            this.Manager.Comment("reaching state \'S122\'");
            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsObjectIdInformationInfo, null, new GetIfImplementQueryFileFsObjectIdInformationDelegate1(this.QueryFileSystemInformationTestCaseS4GetIfImplementQueryFileFsObjectIdInformationChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsObjectIdInformationInfo, null, new GetIfImplementQueryFileFsObjectIdInformationDelegate1(this.QueryFileSystemInformationTestCaseS4GetIfImplementQueryFileFsObjectIdInformationChecker1)));
            if ((temp89 == 0)) {
                this.Manager.Comment("reaching state \'S148\'");
                bool temp77;
                this.Manager.Comment("executing step \'call GetIFObjectIDsSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFObjectIDsSupported(out temp77);
                this.Manager.AddReturn(GetIFObjectIDsSupportedInfo, null, temp77);
                this.Manager.Comment("reaching state \'S157\'");
                int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker1)));
                if ((temp82 == 0)) {
                    this.Manager.Comment("reaching state \'S169\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp78;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp79;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,NotLessThan," +
                            "out _)\'");
                    temp79 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp78);
                    this.Manager.Checkpoint("MS-FSA_R4811");
                    this.Manager.Checkpoint("[In FileFsObjectIdInformation,Pseudocode for the operation is as follows:] \r\n    " +
                            "                            If the object store does not implement this function" +
                            "ality, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S185\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp78, "byteCount of QueryFileSystemInfo, state S185");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp79, "return of QueryFileSystemInfo, state S185");
                    QueryFileSystemInformationTestCaseS195();
                    goto label6;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S170\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp80;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp81;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,NotLessThan," +
                            "out _)\'");
                    temp81 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp80);
                    this.Manager.Checkpoint("MS-FSA_R4811");
                    this.Manager.Checkpoint("[In FileFsObjectIdInformation,Pseudocode for the operation is as follows:] \r\n    " +
                            "                            If the object store does not implement this function" +
                            "ality, the operation MUST be failed with STATUS_INVALID_PARAMETER.");
                    this.Manager.Comment("reaching state \'S186\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INVALID_PARAMETER\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp80, "byteCount of QueryFileSystemInfo, state S186");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp81, "return of QueryFileSystemInfo, state S186");
                    QueryFileSystemInformationTestCaseS150();
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label8;
            }
            if ((temp89 == 1)) {
                this.Manager.Comment("reaching state \'S149\'");
                bool temp83;
                this.Manager.Comment("executing step \'call GetIFObjectIDsSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFObjectIDsSupported(out temp83);
                this.Manager.AddReturn(GetIFObjectIDsSupportedInfo, null, temp83);
                this.Manager.Comment("reaching state \'S158\'");
                int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker2)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFObjectIDsSupportedInfo, null, new GetIFObjectIDsSupportedDelegate1(this.QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker3)));
                if ((temp88 == 0)) {
                    this.Manager.Comment("reaching state \'S171\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp84;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp85;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,NotLessThan," +
                            "out _)\'");
                    temp85 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp84);
                    this.Manager.Checkpoint("MS-FSA_R2761");
                    this.Manager.Checkpoint("[In FileFsObjectIdInformation,Pseudocode for the operation is as follows:]\r\n     " +
                            "                       Upon successful completion of the operation, the object s" +
                            "tore MUST return:ByteCount set to sizeof( FILE_FS_OBJECTID_INFORMATION ).");
                    this.Manager.Checkpoint("MS-FSA_R2762");
                    this.Manager.Checkpoint("[In FileFsObjectIdInformation,Pseudocode for the operation is as follows:]\r\n     " +
                            "                       Upon successful completion of the operation, the object s" +
                            "tore MUST return:Status set to STATUS_SUCCESS.");
                    this.Manager.Comment("reaching state \'S187\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out SizeOf_FILE_FS_OBJECTID_INFORMATIO" +
                            "N]:SUCCESS\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount.SizeOf_FILE_FS_OBJECTID_INFORMATION, temp84, "byteCount of QueryFileSystemInfo, state S187");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp85, "return of QueryFileSystemInfo, state S187");
                    QueryFileSystemInformationTestCaseS194();
                    goto label7;
                }
                if ((temp88 == 1)) {
                    this.Manager.Comment("reaching state \'S172\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp86;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp87;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsObjectId_Information,NotLessThan," +
                            "out _)\'");
                    temp87 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsObjectId_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp86);
                    this.Manager.Checkpoint("MS-FSA_R4812");
                    this.Manager.Checkpoint("[In FileFsObjectIdInformation,Pseudocode for the operation is as follows:] \r\n    " +
                            "                            If Open.File.Volume.IsObjectIDsSupported is FALSE, t" +
                            "he operation MUST be failed with STATUS_VOLUME_NOT_UPGRADED.");
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:VOLUME_NOT_UPGRADED\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp86, "byteCount of QueryFileSystemInfo, state S188");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.VOLUME_NOT_UPGRADED, temp87, "return of QueryFileSystemInfo, state S188");
                    QueryFileSystemInformationTestCaseS193();
                    goto label7;
                }
                throw new InvalidOperationException("never reached");
            label7:
;
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIfImplementQueryFileFsObjectIdInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsObjectIdInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileFsObjectIdInformation, state S122");
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S157");
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker1(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S157");
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIfImplementQueryFileFsObjectIdInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsObjectIdInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileFsObjectIdInformation, state S122");
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker2(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S158");
        }
        
        private void QueryFileSystemInformationTestCaseS4GetIFObjectIDsSupportedChecker3(bool isObjectIDsSupported) {
            this.Manager.Comment("checking step \'return GetIFObjectIDsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isObjectIDsSupported, "isObjectIDsSupported of GetIFObjectIDsSupported, state S158");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS40() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S68\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp90;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp90 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp90, "return of CreateFile, state S92");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp91;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp92;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsAttribute_Information,LessThan,ou" +
                    "t _)\'");
            temp92 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsAttribute_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp91);
            this.Manager.Checkpoint("MS-FSA_R2691");
            this.Manager.Checkpoint(@"[In FileFsAttributeInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than BlockAlign( FieldOffset( FILE_FS_ATTRIBUTE_INFORMATION.FileSystemName ), 4 ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp91, "byteCount of QueryFileSystemInfo, state S140");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp92, "return of QueryFileSystemInfo, state S140");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS42() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S69\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp93;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp93 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp93, "return of CreateFile, state S93");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp94;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp95;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsFullSize_Information,LessThan,out" +
                    " _)\'");
            temp95 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsFullSize_Information, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp94);
            this.Manager.Checkpoint("[2.1.5.12.7 FileFsFullSizeInformation] Pseudocode for the operation is as follows" +
                    ":\r\n                                If OutputBufferSize is smaller than sizeof(FI" +
                    "LE_FS_FULL_SIZE_INFORMATION), the operation MUST be failed with STATUS_INFO_LENG" +
                    "TH_MISMATCH.");
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp94, "byteCount of QueryFileSystemInfo, state S141");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp95, "return of QueryFileSystemInfo, state S141");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS44() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp96;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp96 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp96, "return of CreateFile, state S94");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp97;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp98;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsSectorSizeInformation,LessThan,ou" +
                    "t _)\'");
            temp98 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsSectorSizeInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp97);
            this.Manager.Checkpoint(@"[2.1.5.12.10 FileFsSectorSizeInformation], Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof(FILE_FS_SECTOR_SIZE_INFORMATION), the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH");
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp97, "byteCount of QueryFileSystemInfo, state S142");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp98, "return of QueryFileSystemInfo, state S142");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS46() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp99;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp99 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp99, "return of CreateFile, state S95");
            this.Manager.Comment("reaching state \'S119\'");
            bool temp100;
            this.Manager.Comment("executing step \'call GetIfImplementQueryFileFsControlInformation(out _)\'");
            this.IFSAAdapterInstance.GetIfImplementQueryFileFsControlInformation(out temp100);
            this.Manager.AddReturn(GetIfImplementQueryFileFsControlInformationInfo, null, temp100);
            this.Manager.Comment("reaching state \'S143\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsControlInformationInfo, null, new GetIfImplementQueryFileFsControlInformationDelegate1(this.QueryFileSystemInformationTestCaseS46GetIfImplementQueryFileFsControlInformationChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIfImplementQueryFileFsControlInformationInfo, null, new GetIfImplementQueryFileFsControlInformationDelegate1(this.QueryFileSystemInformationTestCaseS46GetIfImplementQueryFileFsControlInformationChecker1)));
            if ((temp113 == 0)) {
                this.Manager.Comment("reaching state \'S151\'");
                bool temp101;
                this.Manager.Comment("executing step \'call GetIFQuotasSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFQuotasSupported(out temp101);
                this.Manager.AddReturn(GetIFQuotasSupportedInfo, null, temp101);
                this.Manager.Comment("reaching state \'S159\'");
                int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker1)));
                if ((temp106 == 0)) {
                    this.Manager.Comment("reaching state \'S173\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp102;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp103;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,LessThan,out _" +
                            ")\'");
                    temp103 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp102);
                    this.Manager.Checkpoint("MS-FSA_R2707");
                    this.Manager.Checkpoint(@"[In FileFsControlInformation] Pseudocode for the operation is as follows: 
                                If OutputBufferSize is smaller than BlockAlign( sizeof( FILE_FS_CONTROL_INFORMATION ), 8 ) the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp102, "byteCount of QueryFileSystemInfo, state S189");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp103, "return of QueryFileSystemInfo, state S189");
                    QueryFileSystemInformationTestCaseS198();
                    goto label9;
                }
                if ((temp106 == 1)) {
                    this.Manager.Comment("reaching state \'S174\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp104;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp105;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,LessThan,out _" +
                            ")\'");
                    temp105 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp104);
                    this.Manager.Checkpoint("MS-FSA_R2707");
                    this.Manager.Checkpoint(@"[In FileFsControlInformation] Pseudocode for the operation is as follows: 
                                If OutputBufferSize is smaller than BlockAlign( sizeof( FILE_FS_CONTROL_INFORMATION ), 8 ) the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S190\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp104, "byteCount of QueryFileSystemInfo, state S190");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp105, "return of QueryFileSystemInfo, state S190");
                    QueryFileSystemInformationTestCaseS197();
                    goto label9;
                }
                throw new InvalidOperationException("never reached");
            label9:
;
                goto label11;
            }
            if ((temp113 == 1)) {
                this.Manager.Comment("reaching state \'S152\'");
                bool temp107;
                this.Manager.Comment("executing step \'call GetIFQuotasSupported(out _)\'");
                this.IFSAAdapterInstance.GetIFQuotasSupported(out temp107);
                this.Manager.AddReturn(GetIFQuotasSupportedInfo, null, temp107);
                this.Manager.Comment("reaching state \'S160\'");
                int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker2)), new ExpectedReturn(QueryFileSystemInformationTestCase.GetIFQuotasSupportedInfo, null, new GetIFQuotasSupportedDelegate1(this.QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker3)));
                if ((temp112 == 0)) {
                    this.Manager.Comment("reaching state \'S175\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp108;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp109;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,LessThan,out _" +
                            ")\'");
                    temp109 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp108);
                    this.Manager.Checkpoint("MS-FSA_R2707");
                    this.Manager.Checkpoint(@"[In FileFsControlInformation] Pseudocode for the operation is as follows: 
                                If OutputBufferSize is smaller than BlockAlign( sizeof( FILE_FS_CONTROL_INFORMATION ), 8 ) the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S191\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp108, "byteCount of QueryFileSystemInfo, state S191");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp109, "return of QueryFileSystemInfo, state S191");
                    QueryFileSystemInformationTestCaseS150();
                    goto label10;
                }
                if ((temp112 == 1)) {
                    this.Manager.Comment("reaching state \'S176\'");
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp110;
                    Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp111;
                    this.Manager.Comment("executing step \'call QueryFileSystemInfo(File_FsControlInformation,LessThan,out _" +
                            ")\'");
                    temp111 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.File_FsControlInformation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp110);
                    this.Manager.Checkpoint("MS-FSA_R2707");
                    this.Manager.Checkpoint(@"[In FileFsControlInformation] Pseudocode for the operation is as follows: 
                                If OutputBufferSize is smaller than BlockAlign( sizeof( FILE_FS_CONTROL_INFORMATION ), 8 ) the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
                    this.Manager.Comment("reaching state \'S192\'");
                    this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp110, "byteCount of QueryFileSystemInfo, state S192");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp111, "return of QueryFileSystemInfo, state S192");
                    QueryFileSystemInformationTestCaseS196();
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIfImplementQueryFileFsControlInformationChecker(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsControlInformation/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isImplemented, "isImplemented of GetIfImplementQueryFileFsControlInformation, state S143");
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S159");
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker1(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S159");
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIfImplementQueryFileFsControlInformationChecker1(bool isImplemented) {
            this.Manager.Comment("checking step \'return GetIfImplementQueryFileFsControlInformation/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isImplemented, "isImplemented of GetIfImplementQueryFileFsControlInformation, state S143");
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker2(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S160");
        }
        
        private void QueryFileSystemInformationTestCaseS46GetIFQuotasSupportedChecker3(bool isQuotasSupported) {
            this.Manager.Comment("checking step \'return GetIFQuotasSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isQuotasSupported, "isQuotasSupported of GetIFQuotasSupported, state S160");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS6() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S51\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp114;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp114 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp114, "return of CreateFile, state S75");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp115;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp116;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(NOT_DEFINED_IN_FSCC,NotLessThan,out _)\'");
            temp116 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.NOT_DEFINED_IN_FSCC, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp115);
            this.Manager.Checkpoint("[MS-SMB2 section 3.3.5.20.2 Handling SMB2_0_INFO_FILESYSTEM] If the store does no" +
                    "t support the data requested, the server MUST fail the request with STATUS_NOT_S" +
                    "UPPORTED.");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:NOT_SUPPORTED\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp115, "byteCount of QueryFileSystemInfo, state S123");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp116, "return of QueryFileSystemInfo, state S123");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileSystemInformation)]
        public void QueryFileSystemInformationTestCaseS8() {
            this.Manager.BeginTest("QueryFileSystemInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S52\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp117;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_READ,FILE_" +
                    "SHARE_READ,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp117 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_READ, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp117, "return of CreateFile, state S76");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount temp118;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp119;
            this.Manager.Comment("executing step \'call QueryFileSystemInfo(NOT_DEFINED_IN_FSCC,LessThan,out _)\'");
            temp119 = this.IFSAAdapterInstance.QueryFileSystemInfo(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileSystemInfoClass.NOT_DEFINED_IN_FSCC, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp118);
            this.Manager.Checkpoint("Negative test with artificial FileSystemInfoClass.NOT_DEFINED_IN_FSCC:\r\n         " +
                    "                       If OutputBufferSize is smaller than sizeof(NOT_DEFINED_IN" +
                    "_FSCC), the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return QueryFileSystemInfo/[out Zero]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FsInfoByteCount)(0)), temp118, "byteCount of QueryFileSystemInfo, state S124");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp119, "return of QueryFileSystemInfo, state S124");
            QueryFileSystemInformationTestCaseS150();
            this.Manager.EndTest();
        }
        #endregion
    }
}
