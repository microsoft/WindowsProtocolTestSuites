// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class QueryFileInformationTestCase : PtfTestClassBase {
        
        public QueryFileInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS0() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp0;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp0);
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp0, "securityContext of GetSystemConfig, state S132");
            this.Manager.Comment("reaching state \'S176\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp1;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp1 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S220\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp1, "return of CreateFile, state S220");
            this.Manager.Comment("reaching state \'S264\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp2;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp3;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp4;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_POSITION_INFORMATION,NotLessThan,out" +
                    " _,out _)\'");
            temp4 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_POSITION_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp2, out temp3);
            this.Manager.Checkpoint("MS-FSA_R1563");
            this.Manager.Checkpoint("[In FilePositionInformation,Pseudocode for the operation is as follows:]\r\n       " +
                    "                     The operation returns STATUS_SUCCESS.<57>");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S308\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp2, "byteCount of QueryFileInfoPart1, state S308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp3, "outputBuffer of QueryFileInfoPart1, state S308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp4, "return of QueryFileInfoPart1, state S308");
            this.Manager.Comment("reaching state \'S352\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS10() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S93\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp5;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp5);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp5, "securityContext of GetSystemConfig, state S137");
            this.Manager.Comment("reaching state \'S181\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp6;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp6 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp6, "return of CreateFile, state S225");
            this.Manager.Comment("reaching state \'S269\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp7;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp8;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp9;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ACCESS_INFORMATION,LessThan,out _,ou" +
                    "t _)\'");
            temp9 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ACCESS_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp7, out temp8);
            this.Manager.Checkpoint("MS-FSA_R1428");
            this.Manager.Checkpoint(@"[In FileAccessInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_ACCESS_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp7, "byteCount of QueryFileInfoPart1, state S313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp8, "outputBuffer of QueryFileInfoPart1, state S313");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp9, "return of QueryFileInfoPart1, state S313");
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS12() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp10;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp10);
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp10, "securityContext of GetSystemConfig, state S138");
            this.Manager.Comment("reaching state \'S182\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp11;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp11 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S226\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp11, "return of CreateFile, state S226");
            this.Manager.Comment("reaching state \'S270\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp12;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp13;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp14;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_INTERNAL_INFORMATION,LessThan,out _," +
                    "out _)\'");
            temp14 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_INTERNAL_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp12, out temp13);
            this.Manager.Checkpoint("MS-FSA_R1524");
            this.Manager.Checkpoint(@"[In FileInternalInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_INTERNAL_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S314\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp12, "byteCount of QueryFileInfoPart1, state S314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp13, "outputBuffer of QueryFileInfoPart1, state S314");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp14, "return of QueryFileInfoPart1, state S314");
            this.Manager.Comment("reaching state \'S358\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS14() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp15;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp15);
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp15, "securityContext of GetSystemConfig, state S139");
            this.Manager.Comment("reaching state \'S183\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp16;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp16 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp16, "return of CreateFile, state S227");
            this.Manager.Comment("reaching state \'S271\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp17;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp18;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp19;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_NETWORKOPEN_INFORMATION,LessThan,out" +
                    " _,out _)\'");
            temp19 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_NETWORKOPEN_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp17, out temp18);
            this.Manager.Checkpoint("MS-FSA_R4002");
            this.Manager.Checkpoint(@"[In FileNetworkOpenInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_NETWORK_OPEN_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp17, "byteCount of QueryFileInfoPart1, state S315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp18, "outputBuffer of QueryFileInfoPart1, state S315");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp19, "return of QueryFileInfoPart1, state S315");
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS16() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp20;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp20);
            this.Manager.Comment("reaching state \'S140\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp20, "securityContext of GetSystemConfig, state S140");
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp21;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp21 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp21, "return of CreateFile, state S228");
            this.Manager.Comment("reaching state \'S272\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp22;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp23;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp24;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_POSITION_INFORMATION,LessThan,out _," +
                    "out _)\'");
            temp24 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_POSITION_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp22, out temp23);
            this.Manager.Checkpoint("MS-FSA_R1561");
            this.Manager.Checkpoint(@"[In FilePositionInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is less than the size, in bytes, of the FILE_POSITION_INFORMATION structure, 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S316\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp22, "byteCount of QueryFileInfoPart1, state S316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp23, "outputBuffer of QueryFileInfoPart1, state S316");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp24, "return of QueryFileInfoPart1, state S316");
            this.Manager.Comment("reaching state \'S360\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS18() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp25;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp25);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp25, "securityContext of GetSystemConfig, state S141");
            this.Manager.Comment("reaching state \'S185\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp26;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp26 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp26, "return of CreateFile, state S229");
            this.Manager.Comment("reaching state \'S273\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp27;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp28;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp29;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ID_GLOBAL_TX_DIR_INFORMATION,NotLess" +
                    "Than,out _,out _)\'");
            temp29 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ID_GLOBAL_TX_DIR_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp27, out temp28);
            this.Manager.Checkpoint("MS-FSA_R1599");
            this.Manager.Checkpoint("[In FileIdGlobalTxDirectoryInformation,This operation] MUST be failed with STATUS" +
                    "_NOT_SUPPORTED.");
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp27, "byteCount of QueryFileInfoPart1, state S317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp28, "outputBuffer of QueryFileInfoPart1, state S317");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp29, "return of QueryFileInfoPart1, state S317");
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS2() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S89\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp30;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp30);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp30, "securityContext of GetSystemConfig, state S133");
            this.Manager.Comment("reaching state \'S177\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp31;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp31 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp31, "return of CreateFile, state S221");
            this.Manager.Comment("reaching state \'S265\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp32;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp33;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp34;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_COMPRESSION_INFORMATION,LessThan,out" +
                    " _,out _)\'");
            temp34 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_COMPRESSION_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp32, out temp33);
            this.Manager.Checkpoint("MS-FSA_R1489");
            this.Manager.Checkpoint(@"[In FileCompressionInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_COMPRESSION_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp32, "byteCount of QueryFileInfoPart1, state S309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp33, "outputBuffer of QueryFileInfoPart1, state S309");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp34, "return of QueryFileInfoPart1, state S309");
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS20() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp35;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp35);
            this.Manager.Comment("reaching state \'S142\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp35, "securityContext of GetSystemConfig, state S142");
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp36;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp36 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S230\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp36, "return of CreateFile, state S230");
            this.Manager.Comment("reaching state \'S274\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp37;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp38;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp39;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ID_FULL_DIR_INFORMATION,NotLessThan," +
                    "out _,out _)\'");
            temp39 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ID_FULL_DIR_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp37, out temp38);
            this.Manager.Checkpoint("MS-FSA_R1597");
            this.Manager.Checkpoint("[In FileIdFullDirectoryInformation,This operation]MUST be failed with STATUS_NOT_" +
                    "SUPPORTED.");
            this.Manager.Comment("reaching state \'S318\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp37, "byteCount of QueryFileInfoPart1, state S318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp38, "outputBuffer of QueryFileInfoPart1, state S318");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp39, "return of QueryFileInfoPart1, state S318");
            this.Manager.Comment("reaching state \'S362\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS22() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp40;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp40);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp40, "securityContext of GetSystemConfig, state S143");
            this.Manager.Comment("reaching state \'S187\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp41;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp41 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp41, "return of CreateFile, state S231");
            this.Manager.Comment("reaching state \'S275\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp42;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp43;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp44;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_STANDARD_LINK_INFORMATION,NotLessTha" +
                    "n,out _,out _)\'");
            temp44 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_STANDARD_LINK_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp42, out temp43);
            this.Manager.Checkpoint("MS-FSA_R2749");
            this.Manager.Checkpoint("[In FileStandardLinkInformation]This operation MUST be failed with STATUS_NOT_SUP" +
                    "PORTED.");
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp42, "byteCount of QueryFileInfoPart1, state S319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp43, "outputBuffer of QueryFileInfoPart1, state S319");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp44, "return of QueryFileInfoPart1, state S319");
            this.Manager.Comment("reaching state \'S363\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS24() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp45;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp45);
            this.Manager.Comment("reaching state \'S144\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp45, "securityContext of GetSystemConfig, state S144");
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp46;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp46 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp46, "return of CreateFile, state S232");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp47;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp48;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp49;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_FULL_DIR_INFORMATIO,NotLessThan,out " +
                    "_,out _)\'");
            temp49 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_FULL_DIR_INFORMATIO, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp47, out temp48);
            this.Manager.Checkpoint("MS-FSA_R1601");
            this.Manager.Checkpoint("[In FileFullDirectoryInformation,This operation ]MUST be failed with STATUS_NOT_S" +
                    "UPPORTED.");
            this.Manager.Comment("reaching state \'S320\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp47, "byteCount of QueryFileInfoPart1, state S320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp48, "outputBuffer of QueryFileInfoPart1, state S320");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp49, "return of QueryFileInfoPart1, state S320");
            this.Manager.Comment("reaching state \'S364\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS26() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp50;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp50);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp50, "securityContext of GetSystemConfig, state S145");
            this.Manager.Comment("reaching state \'S189\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp51;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp51 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp51, "return of CreateFile, state S233");
            this.Manager.Comment("reaching state \'S277\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp52;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp53;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp54;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_STREAM_INFORMATION,NotLessThan,out _" +
                    ",out _)\'");
            temp54 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_STREAM_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp52, out temp53);
            this.Manager.Checkpoint("MS-FSA_R2625");
            this.Manager.Checkpoint("[In FileStreamInformation,Pseudocode for the operation is as follows:] \r\n        " +
                    "                    The operation returns STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp52, "byteCount of QueryFileInfoPart1, state S321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp53, "outputBuffer of QueryFileInfoPart1, state S321");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp54, "return of QueryFileInfoPart1, state S321");
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS28() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp55;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp55);
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp55, "securityContext of GetSystemConfig, state S146");
            this.Manager.Comment("reaching state \'S190\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp56;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp56 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp56, "return of CreateFile, state S234");
            this.Manager.Comment("reaching state \'S278\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp57;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp58;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp59;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_NAMES_INFORMATION,NotLessThan,out _," +
                    "out _)\'");
            temp59 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_NAMES_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp57, out temp58);
            this.Manager.Checkpoint("MS-FSA_R1587");
            this.Manager.Checkpoint("[In FileNamesInformation]If used to query file information STATUS_NOT_SUPPORTED M" +
                    "UST be returned.");
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp57, "byteCount of QueryFileInfoPart1, state S322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp58, "outputBuffer of QueryFileInfoPart1, state S322");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp59, "return of QueryFileInfoPart1, state S322");
            this.Manager.Comment("reaching state \'S366\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS30() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp60;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp60);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp60, "securityContext of GetSystemConfig, state S147");
            this.Manager.Comment("reaching state \'S191\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp61;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp61 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp61, "return of CreateFile, state S235");
            this.Manager.Comment("reaching state \'S279\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp62;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp63;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp64;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_LINKS_INFORMATION,NotLessThan,out _," +
                    "out _)\'");
            temp64 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_LINKS_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp62, out temp63);
            this.Manager.Checkpoint("MS-FSA_R1593");
            this.Manager.Checkpoint("[In FileHardLinkInformation,This operation] MUST be failed with STATUS_NOT_SUPPOR" +
                    "TED.");
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp62, "byteCount of QueryFileInfoPart1, state S323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp63, "outputBuffer of QueryFileInfoPart1, state S323");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp64, "return of QueryFileInfoPart1, state S323");
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS32() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp65;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp65);
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp65, "securityContext of GetSystemConfig, state S148");
            this.Manager.Comment("reaching state \'S192\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp66;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp66 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S236\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp66, "return of CreateFile, state S236");
            this.Manager.Comment("reaching state \'S280\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp67;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp68;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp69;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_QUOTA_INFORMATION,NotLessThan,out _," +
                    "out _)\'");
            temp69 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_QUOTA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp67, out temp68);
            this.Manager.Checkpoint("MS-FSA_R2525");
            this.Manager.Checkpoint("[In FileQuotaInformation]If used to query file information STATUS_NOT_SUPPORTED M" +
                    "UST be returned.");
            this.Manager.Checkpoint("MS-FSA_R2524");
            this.Manager.Checkpoint("[In FileQuotaInformation]This operation is not supported as a file information class," +
                    " \r\n                            it is only supported as a directory enumerati" +
                    "on class, see section 3.1.5.5.2.");
            this.Manager.Comment("reaching state \'S324\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp67, "byteCount of QueryFileInfoPart1, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp68, "outputBuffer of QueryFileInfoPart1, state S324");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp69, "return of QueryFileInfoPart1, state S324");
            this.Manager.Comment("reaching state \'S368\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS34() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp70;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp70);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp70, "securityContext of GetSystemConfig, state S149");
            this.Manager.Comment("reaching state \'S193\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp71;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp71 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp71, "return of CreateFile, state S237");
            this.Manager.Comment("reaching state \'S281\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp72;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp73;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp74;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_SFIO_RESERVE_INFORMATION,NotLessThan" +
                    ",out _,out _)\'");
            temp74 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_SFIO_RESERVE_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp72, out temp73);
            this.Manager.Checkpoint("MS-FSA_R2734");
            this.Manager.Checkpoint("[In FileSfioReserveInformation] This operation MUST be failed with STATUS_NOT_SUP" +
                    "PORTED.");
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp72, "byteCount of QueryFileInfoPart1, state S325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp73, "outputBuffer of QueryFileInfoPart1, state S325");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp74, "return of QueryFileInfoPart1, state S325");
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS36() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp75;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp75);
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp75, "securityContext of GetSystemConfig, state S150");
            this.Manager.Comment("reaching state \'S194\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp76;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp76 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp76, "return of CreateFile, state S238");
            this.Manager.Comment("reaching state \'S282\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp77;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp78;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp79;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_MODE_INFORMATION,NotLessThan,out _,o" +
                    "ut _)\'");
            temp79 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_MODE_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp77, out temp78);
            this.Manager.Checkpoint("MS-FSA_R4000");
            this.Manager.Checkpoint("[In FileModeInformation,Pseudocode for the operation is as follows:]\r\n           " +
                    "                 Upon successful completion of the operation, the object store M" +
                    "UST return:ByteCount set to sizeof( FILE_MODE_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R4001");
            this.Manager.Checkpoint("[In FileModeInformation,Pseudocode for the operation is as follows:]\r\n           " +
                    "                 Upon successful completion of the operation, the object store M" +
                    "UST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S326\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_MODE_INFORMATION,out Out" +
                    "putBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_MODE_INFORMATION, temp77, "byteCount of QueryFileInfoPart1, state S326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp78, "outputBuffer of QueryFileInfoPart1, state S326");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp79, "return of QueryFileInfoPart1, state S326");
            this.Manager.Comment("reaching state \'S370\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS38() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp80;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp80);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp80, "securityContext of GetSystemConfig, state S151");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp81;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp81 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp81, "return of CreateFile, state S239");
            this.Manager.Comment("reaching state \'S283\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp82;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp83;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp84;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_BASIC_INFORMATION,NotLessThan,out _," +
                    "out _)\'");
            temp84 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_BASIC_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp82, out temp83);
            this.Manager.Checkpoint("MS-FSA_R3982");
            this.Manager.Checkpoint("[In FileBasicInformation]Upon successful completion of the operation, \r\n         " +
                    "                   the object store MUST return:ByteCount set to sizeof( FILE_BA" +
                    "SIC_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R3983");
            this.Manager.Checkpoint("[In FileBasicInformation]Upon successful completion of the operation, \r\n         " +
                    "                   the object store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_BASIC_INFORMATION,out Ou" +
                    "tputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_BASIC_INFORMATION, temp82, "byteCount of QueryFileInfoPart1, state S327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp83, "outputBuffer of QueryFileInfoPart1, state S327");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp84, "return of QueryFileInfoPart1, state S327");
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS4() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp85;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp85);
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp85, "securityContext of GetSystemConfig, state S134");
            this.Manager.Comment("reaching state \'S178\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp86;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp86 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S222\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp86, "return of CreateFile, state S222");
            this.Manager.Comment("reaching state \'S266\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp87;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp88;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp89;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_BASIC_INFORMATION,LessThan,out _,out" +
                    " _)\'");
            temp89 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_BASIC_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp87, out temp88);
            this.Manager.Checkpoint("MS-FSA_R1467");
            this.Manager.Checkpoint("[In FileBasicInformation]Pseudocode for the operation is as follows:If OutputBuff" +
                    "erSize is smaller than BlockAlign( sizeof( FILE_BASIC_INFORMATION ), 8 ), the op" +
                    "eration MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S310\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp87, "byteCount of QueryFileInfoPart1, state S310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp88, "outputBuffer of QueryFileInfoPart1, state S310");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp89, "return of QueryFileInfoPart1, state S310");
            this.Manager.Comment("reaching state \'S354\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS40() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp90;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp90);
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp90, "securityContext of GetSystemConfig, state S152");
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp91;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp91 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp91, "return of CreateFile, state S240");
            this.Manager.Comment("reaching state \'S284\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp92;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp93;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp94;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_NETWORKOPEN_INFORMATION,NotLessThan," +
                    "out _,out _)\'");
            temp94 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_NETWORKOPEN_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp92, out temp93);
            this.Manager.Checkpoint("MS-FSA_R4004");
            this.Manager.Checkpoint("[In FileNetworkOpenInformation,Pseudocode for the operation is as follows:]\r\n    " +
                    "                        Upon successful completion of the operation, the object " +
                    "store MUST return:ByteCount set to sizeof( FILE_NETWORK_OPEN_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R4005");
            this.Manager.Checkpoint("[In FileNetworkOpenInformation,Pseudocode for the operation is as follows:]U\r\n   " +
                    "                         pon successful completion of the operation, the object " +
                    "store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S328\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_NETWORK_OPEN_INFORMATION" +
                    ",out OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_NETWORK_OPEN_INFORMATION, temp92, "byteCount of QueryFileInfoPart1, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp93, "outputBuffer of QueryFileInfoPart1, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp94, "return of QueryFileInfoPart1, state S328");
            this.Manager.Comment("reaching state \'S372\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS42() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp95;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp95);
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp95, "securityContext of GetSystemConfig, state S153");
            this.Manager.Comment("reaching state \'S197\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp96;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp96 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp96, "return of CreateFile, state S241");
            this.Manager.Comment("reaching state \'S285\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp97;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp98;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp99;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_COMPRESSION_INFORMATION,NotLessThan," +
                    "out _,out _)\'");
            temp99 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_COMPRESSION_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp97, out temp98);
            this.Manager.Checkpoint("MS-FSA_R3984");
            this.Manager.Checkpoint("[In FileCompressionInformation]Upon successful completion of the operation, \r\n   " +
                    "                         the object store MUST return:ByteCount set to sizeof(FI" +
                    "LE_COMPRESSION_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R3985");
            this.Manager.Checkpoint("[In FileCompressionInformation]Upon successful completion of the operation, \r\n   " +
                    "                         the object store MUST return:Status set to STATUS_SUCCE" +
                    "SS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_COMPRESSION_INFORMATION," +
                    "out OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_COMPRESSION_INFORMATION, temp97, "byteCount of QueryFileInfoPart1, state S329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp98, "outputBuffer of QueryFileInfoPart1, state S329");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp99, "return of QueryFileInfoPart1, state S329");
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS44() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp100;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp100);
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp100, "securityContext of GetSystemConfig, state S154");
            this.Manager.Comment("reaching state \'S198\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp101;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp101 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp101, "return of CreateFile, state S242");
            this.Manager.Comment("reaching state \'S286\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp102;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp103;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp104;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_INTERNAL_INFORMATION,NotLessThan,out" +
                    " _,out _)\'");
            temp104 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_INTERNAL_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp102, out temp103);
            this.Manager.Checkpoint("MS-FSA_R3997");
            this.Manager.Checkpoint("[In FileInternalInformation]Upon successful completion of the operation, \r\n      " +
                    "                      the object store MUST return: ByteCount set to sizeof( FIL" +
                    "E_INTERNAL_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R3998");
            this.Manager.Checkpoint("[In FileInternalInformation]Upon successful completion of the operation, \r\n      " +
                    "                      the object store MUST return:Status set to STATUS_SUCCESS." +
                    "");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S330\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_INTERNAL_INFORMATION,out" +
                    " OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_INTERNAL_INFORMATION, temp102, "byteCount of QueryFileInfoPart1, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp103, "outputBuffer of QueryFileInfoPart1, state S330");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp104, "return of QueryFileInfoPart1, state S330");
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS46() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp105;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp105);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp105, "securityContext of GetSystemConfig, state S155");
            this.Manager.Comment("reaching state \'S199\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp106;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp106 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp106, "return of CreateFile, state S243");
            this.Manager.Comment("reaching state \'S287\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp107;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp108;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp109;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ACCESS_INFORMATION,NotLessThan,out _" +
                    ",out _)\'");
            temp109 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ACCESS_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp107, out temp108);
            this.Manager.Checkpoint("MS-FSA_R1430");
            this.Manager.Checkpoint("[In FileAccessInformation,Pseudocode for the operation is as follows:]\r\n         " +
                    "                   OutputBuffer MUST be filled out as follows:OutputBuffer.Acces" +
                    "sFlags set to Open.GrantedAccess.");
            this.Manager.Checkpoint("MS-FSA_R3967");
            this.Manager.Checkpoint("[In FileAccessInformation]Upon successful completion of the operation, \r\n        " +
                    "                    the object store MUST return: ByteCount set to sizeof( FILE_" +
                    "ACCESS_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R3968");
            this.Manager.Checkpoint("[In FileAccessInformation]Upon successful completion of the operation, \r\n        " +
                    "                    the object store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_ACCESS_INFORMATION,out O" +
                    "utputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_ACCESS_INFORMATION, temp107, "byteCount of QueryFileInfoPart1, state S331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp108, "outputBuffer of QueryFileInfoPart1, state S331");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp109, "return of QueryFileInfoPart1, state S331");
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS48() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp110;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp110);
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp110, "securityContext of GetSystemConfig, state S156");
            this.Manager.Comment("reaching state \'S200\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp111;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp111 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp111, "return of CreateFile, state S244");
            this.Manager.Comment("reaching state \'S288\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp112;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp113;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp114;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALL_INFORMATION,NotLessThan,out _,ou" +
                    "t _)\'");
            temp114 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALL_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp112, out temp113);
            this.Manager.Checkpoint("MS-FSA_R3980");
            this.Manager.Checkpoint(@"[In FileAllInformation,Pseudocode for the operation is as follows:] 
                            Upon successful completion of the operation, the object store MUST return:
                            ByteCount set to FieldOffset( FILE_ALL_INFORMATION.NameInformation ) + NameInformationLength.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out FieldOffsetFILE_ALL_INFORMATION_Nam" +
                    "eInformationAddNameInformationLength,out OutputBuffer(AccessFlags=None,Revision=" +
                    "0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.FieldOffsetFILE_ALL_INFORMATION_NameInformationAddNameInformationLength, temp112, "byteCount of QueryFileInfoPart1, state S332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp113, "outputBuffer of QueryFileInfoPart1, state S332");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp114, "return of QueryFileInfoPart1, state S332");
            this.Manager.Comment("reaching state \'S376\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS50() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp115;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp115);
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp115, "securityContext of GetSystemConfig, state S157");
            this.Manager.Comment("reaching state \'S201\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp116;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp116 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp116, "return of CreateFile, state S245");
            this.Manager.Comment("reaching state \'S289\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp117;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp118;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp119;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALIGNMENT_INFORMATION,LessThan,out _" +
                    ",out _)\'");
            temp119 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALIGNMENT_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp117, out temp118);
            this.Manager.Checkpoint("MS-FSA_R1433");
            this.Manager.Checkpoint(@"[In FileAlignmentInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_ALIGNMENT_INFORMATION ), 
                                the operation MUST be failed with Status STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp117, "byteCount of QueryFileInfoPart1, state S333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp118, "outputBuffer of QueryFileInfoPart1, state S333");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp119, "return of QueryFileInfoPart1, state S333");
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS52() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp120;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp120);
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp120, "securityContext of GetSystemConfig, state S158");
            this.Manager.Comment("reaching state \'S202\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp121;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp121 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp121, "return of CreateFile, state S246");
            this.Manager.Comment("reaching state \'S290\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp122;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp123;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp124;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_FULLEA_INFORMATION,LessThan,out _,ou" +
                    "t _)\'");
            temp124 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_FULLEA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp122, out temp123);
            this.Manager.Checkpoint("MS-FSA_R3994");
            this.Manager.Checkpoint(@"[In FileFullEaInformation,Pseudocode for the operation is as follows:]
                                Upon successful completion of the operation, the object store MUST return:Status set to:STATUS_BUFFER_TOO_SMALL 
                                if OutputBufferSize is too small to hold Open.NextEaEntry.  No entries are returned.");
            this.Manager.Comment("reaching state \'S334\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:BUFFER_TOO_SMALL\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp122, "byteCount of QueryFileInfoPart1, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp123, "outputBuffer of QueryFileInfoPart1, state S334");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.BUFFER_TOO_SMALL, temp124, "return of QueryFileInfoPart1, state S334");
            this.Manager.Comment("reaching state \'S378\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS54() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S115\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp125;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp125);
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp125, "securityContext of GetSystemConfig, state S159");
            this.Manager.Comment("reaching state \'S203\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp126;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp126 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp126, "return of CreateFile, state S247");
            this.Manager.Comment("reaching state \'S291\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp127;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp128;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp129;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_EA_INFORMATION,LessThan,out _,out _)" +
                    "\'");
            temp129 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_EA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp127, out temp128);
            this.Manager.Checkpoint("MS-FSA_R3986");
            this.Manager.Checkpoint("[In FileEaInformation]Pseudocode for the operation is as follows:\r\n              " +
                    "                  If OutputBufferSize is smaller than sizeof( FILE_EA_INFORMATIO" +
                    "N ), the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp127, "byteCount of QueryFileInfoPart1, state S335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp128, "outputBuffer of QueryFileInfoPart1, state S335");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp129, "return of QueryFileInfoPart1, state S335");
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS56() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp130;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp130);
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp130, "securityContext of GetSystemConfig, state S160");
            this.Manager.Comment("reaching state \'S204\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp131;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp131 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S248\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp131, "return of CreateFile, state S248");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp132;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp133;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp134;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALTERNATENAME_INFORMATION,LessThan,o" +
                    "ut _,out _)\'");
            temp134 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALTERNATENAME_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp132, out temp133);
            this.Manager.Checkpoint("MS-FSA_R1438");
            this.Manager.Checkpoint(@"[In FileAlternateNameInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than BlockAlign( FieldOffset( FILE_NAME_INFORMATION.FileName ) + 2, 4 ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S336\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp132, "byteCount of QueryFileInfoPart1, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp133, "outputBuffer of QueryFileInfoPart1, state S336");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp134, "return of QueryFileInfoPart1, state S336");
            this.Manager.Comment("reaching state \'S380\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS58() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp135;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp135);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp135, "securityContext of GetSystemConfig, state S161");
            this.Manager.Comment("reaching state \'S205\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp136;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp136 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp136, "return of CreateFile, state S249");
            this.Manager.Comment("reaching state \'S293\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp137;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp138;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp139;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ATTRIBUTETAG_INFORMATION,LessThan,ou" +
                    "t _,out _)\'");
            temp139 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ATTRIBUTETAG_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp137, out temp138);
            this.Manager.Checkpoint("MS-FSA_R1445");
            this.Manager.Checkpoint("[In FileAttributeTagInformation,Pseudocode for the operation is as follows:]\r\n   " +
                    "                             If OutputBufferSize is smaller than sizeof( FILE_AT" +
                    "TRIBUTE_TAG_INFORMATION ), the operation MUST be failed with STATUS_INFO_LENGTH_" +
                    "MISMATCH.");
            this.Manager.Comment("reaching state \'S337\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp137, "byteCount of QueryFileInfoPart1, state S337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp138, "outputBuffer of QueryFileInfoPart1, state S337");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp139, "return of QueryFileInfoPart1, state S337");
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS6() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S91\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp140;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp140);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp140, "securityContext of GetSystemConfig, state S135");
            this.Manager.Comment("reaching state \'S179\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp141;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp141 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp141, "return of CreateFile, state S223");
            this.Manager.Comment("reaching state \'S267\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp142;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp143;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp144;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_MODE_INFORMATION,LessThan,out _,out " +
                    "_)\'");
            temp144 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_MODE_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp142, out temp143);
            this.Manager.Checkpoint("MS-FSA_R1529");
            this.Manager.Checkpoint("[In FileModeInformation]Pseudocode for the operation is as follows:\r\n            " +
                    "                    If OutputBufferSize is smaller than sizeof(FILE_MODE_INFORMA" +
                    "TION ), the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp142, "byteCount of QueryFileInfoPart1, state S311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp143, "outputBuffer of QueryFileInfoPart1, state S311");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp144, "return of QueryFileInfoPart1, state S311");
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS60() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp145;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp145);
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp145, "securityContext of GetSystemConfig, state S162");
            this.Manager.Comment("reaching state \'S206\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp146;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp146 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S250\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp146, "return of CreateFile, state S250");
            this.Manager.Comment("reaching state \'S294\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp147;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp148;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp149;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_STANDARD_INFORMATION,LessThan,out _," +
                    "out _)\'");
            temp149 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_STANDARD_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp147, out temp148);
            this.Manager.Checkpoint("MS-FSA_R4006");
            this.Manager.Checkpoint(@"[In FileStandardInformation]Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than sizeof( FILE_STANDARD_INFORMATION ), 
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S338\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp147, "byteCount of QueryFileInfoPart1, state S338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp148, "outputBuffer of QueryFileInfoPart1, state S338");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp149, "return of QueryFileInfoPart1, state S338");
            this.Manager.Comment("reaching state \'S382\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS62() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S119\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp150;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp150);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp150, "securityContext of GetSystemConfig, state S163");
            this.Manager.Comment("reaching state \'S207\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp151;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp151 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp151, "return of CreateFile, state S251");
            this.Manager.Comment("reaching state \'S295\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp152;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp153;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp154;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_BOTH_DIR_INFORMATION,LessThan,out _," +
                    "out _)\'");
            temp154 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_BOTH_DIR_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp152, out temp153);
            this.Manager.Checkpoint("MS-FSA_R1426");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]\r\n                    If FileInf" +
                    "ormationClass is not defined in [MS-FSCC] section 2.4, the operation MUST be fai" +
                    "led with STATUS_INVALID_INFO_CLASS.");
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp152, "byteCount of QueryFileInfoPart1, state S339");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp153, "outputBuffer of QueryFileInfoPart1, state S339");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp154, "return of QueryFileInfoPart1, state S339");
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS64() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp155;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp155);
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp155, "securityContext of GetSystemConfig, state S164");
            this.Manager.Comment("reaching state \'S208\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp156;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp156 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S252\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp156, "return of CreateFile, state S252");
            this.Manager.Comment("reaching state \'S296\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp157;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp158;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp159;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_FULLEA_INFORMATION,NotLessThan,out _" +
                    ",out _)\'");
            temp159 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_FULLEA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp157, out temp158);
            this.Manager.Checkpoint("MS-FSA_R3992");
            this.Manager.Checkpoint(@"[In FileFullEaInformation,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:ByteCount set to the size, in bytes, 
                            of all FILE_FULL_EA_INFORMATION entries returned.");
            this.Manager.Comment("reaching state \'S340\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_FULL_EA_INFORMATION,out " +
                    "OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_FULL_EA_INFORMATION, temp157, "byteCount of QueryFileInfoPart1, state S340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp158, "outputBuffer of QueryFileInfoPart1, state S340");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp159, "return of QueryFileInfoPart1, state S340");
            this.Manager.Comment("reaching state \'S384\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS66() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S121\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp160;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp160);
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp160, "securityContext of GetSystemConfig, state S165");
            this.Manager.Comment("reaching state \'S209\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp161;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp161 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S253\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp161, "return of CreateFile, state S253");
            this.Manager.Comment("reaching state \'S297\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp162;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp163;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp164;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ATTRIBUTETAG_INFORMATION,NotLessThan" +
                    ",out _,out _)\'");
            temp164 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ATTRIBUTETAG_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp162, out temp163);
            this.Manager.Checkpoint("MS-FSA_R1464");
            this.Manager.Checkpoint("[In FileAttributeTagInformation,Pseudocode for the operation is as follows:]\r\n   " +
                    "                         Upon successful completion of the operation, the object" +
                    " store MUST return:ByteCount set to sizeof(FILE_ATTRIBUTE_TAG_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R1465");
            this.Manager.Checkpoint("[In FileAttributeTagInformation,Pseudocode for the operation is as follows:]\r\n   " +
                    "                         Upon successful completion of the operation, the object" +
                    " store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_ATTRIBUTE_TAG_INFORMATIO" +
                    "N,out OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_ATTRIBUTE_TAG_INFORMATION, temp162, "byteCount of QueryFileInfoPart1, state S341");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp163, "outputBuffer of QueryFileInfoPart1, state S341");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp164, "return of QueryFileInfoPart1, state S341");
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS68() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S122\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp165;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp165);
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp165, "securityContext of GetSystemConfig, state S166");
            this.Manager.Comment("reaching state \'S210\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp166;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp166 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp166, "return of CreateFile, state S254");
            this.Manager.Comment("reaching state \'S298\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp167;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp168;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp169;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALTERNATENAME_INFORMATION,NotLessTha" +
                    "n,out _,out _)\'");
            temp169 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALTERNATENAME_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp167, out temp168);
            this.Manager.Checkpoint("MS-FSA_R1442");
            this.Manager.Checkpoint(@"[In FileAlternateNameInformation,Pseudocode for the operation is as follows:]
                            Upon successful completion of the operation, the object store MUST return:
                            ByteCount set to FieldOffset( FILE_NAME_INFORMATION.FileName ) + OutputBuffer.FileNameLength.");
            this.Manager.Checkpoint("MS-FSA_R1443");
            this.Manager.Checkpoint("[In FileAlternateNameInformation,Pseudocode for the operation is as follows:]\r\n  " +
                    "                          Upon successful completion of the operation, the objec" +
                    "t store MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S342\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out FieldOffsetFILE_NAME_INFORMATION_Fi" +
                    "leNameAddOutputBuffer_FileNameLength,out OutputBuffer(AccessFlags=None,Revision=" +
                    "0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.FieldOffsetFILE_NAME_INFORMATION_FileNameAddOutputBuffer_FileNameLength, temp167, "byteCount of QueryFileInfoPart1, state S342");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp168, "outputBuffer of QueryFileInfoPart1, state S342");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp169, "return of QueryFileInfoPart1, state S342");
            this.Manager.Comment("reaching state \'S386\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS70() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS70");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S123\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp170;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp170);
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp170, "securityContext of GetSystemConfig, state S167");
            this.Manager.Comment("reaching state \'S211\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp171;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp171 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp171, "return of CreateFile, state S255");
            this.Manager.Comment("reaching state \'S299\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp172;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp173;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp174;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALIGNMENT_INFORMATION,NotLessThan,ou" +
                    "t _,out _)\'");
            temp174 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALIGNMENT_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp172, out temp173);
            this.Manager.Checkpoint("MS-FSA_R1435");
            this.Manager.Checkpoint("[In FileAlignmentInformation,Pseudocode for the operation is as follows:]\r\n      " +
                    "                      Upon successful completion of the operation, the object st" +
                    "ore MUST return:ByteCount set to sizeof( FILE_ALIGNMENT INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R1436");
            this.Manager.Checkpoint("[In FileAlignmentInformation,Pseudocode for the operation is as follows:]\r\n      " +
                    "                      Upon successful completion of the operation, the object st" +
                    "ore MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_ALIGNMENT_INFORMATION,ou" +
                    "t OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_ALIGNMENT_INFORMATION, temp172, "byteCount of QueryFileInfoPart1, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp173, "outputBuffer of QueryFileInfoPart1, state S343");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp174, "return of QueryFileInfoPart1, state S343");
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS72() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS72");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S124\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp175;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp175);
            this.Manager.Comment("reaching state \'S168\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp175, "securityContext of GetSystemConfig, state S168");
            this.Manager.Comment("reaching state \'S212\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp176;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp176 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S256\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp176, "return of CreateFile, state S256");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp177;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp178;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp179;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_STANDARD_INFORMATION,NotLessThan,out" +
                    " _,out _)\'");
            temp179 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_STANDARD_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp177, out temp178);
            this.Manager.Checkpoint("MS-FSA_R4007");
            this.Manager.Checkpoint("[In FileStandardInformation,Pseudocode for the operation is as follows:]\r\n       " +
                    "                     Upon successful completion of the operation, the object sto" +
                    "re MUST return:ByteCount set to sizeof( FILE_STANDARD_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R4008");
            this.Manager.Checkpoint("[In FileStandardInformation,Pseudocode for the operation is as follows:]\r\n       " +
                    "                     Upon successful completion of the operation, the object sto" +
                    "re MUST return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S344\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_STANDARD_INFORMATION,out" +
                    " OutputBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_STANDARD_INFORMATION, temp177, "byteCount of QueryFileInfoPart1, state S344");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp178, "outputBuffer of QueryFileInfoPart1, state S344");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp179, "return of QueryFileInfoPart1, state S344");
            this.Manager.Comment("reaching state \'S388\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS74() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS74");
            this.Manager.Comment("reaching state \'S74\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S125\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp180;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp180);
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp180, "securityContext of GetSystemConfig, state S169");
            this.Manager.Comment("reaching state \'S213\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp181;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp181 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp181, "return of CreateFile, state S257");
            this.Manager.Comment("reaching state \'S301\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp182;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp183;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp184;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_EA_INFORMATION,NotLessThan,out _,out" +
                    " _)\'");
            temp184 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_EA_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp182, out temp183);
            this.Manager.Checkpoint("MS-FSA_R3987");
            this.Manager.Checkpoint("[In FileEaInformation,Pseudocode for the operation is as follows:]\r\n             " +
                    "               Upon successful completion of the operation, the object store MUS" +
                    "T return:ByteCount set to sizeof( FILE_EA_INFORMATION ).");
            this.Manager.Checkpoint("MS-FSA_R3988");
            this.Manager.Checkpoint("[In FileEaInformation,Pseudocode for the operation is as follows:]\r\n             " +
                    "               Upon successful completion of the operation, the object store MUS" +
                    "T return:Status set to STATUS_SUCCESS.");
            this.Manager.Checkpoint("MS-FSA_R1421");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]On completion, \r\n               " +
                    "             the object store MUST return:[Status,OutputBuffer,ByteCount].");
            this.Manager.Comment("reaching state \'S345\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out SizeofFILE_EA_INFORMATION,out Outpu" +
                    "tBuffer(AccessFlags=None,Revision=0)]:SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount.SizeofFILE_EA_INFORMATION, temp182, "byteCount of QueryFileInfoPart1, state S345");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp183, "outputBuffer of QueryFileInfoPart1, state S345");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp184, "return of QueryFileInfoPart1, state S345");
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS76() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS76");
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S126\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp185;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp185);
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp185, "securityContext of GetSystemConfig, state S170");
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp186;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp186 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp186, "return of CreateFile, state S258");
            this.Manager.Comment("reaching state \'S302\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp187;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp188;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp189;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_OBJECTID_INFORMATION,NotLessThan,out" +
                    " _,out _)\'");
            temp189 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_OBJECTID_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp187, out temp188);
            this.Manager.Checkpoint("MS-FSA_R1585");
            this.Manager.Checkpoint("[In FileObjectIdInformation,This operation]MUST be failed with STATUS_NOT_SUPPORT" +
                    "ED.");
            this.Manager.Comment("reaching state \'S346\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp187, "byteCount of QueryFileInfoPart1, state S346");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp188, "outputBuffer of QueryFileInfoPart1, state S346");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp189, "return of QueryFileInfoPart1, state S346");
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS78() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS78");
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S127\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp190;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp190);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp190, "securityContext of GetSystemConfig, state S171");
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp191;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp191 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp191, "return of CreateFile, state S259");
            this.Manager.Comment("reaching state \'S303\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp192;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp193;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp194;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ID_BOTH_DIR_INFORMATION,NotLessThan," +
                    "out _,out _)\'");
            temp194 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ID_BOTH_DIR_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp192, out temp193);
            this.Manager.Checkpoint("MS-FSA_R1595");
            this.Manager.Checkpoint("[In FileIdBothDirectoryInformation,This operation] MUST be failed with STATUS_NOT" +
                    "_SUPPORTED.");
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp192, "byteCount of QueryFileInfoPart1, state S347");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp193, "outputBuffer of QueryFileInfoPart1, state S347");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp194, "return of QueryFileInfoPart1, state S347");
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS8() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp195;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp195);
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp195, "securityContext of GetSystemConfig, state S136");
            this.Manager.Comment("reaching state \'S180\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp196;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp196 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S224\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp196, "return of CreateFile, state S224");
            this.Manager.Comment("reaching state \'S268\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp197;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp198;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp199;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_ALL_INFORMATION,LessThan,out _,out _" +
                    ")\'");
            temp199 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_ALL_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(0)), out temp197, out temp198);
            this.Manager.Checkpoint("MS-FSA_R3970");
            this.Manager.Checkpoint(@"[In FileAllInformation] Pseudocode for the operation is as follows:
                                If OutputBufferSize is smaller than BlockAlign( FieldOffset( FILE_ALL_INFORMATION.NameInformation.FileName ) + 2, 8 ),
                                the operation MUST be failed with STATUS_INFO_LENGTH_MISMATCH.");
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INFO_LENGTH_MISMATCH\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp197, "byteCount of QueryFileInfoPart1, state S312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp198, "outputBuffer of QueryFileInfoPart1, state S312");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INFO_LENGTH_MISMATCH, temp199, "return of QueryFileInfoPart1, state S312");
            this.Manager.Comment("reaching state \'S356\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS80() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS80");
            this.Manager.Comment("reaching state \'S80\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S128\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp200;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp200);
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp200, "securityContext of GetSystemConfig, state S172");
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp201;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp201 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S260\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp201, "return of CreateFile, state S260");
            this.Manager.Comment("reaching state \'S304\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp202;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp203;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp204;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_BOTH_DIR_INFORMATION,NotLessThan,out" +
                    " _,out _)\'");
            temp204 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_BOTH_DIR_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp202, out temp203);
            this.Manager.Checkpoint("MS-FSA_R1426");
            this.Manager.Checkpoint("[In Server Requests a Query of File Information ]\r\n                    If FileInf" +
                    "ormationClass is not defined in [MS-FSCC] section 2.4, the operation MUST be fai" +
                    "led with STATUS_INVALID_INFO_CLASS.");
            this.Manager.Comment("reaching state \'S348\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp202, "byteCount of QueryFileInfoPart1, state S348");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp203, "outputBuffer of QueryFileInfoPart1, state S348");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp204, "return of QueryFileInfoPart1, state S348");
            this.Manager.Comment("reaching state \'S392\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS82() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS82");
            this.Manager.Comment("reaching state \'S82\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S129\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp205;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp205);
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp205, "securityContext of GetSystemConfig, state S173");
            this.Manager.Comment("reaching state \'S217\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp206;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp206 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp206, "return of CreateFile, state S261");
            this.Manager.Comment("reaching state \'S305\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp207;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp208;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp209;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_REPARSE_POINT_INFORMATION,NotLessTha" +
                    "n,out _,out _)\'");
            temp209 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_REPARSE_POINT_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp207, out temp208);
            this.Manager.Checkpoint("MS-FSA_R2559");
            this.Manager.Checkpoint("[In FileReparsePointInformation ]  \r\n                           If used to query " +
                    "file information STATUS_NOT_SUPPORTED MUST be returned.");
            this.Manager.Checkpoint("MS-FSA_R2558");
            this.Manager.Checkpoint("[In FileReparsePointInformation ] This operation is not supported as a file infor" +
                    "mation class, \r\n                            it is only supported as a directory " +
                    "enumeration class, see section 3.1.5.5.3.");
            this.Manager.Comment("reaching state \'S349\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp207, "byteCount of QueryFileInfoPart1, state S349");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp208, "outputBuffer of QueryFileInfoPart1, state S349");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp209, "return of QueryFileInfoPart1, state S349");
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS84() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp210;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp210);
            this.Manager.Comment("reaching state \'S174\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp210, "securityContext of GetSystemConfig, state S174");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp211;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp211 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp211, "return of CreateFile, state S262");
            this.Manager.Comment("reaching state \'S306\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp212;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp213;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp214;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_DIRECTORY_INFORMATION,NotLessThan,ou" +
                    "t _,out _)\'");
            temp214 = this.IFSAAdapterInstance.QueryFileInfoPart1(((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp212, out temp213);
            this.Manager.Checkpoint("MS-FSA_R1603");
            this.Manager.Checkpoint("[In FileDirectoryInformation,This operation ]MUST be failed with STATUS_NOT_SUPPO" +
                    "RTED.");
            this.Manager.Comment("reaching state \'S350\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp212, "byteCount of QueryFileInfoPart1, state S350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp213, "outputBuffer of QueryFileInfoPart1, state S350");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp214, "return of QueryFileInfoPart1, state S350");
            this.Manager.Comment("reaching state \'S394\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.QueryFileInformation)]
        public void QueryFileInformationTestCaseS86() {
            this.Manager.BeginTest("QueryFileInformationTestCaseS86");
            this.Manager.Comment("reaching state \'S86\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S131\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext temp215;
            this.Manager.Comment("executing step \'call GetSystemConfig(out _)\'");
            this.IFSAAdapterInstance.GetSystemConfig(out temp215);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return GetSystemConfig/[out SSecurityContext(privilegeSet=SeRestor" +
                    "ePrivilege,isSecurityContextSIDsContainWellKnown=False,isImplementsEncryption=Fa" +
                    "lse)]\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SSecurityContext>(new string[] {
                            "privilegeSet",
                            "isSecurityContextSIDsContainWellKnown",
                            "isImplementsEncryption"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.PrivilegeSet.SeRestorePrivilege,
                            false,
                            false}), temp215, "securityContext of GetSystemConfig, state S175");
            this.Manager.Comment("reaching state \'S219\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp216;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,NULL,GENERIC_ALL,FILE_S" +
                    "HARE_WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp216 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen.NULL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.GENERIC_ALL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp216, "return of CreateFile, state S263");
            this.Manager.Comment("reaching state \'S307\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount temp217;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer temp218;
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp219;
            this.Manager.Comment("executing step \'call QueryFileInfoPart1(FILE_NAME_INFORMATION,NotLessThan,out _,o" +
                    "ut _)\'");
            temp219 = this.IFSAAdapterInstance.QueryFileInfoPart1(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileInfoClass.FILE_NAME_INFORMATION, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBufferSize)(1)), out temp217, out temp218);
            this.Manager.Checkpoint("MS-FSA_R1591");
            this.Manager.Checkpoint("[In FileNameInformation]This operation MUST be failed with STATUS_NOT_SUPPORTED.");
            this.Manager.Comment("reaching state \'S351\'");
            this.Manager.Comment("checking step \'return QueryFileInfoPart1/[out NotSet,out OutputBuffer(AccessFlags" +
                    "=None,Revision=0)]:INVALID_INFO_CLASS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ByteCount)(0)), temp217, "byteCount of QueryFileInfoPart1, state S351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.OutputBuffer>(new string[] {
                            "AccessFlags",
                            "Revision"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.None,
                            0u}), temp218, "outputBuffer of QueryFileInfoPart1, state S351");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_INFO_CLASS, temp219, "return of QueryFileInfoPart1, state S351");
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
