// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.FSA.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SetFileStreamRenameInformationTestCase : PtfTestClassBase {
        
        public SetFileStreamRenameInformationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void GetIfStreamRenameIsSupportedDelegate1(bool isSupported);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase GetIfStreamRenameIsSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter), "GetIfStreamRenameIsSupported", typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter IFSAAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IFSAAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.IFSAAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS0() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S70\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp0;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp0 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp0, "return of CreateFile, state S105");
            this.Manager.Comment("reaching state \'S140\'");
            bool temp1;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp1);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp1);
            this.Manager.Comment("reaching state \'S175\'");
            int temp4 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS0GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS0GetIfStreamRenameIsSupportedChecker1)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S210\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp2;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,ContainsWildcard,NotReplaceIfExists)" +
                        "\'");
                temp2 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp2, "return of StreamRename, state S280");
                this.Manager.Comment("reaching state \'S350\'");
                goto label0;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S211\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp3;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,ContainsWildcard,NotReplaceIfExist" +
                        "s)\'");
                temp3 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3136");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as fol" +
                        "lows:]\r\n                    The operation MUST be failed with STATUS_INVALID_PAR" +
                        "AMETER under any of the following conditions:The last character of NewStreamName" +
                        " is \\\":\".");
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp3, "return of StreamRename, state S281");
                this.Manager.Comment("reaching state \'S351\'");
                goto label0;
            }
            throw new InvalidOperationException("never reached");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS0GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S175");
        }
        
        private void SetFileStreamRenameInformationTestCaseS0GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S175");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS10() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS10");
            this.Manager.Comment("reaching state \'S10\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp5;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp5 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp5, "return of CreateFile, state S110");
            this.Manager.Comment("reaching state \'S145\'");
            bool temp6;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp6);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp6);
            this.Manager.Comment("reaching state \'S180\'");
            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS10GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS10GetIfStreamRenameIsSupportedChecker1)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S220\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp7;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,ContainsInvalid,NotReplaceIfEx" +
                        "ists)\'");
                temp7 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S290\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp7, "return of StreamRename, state S290");
                this.Manager.Comment("reaching state \'S360\'");
                goto label1;
            }
            if ((temp9 == 1)) {
                this.Manager.Comment("reaching state \'S221\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp8;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,isIndexAllocation,NotReplaceIfE" +
                        "xists)\'");
                temp8 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3265");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:If StreamName contains any characters invalid for a streamname as specified in [MS-FSCC] section 2.1.5  .");
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp8, "return of StreamRename, state S291");
                this.Manager.Comment("reaching state \'S361\'");
                goto label1;
            }
            throw new InvalidOperationException("never reached");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS10GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S180");
        }
        
        private void SetFileStreamRenameInformationTestCaseS10GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S180");
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS12() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS12");
            this.Manager.Comment("reaching state \'S12\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp10;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp10 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp10, "return of CreateFile, state S111");
            this.Manager.Comment("reaching state \'S146\'");
            bool temp11;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp11);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp11);
            this.Manager.Comment("reaching state \'S181\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS12GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS12GetIfStreamRenameIsSupportedChecker1)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S222\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp12;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,ContainsInvalid,NotRepla" +
                        "ceIfExists)\'");
                temp12 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp12, "return of StreamRename, state S292");
                this.Manager.Comment("reaching state \'S362\'");
                goto label2;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S223\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp13;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,isIndexAllocation,NotReplaceIfExis" +
                        "ts)\'");
                temp13 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3136");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as fol" +
                        "lows:]\r\n                    The operation MUST be failed with STATUS_INVALID_PAR" +
                        "AMETER under any of the following conditions:The last character of NewStreamName" +
                        " is \\\":\".");
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp13, "return of StreamRename, state S293");
                this.Manager.Comment("reaching state \'S363\'");
                goto label2;
            }
            throw new InvalidOperationException("never reached");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS12GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S181");
        }
        
        private void SetFileStreamRenameInformationTestCaseS12GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S181");
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS14() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS14");
            this.Manager.Comment("reaching state \'S14\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S77\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp15;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp15 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp15, "return of CreateFile, state S112");
            this.Manager.Comment("reaching state \'S147\'");
            bool temp16;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp16);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp16);
            this.Manager.Comment("reaching state \'S182\'");
            int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS14GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS14GetIfStreamRenameIsSupportedChecker1)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S224\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp17;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,ContainsInvalid,NotReplaceIfExists" +
                        ")\'");
                temp17 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp17, "return of StreamRename, state S294");
                this.Manager.Comment("reaching state \'S364\'");
                goto label3;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S225\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp18;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,LengthZero,NotReplaceIfExists)\'");
                temp18 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3136");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as fol" +
                        "lows:]\r\n                    The operation MUST be failed with STATUS_INVALID_PAR" +
                        "AMETER under any of the following conditions:The last character of NewStreamName" +
                        " is \\\":\".");
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp18, "return of StreamRename, state S295");
                this.Manager.Comment("reaching state \'S365\'");
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS14GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S182");
        }
        
        private void SetFileStreamRenameInformationTestCaseS14GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S182");
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS16() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS16");
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp20;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp20 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp20, "return of CreateFile, state S113");
            this.Manager.Comment("reaching state \'S148\'");
            bool temp21;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp21);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp21);
            this.Manager.Comment("reaching state \'S183\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS16GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS16GetIfStreamRenameIsSupportedChecker1)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S226\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp22;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,ContainsInvalid,NotReplaceIfEx" +
                        "ists)\'");
                temp22 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp22, "return of StreamRename, state S296");
                this.Manager.Comment("reaching state \'S366\'");
                goto label4;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S227\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp23;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,LengthZero,NotReplaceIfExists)\'" +
                        "");
                temp23 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3265");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:If StreamName contains any characters invalid for a streamname as specified in [MS-FSCC] section 2.1.5  .");
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp23, "return of StreamRename, state S297");
                this.Manager.Comment("reaching state \'S367\'");
                goto label4;
            }
            throw new InvalidOperationException("never reached");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS16GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S183");
        }
        
        private void SetFileStreamRenameInformationTestCaseS16GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S183");
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS18() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS18");
            this.Manager.Comment("reaching state \'S18\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S79\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp25;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp25 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp25, "return of CreateFile, state S114");
            this.Manager.Comment("reaching state \'S149\'");
            bool temp26;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp26);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp26);
            this.Manager.Comment("reaching state \'S184\'");
            int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS18GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS18GetIfStreamRenameIsSupportedChecker1)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S228\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp27;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,isData,NotReplaceI" +
                        "fExists)\'");
                temp27 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S298\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp27, "return of StreamRename, state S298");
                this.Manager.Comment("reaching state \'S368\'");
                goto label5;
            }
            if ((temp29 == 1)) {
                this.Manager.Comment("reaching state \'S229\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp28;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,LengthZero,NotReplaceIfExists)" +
                        "\'");
                temp28 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3141");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:StreamName is more than 255 Unicode characters in length.");
                this.Manager.Comment("reaching state \'S299\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp28, "return of StreamRename, state S299");
                this.Manager.Comment("reaching state \'S369\'");
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS18GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S184");
        }
        
        private void SetFileStreamRenameInformationTestCaseS18GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S184");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS2() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS2");
            this.Manager.Comment("reaching state \'S2\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp30;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp30 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S106\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp30, "return of CreateFile, state S106");
            this.Manager.Comment("reaching state \'S141\'");
            bool temp31;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp31);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp31);
            this.Manager.Comment("reaching state \'S176\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS2GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS2GetIfStreamRenameIsSupportedChecker1)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S212\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp32;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,ContainsWildcard,NotReplaceIfEx" +
                        "ists)\'");
                temp32 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp32, "return of StreamRename, state S282");
                this.Manager.Comment("reaching state \'S352\'");
                goto label6;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S213\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp33;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,ContainsWildcard,NotReplaceIfE" +
                        "xists)\'");
                temp33 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3266");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename]The operation MUST be failed with STAT" +
                        "US_INVALID_PARAMETER \r\n                    under any of the following conditions" +
                        ":If StreamName contains  any wildcard characters as defined in section 3.1.4.3  " +
                        ".");
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp33, "return of StreamRename, state S283");
                this.Manager.Comment("reaching state \'S353\'");
                goto label6;
            }
            throw new InvalidOperationException("never reached");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS2GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S176");
        }
        
        private void SetFileStreamRenameInformationTestCaseS2GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S176");
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS20() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS20");
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp35;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp35 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp35, "return of CreateFile, state S115");
            this.Manager.Comment("reaching state \'S150\'");
            bool temp36;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp36);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp36);
            this.Manager.Comment("reaching state \'S185\'");
            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS20GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS20GetIfStreamRenameIsSupportedChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S230\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp37;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,LengthZero,NotRepl" +
                        "aceIfExists)\'");
                temp37 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S300\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp37, "return of StreamRename, state S300");
                this.Manager.Comment("reaching state \'S370\'");
                goto label7;
            }
            if ((temp39 == 1)) {
                this.Manager.Comment("reaching state \'S231\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp38;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,ContainsInvalid,ReplaceIfExist" +
                        "s)\'");
                temp38 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3141");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:StreamName is more than 255 Unicode characters in length.");
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp38, "return of StreamRename, state S301");
                this.Manager.Comment("reaching state \'S371\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS20GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S185");
        }
        
        private void SetFileStreamRenameInformationTestCaseS20GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S185");
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS22() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS22");
            this.Manager.Comment("reaching state \'S22\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S81\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp40;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp40 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp40, "return of CreateFile, state S116");
            this.Manager.Comment("reaching state \'S151\'");
            bool temp41;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp41);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp41);
            this.Manager.Comment("reaching state \'S186\'");
            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS22GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS22GetIfStreamRenameIsSupportedChecker1)));
            if ((temp44 == 0)) {
                this.Manager.Comment("reaching state \'S232\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp42;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,LengthZero,NotReplaceIfExists)" +
                        "\'");
                temp42 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp42, "return of StreamRename, state S302");
                this.Manager.Comment("reaching state \'S372\'");
                goto label8;
            }
            if ((temp44 == 1)) {
                this.Manager.Comment("reaching state \'S233\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp43;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,ContainsInvalid,ReplaceIfExists" +
                        ")\'");
                temp43 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3265");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:If StreamName contains any characters invalid for a streamname as specified in [MS-FSCC] section 2.1.5  .");
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp43, "return of StreamRename, state S303");
                this.Manager.Comment("reaching state \'S373\'");
                goto label8;
            }
            throw new InvalidOperationException("never reached");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS22GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S186");
        }
        
        private void SetFileStreamRenameInformationTestCaseS22GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S186");
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS24() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS24");
            this.Manager.Comment("reaching state \'S24\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp45;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp45 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp45, "return of CreateFile, state S117");
            this.Manager.Comment("reaching state \'S152\'");
            bool temp46;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp46);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp46);
            this.Manager.Comment("reaching state \'S187\'");
            int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS24GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS24GetIfStreamRenameIsSupportedChecker1)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S234\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp47;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,isIndexAllocation,NotReplaceIfExists" +
                        ")\'");
                temp47 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp47, "return of StreamRename, state S304");
                this.Manager.Comment("reaching state \'S374\'");
                goto label9;
            }
            if ((temp49 == 1)) {
                this.Manager.Comment("reaching state \'S235\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp48;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,ContainsInvalid,ReplaceIfExist" +
                        "s)\'");
                temp48 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3266");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename]The operation MUST be failed with STAT" +
                        "US_INVALID_PARAMETER \r\n                    under any of the following conditions" +
                        ":If StreamName contains  any wildcard characters as defined in section 3.1.4.3  " +
                        ".");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp48, "return of StreamRename, state S305");
                this.Manager.Comment("reaching state \'S375\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS24GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S187");
        }
        
        private void SetFileStreamRenameInformationTestCaseS24GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S187");
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS26() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS26");
            this.Manager.Comment("reaching state \'S26\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S83\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp50;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp50 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp50, "return of CreateFile, state S118");
            this.Manager.Comment("reaching state \'S153\'");
            bool temp51;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp51);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp51);
            this.Manager.Comment("reaching state \'S188\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS26GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS26GetIfStreamRenameIsSupportedChecker1)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S236\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp52;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,isData,ReplaceIfExists)\'");
                temp52 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp52, "return of StreamRename, state S306");
                this.Manager.Comment("reaching state \'S376\'");
                goto label10;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S237\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp53;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,LengthZero,ReplaceIfExists)\'");
                temp53 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3266");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename]The operation MUST be failed with STAT" +
                        "US_INVALID_PARAMETER \r\n                    under any of the following conditions" +
                        ":If StreamName contains  any wildcard characters as defined in section 3.1.4.3  " +
                        ".");
                this.Manager.Comment("reaching state \'S307\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp53, "return of StreamRename, state S307");
                this.Manager.Comment("reaching state \'S377\'");
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS26GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S188");
        }
        
        private void SetFileStreamRenameInformationTestCaseS26GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S188");
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS28() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS28");
            this.Manager.Comment("reaching state \'S28\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp55;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp55 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp55, "return of CreateFile, state S119");
            this.Manager.Comment("reaching state \'S154\'");
            bool temp56;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp56);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp56);
            this.Manager.Comment("reaching state \'S189\'");
            int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS28GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS28GetIfStreamRenameIsSupportedChecker1)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S238\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp57;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,isData,ReplaceIfExists)\'");
                temp57 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp57, "return of StreamRename, state S308");
                this.Manager.Comment("reaching state \'S378\'");
                goto label11;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S239\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp58;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,ContainsInvalid,ReplaceIfExists)\'");
                temp58 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp58, "return of StreamRename, state S309");
                this.Manager.Comment("reaching state \'S379\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS28GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S189");
        }
        
        private void SetFileStreamRenameInformationTestCaseS28GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S189");
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS30() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS30");
            this.Manager.Comment("reaching state \'S30\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S85\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp60;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp60 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp60, "return of CreateFile, state S120");
            this.Manager.Comment("reaching state \'S155\'");
            bool temp61;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp61);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp61);
            this.Manager.Comment("reaching state \'S190\'");
            int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS30GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS30GetIfStreamRenameIsSupportedChecker1)));
            if ((temp64 == 0)) {
                this.Manager.Comment("reaching state \'S240\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp62;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,isIndexAllocation,ReplaceIfExi" +
                        "sts)\'");
                temp62 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S310\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp62, "return of StreamRename, state S310");
                this.Manager.Comment("reaching state \'S380\'");
                goto label12;
            }
            if ((temp64 == 1)) {
                this.Manager.Comment("reaching state \'S241\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp63;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,LengthZero,NotRepl" +
                        "aceIfExists)\'");
                temp63 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3137");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    The character \"":"" occurs more than three times in NewStreamName.");
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp63, "return of StreamRename, state S311");
                this.Manager.Comment("reaching state \'S381\'");
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS30GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S190");
        }
        
        private void SetFileStreamRenameInformationTestCaseS30GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S190");
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS32() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS32");
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp65;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp65 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp65, "return of CreateFile, state S121");
            this.Manager.Comment("reaching state \'S156\'");
            bool temp66;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp66);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp66);
            this.Manager.Comment("reaching state \'S191\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS32GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS32GetIfStreamRenameIsSupportedChecker1)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S242\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp67;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,isIndexAllocation,ReplaceIfExi" +
                        "sts)\'");
                temp67 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp67, "return of StreamRename, state S312");
                this.Manager.Comment("reaching state \'S382\'");
                goto label13;
            }
            if ((temp69 == 1)) {
                this.Manager.Comment("reaching state \'S243\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp68;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,isIndexAllocation,NotRep" +
                        "laceIfExists)\'");
                temp68 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp68, "return of StreamRename, state S313");
                this.Manager.Comment("reaching state \'S383\'");
                goto label13;
            }
            throw new InvalidOperationException("never reached");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS32GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S191");
        }
        
        private void SetFileStreamRenameInformationTestCaseS32GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S191");
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS34() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS34");
            this.Manager.Comment("reaching state \'S34\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S87\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp70;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp70 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp70, "return of CreateFile, state S122");
            this.Manager.Comment("reaching state \'S157\'");
            bool temp71;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp71);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp71);
            this.Manager.Comment("reaching state \'S192\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS34GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS34GetIfStreamRenameIsSupportedChecker1)));
            if ((temp74 == 0)) {
                this.Manager.Comment("reaching state \'S244\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp72;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,isIndexAllocation," +
                        "ReplaceIfExists)\'");
                temp72 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp72, "return of StreamRename, state S314");
                this.Manager.Comment("reaching state \'S384\'");
                goto label14;
            }
            if ((temp74 == 1)) {
                this.Manager.Comment("reaching state \'S245\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp73;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,ContainsInvalid,NotRepla" +
                        "ceIfExists)\'");
                temp73 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp73, "return of StreamRename, state S315");
                this.Manager.Comment("reaching state \'S385\'");
                goto label14;
            }
            throw new InvalidOperationException("never reached");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS34GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S192");
        }
        
        private void SetFileStreamRenameInformationTestCaseS34GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S192");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS36() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S88\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp75;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp75 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp75, "return of CreateFile, state S123");
            this.Manager.Comment("reaching state \'S158\'");
            bool temp76;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp76);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp76);
            this.Manager.Comment("reaching state \'S193\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS36GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS36GetIfStreamRenameIsSupportedChecker1)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S246\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp77;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,LengthZero,ReplaceIfExists)\'");
                temp77 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp77, "return of StreamRename, state S316");
                this.Manager.Comment("reaching state \'S386\'");
                goto label15;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S247\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp78;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,ContainsWildcard,NotRepl" +
                        "aceIfExists)\'");
                temp78 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp78, "return of StreamRename, state S317");
                this.Manager.Comment("reaching state \'S387\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS36GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S193");
        }
        
        private void SetFileStreamRenameInformationTestCaseS36GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S193");
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS38() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS38");
            this.Manager.Comment("reaching state \'S38\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S89\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp80;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp80 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp80, "return of CreateFile, state S124");
            this.Manager.Comment("reaching state \'S159\'");
            bool temp81;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp81);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp81);
            this.Manager.Comment("reaching state \'S194\'");
            int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS38GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS38GetIfStreamRenameIsSupportedChecker1)));
            if ((temp84 == 0)) {
                this.Manager.Comment("reaching state \'S248\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp82;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,ContainsWildcard,Replace" +
                        "IfExists)\'");
                temp82 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S318\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp82, "return of StreamRename, state S318");
                this.Manager.Comment("reaching state \'S388\'");
                goto label16;
            }
            if ((temp84 == 1)) {
                this.Manager.Comment("reaching state \'S249\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp83;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,isIndexAllocation,NotReplaceIfExists" +
                        ")\'");
                temp83 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3143");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_OBJECT_TYPE_MISMATCH if either of the following conditions are true:
                    Open.Stream.StreamType is DataStream and StreamTypeName is not the Unicode string \""$DATA"".");
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("checking step \'return StreamRename/OBJECT_TYPE_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_TYPE_MISMATCH, temp83, "return of StreamRename, state S319");
                this.Manager.Comment("reaching state \'S389\'");
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS38GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S194");
        }
        
        private void SetFileStreamRenameInformationTestCaseS38GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S194");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS4() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS4");
            this.Manager.Comment("reaching state \'S4\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp85;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp85 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp85, "return of CreateFile, state S107");
            this.Manager.Comment("reaching state \'S142\'");
            bool temp86;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp86);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp86);
            this.Manager.Comment("reaching state \'S177\'");
            int temp89 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS4GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS4GetIfStreamRenameIsSupportedChecker1)));
            if ((temp89 == 0)) {
                this.Manager.Comment("reaching state \'S214\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp87;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,ContainsWildcard,NotReplaceIfExist" +
                        "s)\'");
                temp87 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S284\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp87, "return of StreamRename, state S284");
                this.Manager.Comment("reaching state \'S354\'");
                goto label17;
            }
            if ((temp89 == 1)) {
                this.Manager.Comment("reaching state \'S215\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp88;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,ContainsWildcard,NotReplaceIfE" +
                        "xists)\'");
                temp88 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3141");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:StreamName is more than 255 Unicode characters in length.");
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp88, "return of StreamRename, state S285");
                this.Manager.Comment("reaching state \'S355\'");
                goto label17;
            }
            throw new InvalidOperationException("never reached");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS4GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S177");
        }
        
        private void SetFileStreamRenameInformationTestCaseS4GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S177");
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS40() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS40");
            this.Manager.Comment("reaching state \'S40\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S90\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp90;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp90 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp90, "return of CreateFile, state S125");
            this.Manager.Comment("reaching state \'S160\'");
            bool temp91;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp91);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp91);
            this.Manager.Comment("reaching state \'S195\'");
            int temp94 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS40GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS40GetIfStreamRenameIsSupportedChecker1)));
            if ((temp94 == 0)) {
                this.Manager.Comment("reaching state \'S250\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp92;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,isIndexAllocation,Replac" +
                        "eIfExists)\'");
                temp92 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp92, "return of StreamRename, state S320");
                this.Manager.Comment("reaching state \'S390\'");
                goto label18;
            }
            if ((temp94 == 1)) {
                this.Manager.Comment("reaching state \'S251\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp93;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,isData,NotReplaceIfExists)\'");
                temp93 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3143");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_OBJECT_TYPE_MISMATCH if either of the following conditions are true:
                    Open.Stream.StreamType is DataStream and StreamTypeName is not the Unicode string \""$DATA"".");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("checking step \'return StreamRename/OBJECT_TYPE_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_TYPE_MISMATCH, temp93, "return of StreamRename, state S321");
                this.Manager.Comment("reaching state \'S391\'");
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS40GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S195");
        }
        
        private void SetFileStreamRenameInformationTestCaseS40GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S195");
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS42() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS42");
            this.Manager.Comment("reaching state \'S42\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S91\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp95;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp95 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp95, "return of CreateFile, state S126");
            this.Manager.Comment("reaching state \'S161\'");
            bool temp96;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp96);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp96);
            this.Manager.Comment("reaching state \'S196\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS42GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS42GetIfStreamRenameIsSupportedChecker1)));
            if ((temp99 == 0)) {
                this.Manager.Comment("reaching state \'S252\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp97;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,LengthZero,ReplaceIfExists)\'");
                temp97 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S322\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp97, "return of StreamRename, state S322");
                this.Manager.Comment("reaching state \'S392\'");
                goto label19;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S253\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp98;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,isData,NotReplaceIfExists)\'");
                temp98 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3266");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename]The operation MUST be failed with STAT" +
                        "US_INVALID_PARAMETER \r\n                    under any of the following conditions" +
                        ":If StreamName contains  any wildcard characters as defined in section 3.1.4.3  " +
                        ".");
                this.Manager.Comment("reaching state \'S323\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp98, "return of StreamRename, state S323");
                this.Manager.Comment("reaching state \'S393\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS42GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S196");
        }
        
        private void SetFileStreamRenameInformationTestCaseS42GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S196");
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS44() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S92\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp100;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp100 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp100, "return of CreateFile, state S127");
            this.Manager.Comment("reaching state \'S162\'");
            bool temp101;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp101);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp101);
            this.Manager.Comment("reaching state \'S197\'");
            int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS44GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS44GetIfStreamRenameIsSupportedChecker1)));
            if ((temp104 == 0)) {
                this.Manager.Comment("reaching state \'S254\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp102;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,LengthZero,NotReplaceIfExists)" +
                        "\'");
                temp102 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp102, "return of StreamRename, state S324");
                this.Manager.Comment("reaching state \'S394\'");
                goto label20;
            }
            if ((temp104 == 1)) {
                this.Manager.Comment("reaching state \'S255\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp103;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,isData,NotReplaceIfExists)\'");
                temp103 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3136");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as fol" +
                        "lows:]\r\n                    The operation MUST be failed with STATUS_INVALID_PAR" +
                        "AMETER under any of the following conditions:The last character of NewStreamName" +
                        " is \\\":\".");
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp103, "return of StreamRename, state S325");
                this.Manager.Comment("reaching state \'S395\'");
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS44GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S197");
        }
        
        private void SetFileStreamRenameInformationTestCaseS44GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S197");
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS46() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS46");
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S93\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp105;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp105 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp105, "return of CreateFile, state S128");
            this.Manager.Comment("reaching state \'S163\'");
            bool temp106;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp106);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp106);
            this.Manager.Comment("reaching state \'S198\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS46GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS46GetIfStreamRenameIsSupportedChecker1)));
            if ((temp109 == 0)) {
                this.Manager.Comment("reaching state \'S256\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp107;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,isData,NotReplaceIfExists)\'");
                temp107 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp107, "return of StreamRename, state S326");
                this.Manager.Comment("reaching state \'S396\'");
                goto label21;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S257\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp108;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,isData,ReplaceIfEx" +
                        "ists)\'");
                temp108 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3137");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    The character \"":"" occurs more than three times in NewStreamName.");
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp108, "return of StreamRename, state S327");
                this.Manager.Comment("reaching state \'S397\'");
                goto label21;
            }
            throw new InvalidOperationException("never reached");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS46GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S198");
        }
        
        private void SetFileStreamRenameInformationTestCaseS46GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S198");
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS48() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS48");
            this.Manager.Comment("reaching state \'S48\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S94\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp110;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp110 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp110, "return of CreateFile, state S129");
            this.Manager.Comment("reaching state \'S164\'");
            bool temp111;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp111);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp111);
            this.Manager.Comment("reaching state \'S199\'");
            int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS48GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS48GetIfStreamRenameIsSupportedChecker1)));
            if ((temp114 == 0)) {
                this.Manager.Comment("reaching state \'S258\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp112;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,isData,ReplaceIfExists)\'");
                temp112 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp112, "return of StreamRename, state S328");
                this.Manager.Comment("reaching state \'S398\'");
                goto label22;
            }
            if ((temp114 == 1)) {
                this.Manager.Comment("reaching state \'S259\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp113;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,isData,ReplaceIfExists)\'");
                temp113 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3141");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:StreamName is more than 255 Unicode characters in length.");
                this.Manager.Comment("reaching state \'S329\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp113, "return of StreamRename, state S329");
                this.Manager.Comment("reaching state \'S399\'");
                goto label22;
            }
            throw new InvalidOperationException("never reached");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS48GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S199");
        }
        
        private void SetFileStreamRenameInformationTestCaseS48GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S199");
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS50() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS50");
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp115;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp115 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp115, "return of CreateFile, state S130");
            this.Manager.Comment("reaching state \'S165\'");
            bool temp116;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp116);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp116);
            this.Manager.Comment("reaching state \'S200\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS50GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS50GetIfStreamRenameIsSupportedChecker1)));
            if ((temp119 == 0)) {
                this.Manager.Comment("reaching state \'S260\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp117;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,ContainsWildcard,ReplaceIfExis" +
                        "ts)\'");
                temp117 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S330\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp117, "return of StreamRename, state S330");
                this.Manager.Comment("reaching state \'S400\'");
                goto label23;
            }
            if ((temp119 == 1)) {
                this.Manager.Comment("reaching state \'S261\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp118;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,ContainsWildcard,NotReplaceIfEx" +
                        "ists)\'");
                temp118 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3265");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:If StreamName contains any characters invalid for a streamname as specified in [MS-FSCC] section 2.1.5  .");
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp118, "return of StreamRename, state S331");
                this.Manager.Comment("reaching state \'S401\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS50GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S200");
        }
        
        private void SetFileStreamRenameInformationTestCaseS50GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S200");
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS52() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS52");
            this.Manager.Comment("reaching state \'S52\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp120;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp120 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp120, "return of CreateFile, state S131");
            this.Manager.Comment("reaching state \'S166\'");
            bool temp121;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp121);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp121);
            this.Manager.Comment("reaching state \'S201\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS52GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS52GetIfStreamRenameIsSupportedChecker1)));
            if ((temp124 == 0)) {
                this.Manager.Comment("reaching state \'S262\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp122;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,ContainsWildcard,N" +
                        "otReplaceIfExists)\'");
                temp122 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp122, "return of StreamRename, state S332");
                this.Manager.Comment("reaching state \'S402\'");
                goto label24;
            }
            if ((temp124 == 1)) {
                this.Manager.Comment("reaching state \'S263\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp123;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,ContainsWildcard,ReplaceIfExists)\'");
                temp123 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp123, "return of StreamRename, state S333");
                this.Manager.Comment("reaching state \'S403\'");
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS52GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S201");
        }
        
        private void SetFileStreamRenameInformationTestCaseS52GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S201");
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS54() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS54");
            this.Manager.Comment("reaching state \'S54\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S97\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp125;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp125 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp125, "return of CreateFile, state S132");
            this.Manager.Comment("reaching state \'S167\'");
            bool temp126;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp126);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp126);
            this.Manager.Comment("reaching state \'S202\'");
            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS54GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS54GetIfStreamRenameIsSupportedChecker1)));
            if ((temp129 == 0)) {
                this.Manager.Comment("reaching state \'S264\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp127;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,ContainsInvalid,Re" +
                        "placeIfExists)\'");
                temp127 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp127, "return of StreamRename, state S334");
                this.Manager.Comment("reaching state \'S404\'");
                goto label25;
            }
            if ((temp129 == 1)) {
                this.Manager.Comment("reaching state \'S265\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp128;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,isData,NotReplaceIfExist" +
                        "s)\'");
                temp128 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3143");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_OBJECT_TYPE_MISMATCH if either of the following conditions are true:
                    Open.Stream.StreamType is DataStream and StreamTypeName is not the Unicode string \""$DATA"".");
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return StreamRename/OBJECT_TYPE_MISMATCH\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.OBJECT_TYPE_MISMATCH, temp128, "return of StreamRename, state S335");
                this.Manager.Comment("reaching state \'S405\'");
                goto label25;
            }
            throw new InvalidOperationException("never reached");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS54GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S202");
        }
        
        private void SetFileStreamRenameInformationTestCaseS54GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S202");
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS56() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS56");
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp130;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp130 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp130, "return of CreateFile, state S133");
            this.Manager.Comment("reaching state \'S168\'");
            bool temp131;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp131);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp131);
            this.Manager.Comment("reaching state \'S203\'");
            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS56GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS56GetIfStreamRenameIsSupportedChecker1)));
            if ((temp134 == 0)) {
                this.Manager.Comment("reaching state \'S266\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp132;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,ContainsInvalid,NotReplaceIfExists)\'" +
                        "");
                temp132 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp132, "return of StreamRename, state S336");
                this.Manager.Comment("reaching state \'S406\'");
                goto label26;
            }
            if ((temp134 == 1)) {
                this.Manager.Comment("reaching state \'S267\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp133;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,LengthZero,ReplaceIfExis" +
                        "ts)\'");
                temp133 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return StreamRename/SUCCESS\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp133, "return of StreamRename, state S337");
                this.Manager.Comment("reaching state \'S407\'");
                goto label26;
            }
            throw new InvalidOperationException("never reached");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS56GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S203");
        }
        
        private void SetFileStreamRenameInformationTestCaseS56GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S203");
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS58() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS58");
            this.Manager.Comment("reaching state \'S58\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp135;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp135 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp135, "return of CreateFile, state S134");
            this.Manager.Comment("reaching state \'S169\'");
            bool temp136;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp136);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp136);
            this.Manager.Comment("reaching state \'S204\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS58GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS58GetIfStreamRenameIsSupportedChecker1)));
            if ((temp139 == 0)) {
                this.Manager.Comment("reaching state \'S268\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp137;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,isIndexAllocation,NotReplaceIfExis" +
                        "ts)\'");
                temp137 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S338\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp137, "return of StreamRename, state S338");
                this.Manager.Comment("reaching state \'S408\'");
                goto label27;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S269\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp138;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,isIndexAllocation,NotReplaceIf" +
                        "Exists)\'");
                temp138 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3141");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:StreamName is more than 255 Unicode characters in length.");
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp138, "return of StreamRename, state S339");
                this.Manager.Comment("reaching state \'S409\'");
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS58GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S204");
        }
        
        private void SetFileStreamRenameInformationTestCaseS58GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S204");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS6() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS6");
            this.Manager.Comment("reaching state \'S6\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp140;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp140 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S108\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp140, "return of CreateFile, state S108");
            this.Manager.Comment("reaching state \'S143\'");
            bool temp141;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp141);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp141);
            this.Manager.Comment("reaching state \'S178\'");
            int temp144 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS6GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS6GetIfStreamRenameIsSupportedChecker1)));
            if ((temp144 == 0)) {
                this.Manager.Comment("reaching state \'S216\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp142;
                this.Manager.Comment("executing step \'call StreamRename(IsMore255Unicode,ContainsWildcard,NotReplaceIfE" +
                        "xists)\'");
                temp142 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsMore255Unicode, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp142, "return of StreamRename, state S286");
                this.Manager.Comment("reaching state \'S356\'");
                goto label28;
            }
            if ((temp144 == 1)) {
                this.Manager.Comment("reaching state \'S217\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp143;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,ContainsWildcard,N" +
                        "otReplaceIfExists)\'");
                temp143 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3137");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    The character \"":"" occurs more than three times in NewStreamName.");
                this.Manager.Comment("reaching state \'S287\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp143, "return of StreamRename, state S287");
                this.Manager.Comment("reaching state \'S357\'");
                goto label28;
            }
            throw new InvalidOperationException("never reached");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS6GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S178");
        }
        
        private void SetFileStreamRenameInformationTestCaseS6GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S178");
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS60() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS60");
            this.Manager.Comment("reaching state \'S60\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp145;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp145 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp145, "return of CreateFile, state S135");
            this.Manager.Comment("reaching state \'S170\'");
            bool temp146;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp146);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp146);
            this.Manager.Comment("reaching state \'S205\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS60GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS60GetIfStreamRenameIsSupportedChecker1)));
            if ((temp149 == 0)) {
                this.Manager.Comment("reaching state \'S270\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp147;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,LengthZero,NotReplaceIfExists)\'" +
                        "");
                temp147 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp147, "return of StreamRename, state S340");
                this.Manager.Comment("reaching state \'S410\'");
                goto label29;
            }
            if ((temp149 == 1)) {
                this.Manager.Comment("reaching state \'S271\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp148;
                this.Manager.Comment("executing step \'call StreamRename(LengthZero,LengthZero,NotReplaceIfExists)\'");
                temp148 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3140");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:Both StreamName and StreamTypeName are zero-length.");
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp148, "return of StreamRename, state S341");
                this.Manager.Comment("reaching state \'S411\'");
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS60GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S205");
        }
        
        private void SetFileStreamRenameInformationTestCaseS60GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S205");
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS62() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS62");
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp150;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp150 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S136\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp150, "return of CreateFile, state S136");
            this.Manager.Comment("reaching state \'S171\'");
            bool temp151;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp151);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp151);
            this.Manager.Comment("reaching state \'S206\'");
            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS62GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS62GetIfStreamRenameIsSupportedChecker1)));
            if ((temp154 == 0)) {
                this.Manager.Comment("reaching state \'S272\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp152;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,isData,NotReplaceIfExist" +
                        "s)\'");
                temp152 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp152, "return of StreamRename, state S342");
                this.Manager.Comment("reaching state \'S412\'");
                goto label30;
            }
            if ((temp154 == 1)) {
                this.Manager.Comment("reaching state \'S273\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp153;
                this.Manager.Comment("executing step \'call StreamRename(ContainsWildcard,isIndexAllocation,ReplaceIfExi" +
                        "sts)\'");
                temp153 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsWildcard, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3266");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename]The operation MUST be failed with STAT" +
                        "US_INVALID_PARAMETER \r\n                    under any of the following conditions" +
                        ":If StreamName contains  any wildcard characters as defined in section 3.1.4.3  " +
                        ".");
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp153, "return of StreamRename, state S343");
                this.Manager.Comment("reaching state \'S413\'");
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS62GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S206");
        }
        
        private void SetFileStreamRenameInformationTestCaseS62GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S206");
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS64() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS64");
            this.Manager.Comment("reaching state \'S64\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp155;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp155 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp155, "return of CreateFile, state S137");
            this.Manager.Comment("reaching state \'S172\'");
            bool temp156;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp156);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp156);
            this.Manager.Comment("reaching state \'S207\'");
            int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS64GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS64GetIfStreamRenameIsSupportedChecker1)));
            if ((temp159 == 0)) {
                this.Manager.Comment("reaching state \'S274\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp157;
                this.Manager.Comment("executing step \'call StreamRename(IsCaseInsensitiveMatch,LengthZero,ReplaceIfExis" +
                        "ts)\'");
                temp157 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.IsCaseInsensitiveMatch, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.LengthZero, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp157, "return of StreamRename, state S344");
                this.Manager.Comment("reaching state \'S414\'");
                goto label31;
            }
            if ((temp159 == 1)) {
                this.Manager.Comment("reaching state \'S275\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp158;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,isData,ReplaceIfExists)\'");
                temp158 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3265");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:If StreamName contains any characters invalid for a streamname as specified in [MS-FSCC] section 2.1.5  .");
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp158, "return of StreamRename, state S345");
                this.Manager.Comment("reaching state \'S415\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS64GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S207");
        }
        
        private void SetFileStreamRenameInformationTestCaseS64GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S207");
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS66() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS66");
            this.Manager.Comment("reaching state \'S66\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp160;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp160 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S138\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp160, "return of CreateFile, state S138");
            this.Manager.Comment("reaching state \'S173\'");
            bool temp161;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp161);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp161);
            this.Manager.Comment("reaching state \'S208\'");
            int temp164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS66GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS66GetIfStreamRenameIsSupportedChecker1)));
            if ((temp164 == 0)) {
                this.Manager.Comment("reaching state \'S276\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp162;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,isIndexAllocation,ReplaceIfExis" +
                        "ts)\'");
                temp162 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S346\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp162, "return of StreamRename, state S346");
                this.Manager.Comment("reaching state \'S416\'");
                goto label32;
            }
            if ((temp164 == 1)) {
                this.Manager.Comment("reaching state \'S277\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp163;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,ContainsInvalid,No" +
                        "tReplaceIfExists)\'");
                temp163 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3137");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    The character \"":"" occurs more than three times in NewStreamName.");
                this.Manager.Comment("reaching state \'S347\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp163, "return of StreamRename, state S347");
                this.Manager.Comment("reaching state \'S417\'");
                goto label32;
            }
            throw new InvalidOperationException("never reached");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS66GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S208");
        }
        
        private void SetFileStreamRenameInformationTestCaseS66GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S208");
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS68() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS68");
            this.Manager.Comment("reaching state \'S68\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp165;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp165 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp165, "return of CreateFile, state S139");
            this.Manager.Comment("reaching state \'S174\'");
            bool temp166;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp166);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp166);
            this.Manager.Comment("reaching state \'S209\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS68GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS68GetIfStreamRenameIsSupportedChecker1)));
            if ((temp169 == 0)) {
                this.Manager.Comment("reaching state \'S278\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp167;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,isData,ReplaceIfExists)\'");
                temp167 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isData, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S348\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp167, "return of StreamRename, state S348");
                this.Manager.Comment("reaching state \'S418\'");
                goto label33;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S279\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp168;
                this.Manager.Comment("executing step \'call StreamRename(EndWithColon,ContainsInvalid,ReplaceIfExists)\'");
                temp168 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.EndWithColon, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(0)));
                this.Manager.Checkpoint("MS-FSA_R3136");
                this.Manager.Checkpoint("[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as fol" +
                        "lows:]\r\n                    The operation MUST be failed with STATUS_INVALID_PAR" +
                        "AMETER under any of the following conditions:The last character of NewStreamName" +
                        " is \\\":\".");
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp168, "return of StreamRename, state S349");
                this.Manager.Comment("reaching state \'S419\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS68GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S209");
        }
        
        private void SetFileStreamRenameInformationTestCaseS68GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S209");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Fsa)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.SetFileInformation)]
        public void SetFileStreamRenameInformationTestCaseS8() {
            this.Manager.BeginTest("SetFileStreamRenameInformationTestCaseS8");
            this.Manager.Comment("reaching state \'S8\'");
            this.Manager.Comment("executing step \'call FsaInitial()\'");
            this.IFSAAdapterInstance.FsaInitial();
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return FsaInitial\'");
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp170;
            this.Manager.Comment("executing step \'call CreateFile(NORMAL,NON_DIRECTORY_FILE,DATA,DELETE,FILE_SHARE_" +
                    "WRITE,OPEN_IF,StreamIsFound,IsNotSymbolicLink,DataFile,PathNameValid)\'");
            temp170 = this.IFSAAdapterInstance.CreateFile(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAttribute.NORMAL, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateOptions.NON_DIRECTORY_FILE, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamTypeNameToOPen)(1)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileAccess.DELETE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ShareAccess.FILE_SHARE_WRITE, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.CreateDisposition.OPEN_IF, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.StreamFoundType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.SymbolicLinkType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileType)(0)), Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.FileNameStatus.PathNameValid);
            this.Manager.Checkpoint("MS-FSA_R405");
            this.Manager.Checkpoint(@"[In Application Requests an Open of a File , Pseudocode for the operation is as follows:
                        Phase 6 -- Location of file:] Pseudocode for this search:For i = 1 to n-1:
                        If Open.GrantedAccess.FILE_TRAVERSE is not set and AccessCheck( SecurityContext, Link.File.SecurityDescriptor, FILE_TRAVERSE ) 
                        returns FALSE, the operation is not  failed with STATUS_ACCESS_DENIED in Windows.");
            this.Manager.Checkpoint("MS-FSA_R475");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return:CreateAction set to FILE_CREATED.");
            this.Manager.Checkpoint("MS-FSA_R474");
            this.Manager.Checkpoint("[In Creation of a New File,Pseudocode for the operation is as follows:]\r\n        " +
                    "        The object store MUST return :Status set to STATUS_SUCCESS.");
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return CreateFile/SUCCESS\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus)(0)), temp170, "return of CreateFile, state S109");
            this.Manager.Comment("reaching state \'S144\'");
            bool temp171;
            this.Manager.Comment("executing step \'call GetIfStreamRenameIsSupported(out _)\'");
            this.IFSAAdapterInstance.GetIfStreamRenameIsSupported(out temp171);
            this.Manager.AddReturn(GetIfStreamRenameIsSupportedInfo, null, temp171);
            this.Manager.Comment("reaching state \'S179\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS8GetIfStreamRenameIsSupportedChecker)), new ExpectedReturn(SetFileStreamRenameInformationTestCase.GetIfStreamRenameIsSupportedInfo, null, new GetIfStreamRenameIsSupportedDelegate1(this.SetFileStreamRenameInformationTestCaseS8GetIfStreamRenameIsSupportedChecker1)));
            if ((temp174 == 0)) {
                this.Manager.Comment("reaching state \'S218\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp172;
                this.Manager.Comment("executing step \'call StreamRename(ContainsInvalid,ContainsInvalid,NotReplaceIfExi" +
                        "sts)\'");
                temp172 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ContainsInvalid, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("[TestInfo] If stream rename is not supported by the object store, it SHOULD return STATUS_NO" +
                        "T_SUPPORTED.");
                this.Manager.Comment("reaching state \'S288\'");
                this.Manager.Comment("checking step \'return StreamRename/NOT_SUPPORTED\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.NOT_SUPPORTED, temp172, "return of StreamRename, state S288");
                this.Manager.Comment("reaching state \'S358\'");
                goto label34;
            }
            if ((temp174 == 1)) {
                this.Manager.Comment("reaching state \'S219\'");
                Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus temp173;
                this.Manager.Comment("executing step \'call StreamRename(ColonOccurMoreThanThreeTimes,isIndexAllocation," +
                        "NotReplaceIfExists)\'");
                temp173 = this.IFSAAdapterInstance.StreamRename(Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.ColonOccurMoreThanThreeTimes, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.InputBufferFileName.isIndexAllocation, ((Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.ReplacementType)(1)));
                this.Manager.Checkpoint("MS-FSA_R3137");
                this.Manager.Checkpoint(@"[In Algorithm for Performing Stream Rename,Pseudocode for the algorithm is as follows:]
                    The operation MUST be failed with STATUS_INVALID_PARAMETER under any of the following conditions:
                    The character \"":"" occurs more than three times in NewStreamName.");
                this.Manager.Comment("reaching state \'S289\'");
                this.Manager.Comment("checking step \'return StreamRename/INVALID_PARAMETER\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.FSA.Adapter.MessageStatus.INVALID_PARAMETER, temp173, "return of StreamRename, state S289");
                this.Manager.Comment("reaching state \'S359\'");
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void SetFileStreamRenameInformationTestCaseS8GetIfStreamRenameIsSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S179");
        }
        
        private void SetFileStreamRenameInformationTestCaseS8GetIfStreamRenameIsSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return GetIfStreamRenameIsSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of GetIfStreamRenameIsSupported, state S179");
        }
        #endregion
    }
}
