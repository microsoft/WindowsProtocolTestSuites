// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ReplayFileOperationTestCase : PtfTestClassBase {
        
        public ReplayFileOperationTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void FileOperationResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c);
        
        public delegate void PreConstraintDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.EventInfo FileOperationResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter), "FileOperationResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter IReplayAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> c1;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig> v2;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IReplayAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.IReplayAdapter))));
            this.Manager.Subscribe(FileOperationResponseInfo, this.IReplayAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("c1");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>("v2");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS0() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp0);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp0, "c of ReadConfig, state S1");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S2\'");
            int temp1 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp1 == 0)) {
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Write,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S13\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S14\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker)));
                }
                goto label0;
            }
            if ((temp1 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label0;
            }
            if ((temp1 == 2)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Write,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S5\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker2))) != -1)) {
                    this.Manager.Comment("reaching state \'S6\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker2)));
                }
                goto label0;
            }
            if ((temp1 == 3)) {
                this.Manager.Comment("reaching state \'S7\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,IoCtl,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S9\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker3))) != -1)) {
                    ReplayFileOperationTestCaseS10();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker3)));
                }
                goto label0;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
        label0:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS0FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S13");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S13");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS15() {
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Write,ChannelSequen" +
                    "ceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
            this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
            this.Manager.Comment("reaching state \'S16\'");
            this.Manager.Comment("checking step \'return FileOperationRequest\'");
            this.Manager.Comment("reaching state \'S17\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker1))) != -1)) {
                ReplayFileOperationTestCaseS18();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS0FileOperationResponseChecker1)));
            }
        }
        
        private void ReplayFileOperationTestCaseS0FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S17");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S17");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS18() {
            this.Manager.Comment("reaching state \'S18\'");
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS0FileOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S5");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S5");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS0FileOperationResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S9");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS10() {
            this.Manager.Comment("reaching state \'S10\'");
        }
        #endregion
        
        #region Test Starting in S1001
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1001() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1001");
            this.Manager.Comment("reaching state \'S1001\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp2;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp2);
            this.Manager.Comment("reaching state \'S1002\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp2, "c of ReadConfig, state S1002");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1003\'");
            int temp3 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp3 == 0)) {
                this.Manager.Comment("reaching state \'S1004\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1005\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1006\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Read,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1007\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1008\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker)));
                }
                goto label1;
            }
            if ((temp3 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label1;
            }
            if ((temp3 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label1;
            }
            if ((temp3 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label1;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1003\'.");
        label1:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1001FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1008");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1008");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS967() {
            this.Manager.Comment("reaching state \'S967\'");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS32() {
            this.Manager.Comment("reaching state \'S32\'");
            this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,ChannelSequen" +
                    "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
            this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return FileOperationRequest\'");
            this.Manager.Comment("reaching state \'S34\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker1))) != -1)) {
                ReplayFileOperationTestCaseS35();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker1)));
            }
        }
        
        private void ReplayFileOperationTestCaseS1001FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S34");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS35() {
            this.Manager.Comment("reaching state \'S35\'");
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS45() {
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Write,ChannelSequen" +
                    "ceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
            this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
            this.Manager.Comment("reaching state \'S46\'");
            this.Manager.Comment("checking step \'return FileOperationRequest\'");
            this.Manager.Comment("reaching state \'S47\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker2))) != -1)) {
                ReplayFileOperationTestCaseS48();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1001FileOperationResponseChecker2)));
            }
        }
        
        private void ReplayFileOperationTestCaseS1001FileOperationResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S47");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S47");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS48() {
            this.Manager.Comment("reaching state \'S48\'");
        }
        #endregion
        
        #region Test Starting in S1009
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1009() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1009");
            this.Manager.Comment("reaching state \'S1009\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp4;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp4);
            this.Manager.Comment("reaching state \'S1010\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp4, "c of ReadConfig, state S1010");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1011\'");
            int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
            if ((temp5 == 0)) {
                this.Manager.Comment("reaching state \'S1012\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1013\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1014\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Read,ChannelSequence" +
                        "BoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1015\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1016\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1009FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS958();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1009FileOperationResponseChecker)));
                }
                goto label2;
            }
            if ((temp5 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label2;
            }
            if ((temp5 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label2;
            }
            if ((temp5 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label2;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1011\'.");
        label2:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1009FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1016");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1016");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS958() {
            this.Manager.Comment("reaching state \'S958\'");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1017
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1017() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1017");
            this.Manager.Comment("reaching state \'S1017\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp6;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp6);
            this.Manager.Comment("reaching state \'S1018\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp6, "c of ReadConfig, state S1018");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1019\'");
            int temp7 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S1020\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1021\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1022\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Read,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParamete" +
                        "rs)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1023\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1024\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1017FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1017FileOperationResponseChecker)));
                }
                goto label3;
            }
            if ((temp7 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label3;
            }
            if ((temp7 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label3;
            }
            if ((temp7 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label3;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1019\'.");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1017FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1024");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1024");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1025
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1025() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1025");
            this.Manager.Comment("reaching state \'S1025\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp8);
            this.Manager.Comment("reaching state \'S1026\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp8, "c of ReadConfig, state S1026");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1027\'");
            int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S1028\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1029\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1030\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Read,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)" +
                        "\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1031\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1032\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1025FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1025FileOperationResponseChecker)));
                }
                goto label4;
            }
            if ((temp9 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label4;
            }
            if ((temp9 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label4;
            }
            if ((temp9 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label4;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1027\'.");
        label4:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1025FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1032");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1032");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1033
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1033() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1033");
            this.Manager.Comment("reaching state \'S1033\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp10;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp10);
            this.Manager.Comment("reaching state \'S1034\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp10, "c of ReadConfig, state S1034");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1035\'");
            int temp11 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S1036\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1037\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1038\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Read,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1039\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1040\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1033FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1033FileOperationResponseChecker)));
                }
                goto label5;
            }
            if ((temp11 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label5;
            }
            if ((temp11 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label5;
            }
            if ((temp11 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label5;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1035\'.");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1033FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1040");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1040");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1041
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1041() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1041");
            this.Manager.Comment("reaching state \'S1041\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp12);
            this.Manager.Comment("reaching state \'S1042\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp12, "c of ReadConfig, state S1042");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1043\'");
            int temp13 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
            if ((temp13 == 0)) {
                this.Manager.Comment("reaching state \'S1044\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1045\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1046\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Read,InvalidChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1047\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1048\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1041FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS976();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1041FileOperationResponseChecker)));
                }
                goto label6;
            }
            if ((temp13 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label6;
            }
            if ((temp13 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label6;
            }
            if ((temp13 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label6;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1043\'.");
        label6:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1041FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1048");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1048");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS976() {
            this.Manager.Comment("reaching state \'S976\'");
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1049
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1049() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1049");
            this.Manager.Comment("reaching state \'S1049\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp14;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp14);
            this.Manager.Comment("reaching state \'S1050\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp14, "c of ReadConfig, state S1050");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1051\'");
            int temp15 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
            if ((temp15 == 0)) {
                this.Manager.Comment("reaching state \'S1052\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1053\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1054\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Read,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1055\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1056\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1049FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1049FileOperationResponseChecker)));
                }
                goto label7;
            }
            if ((temp15 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label7;
            }
            if ((temp15 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label7;
            }
            if ((temp15 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label7;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1051\'.");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1049FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1056");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1056");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1057
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1057() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1057");
            this.Manager.Comment("reaching state \'S1057\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp16;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp16);
            this.Manager.Comment("reaching state \'S1058\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp16, "c of ReadConfig, state S1058");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1059\'");
            int temp17 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)));
            if ((temp17 == 0)) {
                this.Manager.Comment("reaching state \'S1060\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1061\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1062\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Read,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1063\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1064\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1057FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1057FileOperationResponseChecker)));
                }
                goto label8;
            }
            if ((temp17 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label8;
            }
            if ((temp17 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label8;
            }
            if ((temp17 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label8;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1059\'.");
        label8:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1057FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1064");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1064");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS106() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS106");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp18;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp18);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp18, "c of ReadConfig, state S107");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S108\'");
            int temp19 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S111\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Write,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S112\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S113\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS106FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS106FileOperationResponseChecker)));
                }
                goto label9;
            }
            if ((temp19 == 1)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Read,InvalidChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S118\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS106FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S119\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS106FileOperationResponseChecker1)));
                }
                goto label9;
            }
            if ((temp19 == 2)) {
                ReplayFileOperationTestCaseS15();
                goto label9;
            }
            if ((temp19 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label9;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S108\'.");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS106FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S113");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S113");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS44() {
            this.Manager.Comment("reaching state \'S44\'");
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS106FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S118");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1065
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1065() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1065");
            this.Manager.Comment("reaching state \'S1065\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp20;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp20);
            this.Manager.Comment("reaching state \'S1066\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp20, "c of ReadConfig, state S1066");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1067\'");
            int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S1068\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1069\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1070\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Read,ChannelSequence" +
                        "IncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1071\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1072\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1065FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS958();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1065FileOperationResponseChecker)));
                }
                goto label10;
            }
            if ((temp21 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label10;
            }
            if ((temp21 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label10;
            }
            if ((temp21 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label10;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1067\'.");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1065FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1072");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1072");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1073
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1073() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1073");
            this.Manager.Comment("reaching state \'S1073\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp22;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp22);
            this.Manager.Comment("reaching state \'S1074\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp22, "c of ReadConfig, state S1074");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1075\'");
            int temp23 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S1076\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Write,ChannelSequen" +
                        "ceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1077\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1078\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1073FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1079();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1073FileOperationResponseChecker)));
                }
                goto label11;
            }
            if ((temp23 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label11;
            }
            if ((temp23 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label11;
            }
            if ((temp23 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label11;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1075\'.");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1073FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1078");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1078");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS1079() {
            this.Manager.Comment("reaching state \'S1079\'");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1080() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1080");
            this.Manager.Comment("reaching state \'S1080\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp24;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp24);
            this.Manager.Comment("reaching state \'S1081\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp24, "c of ReadConfig, state S1081");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1082\'");
            int temp25 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
            if ((temp25 == 0)) {
                this.Manager.Comment("reaching state \'S1083\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,ChannelSequen" +
                        "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1084\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1085\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1080FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1086();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1080FileOperationResponseChecker)));
                }
                goto label12;
            }
            if ((temp25 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label12;
            }
            if ((temp25 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label12;
            }
            if ((temp25 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label12;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1082\'.");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1080FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1085");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1085");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS1086() {
            this.Manager.Comment("reaching state \'S1086\'");
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1087
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1087() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1087");
            this.Manager.Comment("reaching state \'S1087\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp26;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp26);
            this.Manager.Comment("reaching state \'S1088\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp26, "c of ReadConfig, state S1088");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1089\'");
            int temp27 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
            if ((temp27 == 0)) {
                this.Manager.Comment("reaching state \'S1090\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Read,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1091\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1092\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1087FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1093();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1087FileOperationResponseChecker)));
                }
                goto label13;
            }
            if ((temp27 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label13;
            }
            if ((temp27 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label13;
            }
            if ((temp27 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label13;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1089\'.");
        label13:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1087FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1092");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1092");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS1093() {
            this.Manager.Comment("reaching state \'S1093\'");
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1094
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1094() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1094");
            this.Manager.Comment("reaching state \'S1094\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp28;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp28);
            this.Manager.Comment("reaching state \'S1095\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp28, "c of ReadConfig, state S1095");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1096\'");
            int temp29 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S1097\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,SetInfo,InvalidChann" +
                        "elSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1098\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1099\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1094FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1100\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1094FileOperationResponseChecker)));
                }
                goto label14;
            }
            if ((temp29 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label14;
            }
            if ((temp29 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label14;
            }
            if ((temp29 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label14;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1096\'.");
        label14:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1094FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S1099");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1099");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1101
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1101() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1101");
            this.Manager.Comment("reaching state \'S1101\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp30;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp30);
            this.Manager.Comment("reaching state \'S1102\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp30, "c of ReadConfig, state S1102");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1103\'");
            int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)));
            if ((temp31 == 0)) {
                this.Manager.Comment("reaching state \'S1104\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Read,ChannelSequenceB" +
                        "oundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1105\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1106\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1101FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS10();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1101FileOperationResponseChecker)));
                }
                goto label15;
            }
            if ((temp31 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label15;
            }
            if ((temp31 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label15;
            }
            if ((temp31 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label15;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1103\'.");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1101FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1106");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1107
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1107() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1107");
            this.Manager.Comment("reaching state \'S1107\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp32;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp32);
            this.Manager.Comment("reaching state \'S1108\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp32, "c of ReadConfig, state S1108");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1109\'");
            int temp33 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S1110\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,DefaultChannelS" +
                        "equence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1111\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1112\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1107FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1086();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1107FileOperationResponseChecker)));
                }
                goto label16;
            }
            if ((temp33 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label16;
            }
            if ((temp33 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label16;
            }
            if ((temp33 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label16;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1109\'.");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1107FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1112");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1112");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1113
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1113() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1113");
            this.Manager.Comment("reaching state \'S1113\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp34);
            this.Manager.Comment("reaching state \'S1114\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp34, "c of ReadConfig, state S1114");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1115\'");
            int temp35 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S1116\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,ChannelSequenceI" +
                        "ncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1117\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1118\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1113FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1086();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1113FileOperationResponseChecker)));
                }
                goto label17;
            }
            if ((temp35 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label17;
            }
            if ((temp35 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label17;
            }
            if ((temp35 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label17;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1115\'.");
        label17:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1113FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1118");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1118");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1119
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1119() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1119");
            this.Manager.Comment("reaching state \'S1119\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp36;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp36);
            this.Manager.Comment("reaching state \'S1120\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp36, "c of ReadConfig, state S1120");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1121\'");
            int temp37 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp37 == 0)) {
                this.Manager.Comment("reaching state \'S1122\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Write,ChannelSequenc" +
                        "eBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1123\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1124\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1119FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1093();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1119FileOperationResponseChecker)));
                }
                goto label18;
            }
            if ((temp37 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label18;
            }
            if ((temp37 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label18;
            }
            if ((temp37 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label18;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1121\'.");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1119FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1124");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1124");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1125
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1125() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1125");
            this.Manager.Comment("reaching state \'S1125\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp38;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp38);
            this.Manager.Comment("reaching state \'S1126\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp38, "c of ReadConfig, state S1126");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1127\'");
            int temp39 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S1128\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,SetInfo,ChannelSequen" +
                        "ceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1129\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1130\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1125FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS10();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1125FileOperationResponseChecker)));
                }
                goto label19;
            }
            if ((temp39 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label19;
            }
            if ((temp39 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label19;
            }
            if ((temp39 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label19;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1127\'.");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1125FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1130");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1131
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1131() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1131");
            this.Manager.Comment("reaching state \'S1131\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp40;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp40);
            this.Manager.Comment("reaching state \'S1132\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp40, "c of ReadConfig, state S1132");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1133\'");
            int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
            if ((temp41 == 0)) {
                this.Manager.Comment("reaching state \'S1134\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,IoCtl,ChannelSequenc" +
                        "eIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1135\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1136\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1131FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1093();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1131FileOperationResponseChecker)));
                }
                goto label20;
            }
            if ((temp41 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label20;
            }
            if ((temp41 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label20;
            }
            if ((temp41 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label20;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1133\'.");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1131FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1136");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1137
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1137() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1137");
            this.Manager.Comment("reaching state \'S1137\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp42;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp42);
            this.Manager.Comment("reaching state \'S1138\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp42, "c of ReadConfig, state S1138");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1139\'");
            int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S1140\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S1141\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1142\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Write,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1143\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1144\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1137FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1137FileOperationResponseChecker)));
                }
                goto label21;
            }
            if ((temp43 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label21;
            }
            if ((temp43 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label21;
            }
            if ((temp43 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label21;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1139\'.");
        label21:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1137FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1144");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1145
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1145() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1145");
            this.Manager.Comment("reaching state \'S1145\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp44;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp44);
            this.Manager.Comment("reaching state \'S1146\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp44, "c of ReadConfig, state S1146");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1147\'");
            int temp45 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S1148\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S1149\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1150\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1151\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1152\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1145FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1153\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1145FileOperationResponseChecker)));
                }
                goto label22;
            }
            if ((temp45 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label22;
            }
            if ((temp45 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label22;
            }
            if ((temp45 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label22;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1147\'.");
        label22:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1145FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S1152");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1152");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1154() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1154");
            this.Manager.Comment("reaching state \'S1154\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp46);
            this.Manager.Comment("reaching state \'S1155\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp46, "c of ReadConfig, state S1155");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1156\'");
            int temp47 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)));
            if ((temp47 == 0)) {
                this.Manager.Comment("reaching state \'S1157\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S1158\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1159\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,IoCtl,ChannelSequenceBoundaryValid,WithoutReplayFlag,AlternativeParam" +
                        "eters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1160\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1161\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1154FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1154FileOperationResponseChecker)));
                }
                goto label23;
            }
            if ((temp47 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label23;
            }
            if ((temp47 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label23;
            }
            if ((temp47 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label23;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1156\'.");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1154FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1161");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1161");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS487() {
            this.Manager.Comment("reaching state \'S487\'");
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1162() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1162");
            this.Manager.Comment("reaching state \'S1162\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp48;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp48);
            this.Manager.Comment("reaching state \'S1163\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp48, "c of ReadConfig, state S1163");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1164\'");
            int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
            if ((temp49 == 0)) {
                this.Manager.Comment("reaching state \'S1165\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S1166\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1167\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,IoCtl,ChannelSequenc" +
                        "eBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1168\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1169\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1162FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS594();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1162FileOperationResponseChecker)));
                }
                goto label24;
            }
            if ((temp49 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label24;
            }
            if ((temp49 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label24;
            }
            if ((temp49 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label24;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1164\'.");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1162FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS594() {
            this.Manager.Comment("reaching state \'S594\'");
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1170() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1170");
            this.Manager.Comment("reaching state \'S1170\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp50;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp50);
            this.Manager.Comment("reaching state \'S1171\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp50, "c of ReadConfig, state S1171");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1172\'");
            int temp51 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S1173\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S1174\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1175\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,ChannelSequen" +
                        "ceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1176\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1177\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1170FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS718();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1170FileOperationResponseChecker)));
                }
                goto label25;
            }
            if ((temp51 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label25;
            }
            if ((temp51 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label25;
            }
            if ((temp51 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label25;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1172\'.");
        label25:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1170FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1177");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS718() {
            this.Manager.Comment("reaching state \'S718\'");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1178() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1178");
            this.Manager.Comment("reaching state \'S1178\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp52;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp52);
            this.Manager.Comment("reaching state \'S1179\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp52, "c of ReadConfig, state S1179");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1180\'");
            int temp53 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S1181\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S1182\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1183\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,SetInfo,ChannelSeque" +
                        "nceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1184\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1185\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1178FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS834();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1178FileOperationResponseChecker)));
                }
                goto label26;
            }
            if ((temp53 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label26;
            }
            if ((temp53 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label26;
            }
            if ((temp53 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label26;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1180\'.");
        label26:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1178FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS834() {
            this.Manager.Comment("reaching state \'S834\'");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1186() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1186");
            this.Manager.Comment("reaching state \'S1186\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp54;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp54);
            this.Manager.Comment("reaching state \'S1187\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp54, "c of ReadConfig, state S1187");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1188\'");
            int temp55 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S1189\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1190\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1191\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Read,InvalidChannelSequence,WithoutReplayFlag,AlternativeParameters)\'" +
                        "");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1192\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1193\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1186FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS330();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1186FileOperationResponseChecker)));
                }
                goto label27;
            }
            if ((temp55 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label27;
            }
            if ((temp55 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label27;
            }
            if ((temp55 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label27;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1188\'.");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1186FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1193");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1193");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS330() {
            this.Manager.Comment("reaching state \'S330\'");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1194() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1194");
            this.Manager.Comment("reaching state \'S1194\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp56;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp56);
            this.Manager.Comment("reaching state \'S1195\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp56, "c of ReadConfig, state S1195");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1196\'");
            int temp57 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S1197\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1198\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1199\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1194FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1200\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1194FileOperationResponseChecker)));
                }
                goto label28;
            }
            if ((temp57 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label28;
            }
            if ((temp57 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label28;
            }
            if ((temp57 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label28;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1196\'.");
        label28:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1194FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S1199");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS120() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS120");
            this.Manager.Comment("reaching state \'S120\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp58;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp58);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp58, "c of ReadConfig, state S121");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S122\'");
            int temp59 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
            if ((temp59 == 0)) {
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Write,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S127\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS120FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS120FileOperationResponseChecker)));
                }
                goto label29;
            }
            if ((temp59 == 1)) {
                this.Manager.Comment("reaching state \'S128\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S129\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S130\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Write,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S131\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S132\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS120FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S133\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS120FileOperationResponseChecker1)));
                }
                goto label29;
            }
            if ((temp59 == 2)) {
                ReplayFileOperationTestCaseS15();
                goto label29;
            }
            if ((temp59 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label29;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S122\'.");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS120FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S127");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS120FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S132");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1201
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1201() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1201");
            this.Manager.Comment("reaching state \'S1201\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp60;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp60);
            this.Manager.Comment("reaching state \'S1202\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp60, "c of ReadConfig, state S1202");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1203\'");
            int temp61 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
            if ((temp61 == 0)) {
                this.Manager.Comment("reaching state \'S1204\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Write,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1205\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1206\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1201FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1207\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1201FileOperationResponseChecker)));
                }
                goto label30;
            }
            if ((temp61 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label30;
            }
            if ((temp61 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label30;
            }
            if ((temp61 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label30;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1203\'.");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1201FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1206");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1208() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1208");
            this.Manager.Comment("reaching state \'S1208\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp62;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp62);
            this.Manager.Comment("reaching state \'S1209\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp62, "c of ReadConfig, state S1209");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1210\'");
            int temp63 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S1211\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S1212\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S1213\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Read,InvalidChannelS" +
                        "equence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S1214\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1215\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1208FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1216\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1208FileOperationResponseChecker)));
                }
                goto label31;
            }
            if ((temp63 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label31;
            }
            if ((temp63 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label31;
            }
            if ((temp63 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label31;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1210\'.");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1208FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1215");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1217
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1217() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1217");
            this.Manager.Comment("reaching state \'S1217\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp64);
            this.Manager.Comment("reaching state \'S1218\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp64, "c of ReadConfig, state S1218");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1219\'");
            int temp65 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)));
            if ((temp65 == 0)) {
                this.Manager.Comment("reaching state \'S1220\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,IoCtl,ChannelSequen" +
                        "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1221\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1222\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1217FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1079();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1217FileOperationResponseChecker)));
                }
                goto label32;
            }
            if ((temp65 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label32;
            }
            if ((temp65 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label32;
            }
            if ((temp65 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label32;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1219\'.");
        label32:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1217FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1222");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1223
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1223() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1223");
            this.Manager.Comment("reaching state \'S1223\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp66;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp66);
            this.Manager.Comment("reaching state \'S1224\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp66, "c of ReadConfig, state S1224");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1225\'");
            int temp67 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
            if ((temp67 == 0)) {
                this.Manager.Comment("reaching state \'S1226\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Read,InvalidChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1227\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1228\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1223FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS1079();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1223FileOperationResponseChecker)));
                }
                goto label33;
            }
            if ((temp67 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label33;
            }
            if ((temp67 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label33;
            }
            if ((temp67 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label33;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1225\'.");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1223FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1228");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S1229
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS1229() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS1229");
            this.Manager.Comment("reaching state \'S1229\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp68;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp68);
            this.Manager.Comment("reaching state \'S1230\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp68, "c of ReadConfig, state S1230");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S1231\'");
            int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S1232\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,SetInfo,DefaultChan" +
                        "nelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S1233\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1234\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1229FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S1235\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS1229FileOperationResponseChecker)));
                }
                goto label34;
            }
            if ((temp69 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label34;
            }
            if ((temp69 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label34;
            }
            if ((temp69 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label34;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S1231\'.");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS1229FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1234");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS134() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS134");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp70);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp70, "c of ReadConfig, state S135");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S136\'");
            int temp71 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker141)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker142)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker143)));
            if ((temp71 == 0)) {
                this.Manager.Comment("reaching state \'S137\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S138\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S139\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Write,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S141\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS134FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS134FileOperationResponseChecker)));
                }
                goto label35;
            }
            if ((temp71 == 1)) {
                this.Manager.Comment("reaching state \'S142\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S143\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",IoCtl,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S146\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS134FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S147\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS134FileOperationResponseChecker1)));
                }
                goto label35;
            }
            if ((temp71 == 2)) {
                ReplayFileOperationTestCaseS15();
                goto label35;
            }
            if ((temp71 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label35;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S136\'.");
        label35:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS134FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S141");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker141() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS134FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S146");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker142() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker143() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS148() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS148");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp72;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp72);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp72, "c of ReadConfig, state S149");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S150\'");
            int temp73 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker144)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker145)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker146)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker147)));
            if ((temp73 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label36;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S151\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S152\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Write,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParamet" +
                        "ers)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S155\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS148FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS148FileOperationResponseChecker)));
                }
                goto label36;
            }
            if ((temp73 == 2)) {
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S157\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S158\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,SetInfo,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'" +
                        "");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S159\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S160\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS148FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S161\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS148FileOperationResponseChecker1)));
                }
                goto label36;
            }
            if ((temp73 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label36;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S150\'.");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker144() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker145() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS148FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S155");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S155");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker146() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS148FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S160");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S160");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker147() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS162() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS162");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp74);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp74, "c of ReadConfig, state S163");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S164\'");
            int temp75 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker148)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker149)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker150)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker151)));
            if ((temp75 == 0)) {
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Write,InvalidChannelSequence,WithoutReplayFlag,AlternativeParameters" +
                        ")\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S169\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS162FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS60();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS162FileOperationResponseChecker)));
                }
                goto label37;
            }
            if ((temp75 == 1)) {
                this.Manager.Comment("reaching state \'S170\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,SetInfo,DefaultChan" +
                        "nelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S171\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S172\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS162FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S173\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS162FileOperationResponseChecker1)));
                }
                goto label37;
            }
            if ((temp75 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label37;
            }
            if ((temp75 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label37;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S164\'.");
        label37:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker148() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS162FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS60() {
            this.Manager.Comment("reaching state \'S60\'");
        }
        
        private void PreConstraintChecker149() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS162FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S172");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker150() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker151() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS174() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS174");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp76;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp76);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp76, "c of ReadConfig, state S175");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S176\'");
            int temp77 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker152)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker153)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker154)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker155)));
            if ((temp77 == 0)) {
                this.Manager.Comment("reaching state \'S177\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S179\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Write,ChannelSequenc" +
                        "eBoundaryValid,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S180\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S181\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS174FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS31();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS174FileOperationResponseChecker)));
                }
                goto label38;
            }
            if ((temp77 == 1)) {
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,IoCtl,ChannelSequen" +
                        "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S184\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS174FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS18();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS174FileOperationResponseChecker1)));
                }
                goto label38;
            }
            if ((temp77 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label38;
            }
            if ((temp77 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label38;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S176\'.");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker152() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS174FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S181");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS31() {
            this.Manager.Comment("reaching state \'S31\'");
        }
        
        private void PreConstraintChecker153() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS174FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S184");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker154() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker155() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S185
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS185() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS185");
            this.Manager.Comment("reaching state \'S185\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp78);
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp78, "c of ReadConfig, state S186");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S187\'");
            int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker156)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker157)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker158)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker159)));
            if ((temp79 == 0)) {
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Write,InvalidChannel" +
                        "Sequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S191\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S192\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS185FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S193\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS185FileOperationResponseChecker)));
                }
                goto label39;
            }
            if ((temp79 == 1)) {
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Read,InvalidChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S195\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S196\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS185FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS18();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS185FileOperationResponseChecker1)));
                }
                goto label39;
            }
            if ((temp79 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label39;
            }
            if ((temp79 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label39;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S187\'.");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker156() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS185FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker157() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS185FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S196");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker158() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker159() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S19
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS19() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS19");
            this.Manager.Comment("reaching state \'S19\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp80;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp80);
            this.Manager.Comment("reaching state \'S20\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp80, "c of ReadConfig, state S20");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S21\'");
            int temp81 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker160)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker161)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker162)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker163)));
            if ((temp81 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label40;
            }
            if ((temp81 == 1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,IoCtl,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S24\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS19FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS25();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS19FileOperationResponseChecker)));
                }
                goto label40;
            }
            if ((temp81 == 2)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Write,DefaultChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S30\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS19FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS31();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS19FileOperationResponseChecker1)));
                }
                goto label40;
            }
            if ((temp81 == 3)) {
                ReplayFileOperationTestCaseS32();
                goto label40;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S21\'.");
        label40:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker160() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker161() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS19FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S24");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S24");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void PreConstraintChecker162() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS19FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S30");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker163() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S197
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS197() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS197");
            this.Manager.Comment("reaching state \'S197\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp82);
            this.Manager.Comment("reaching state \'S198\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp82, "c of ReadConfig, state S198");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S199\'");
            int temp83 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker164)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker165)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker166)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker167)));
            if ((temp83 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label41;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Write,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S203\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S204\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS197FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS197FileOperationResponseChecker)));
                }
                goto label41;
            }
            if ((temp83 == 2)) {
                this.Manager.Comment("reaching state \'S205\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Read,ChannelSequenceB" +
                        "oundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S207\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS197FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS208();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS197FileOperationResponseChecker1)));
                }
                goto label41;
            }
            if ((temp83 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label41;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S199\'.");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker164() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker165() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS197FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker166() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS197FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S207");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS208() {
            this.Manager.Comment("reaching state \'S208\'");
        }
        
        private void PreConstraintChecker167() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S209
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS209() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS209");
            this.Manager.Comment("reaching state \'S209\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp84;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp84);
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp84, "c of ReadConfig, state S210");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S211\'");
            int temp85 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker168)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker169)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker170)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker171)));
            if ((temp85 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label42;
            }
            if ((temp85 == 1)) {
                this.Manager.Comment("reaching state \'S212\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S213\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S214\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,DefaultChannelSe" +
                        "quence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S216\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS209FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS217();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS209FileOperationResponseChecker)));
                }
                goto label42;
            }
            if ((temp85 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label42;
            }
            if ((temp85 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label42;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S211\'.");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker168() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker169() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS209FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S216");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS217() {
            this.Manager.Comment("reaching state \'S217\'");
        }
        
        private void PreConstraintChecker170() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker171() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS218() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS218");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp86;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp86);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp86, "c of ReadConfig, state S219");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S220\'");
            int temp87 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker172)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker173)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker174)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker175)));
            if ((temp87 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label43;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S221\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Read,ChannelSequenceBoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S225\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS218FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS218FileOperationResponseChecker)));
                }
                goto label43;
            }
            if ((temp87 == 2)) {
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,DefaultChannelS" +
                        "equence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S229\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS218FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS35();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS218FileOperationResponseChecker1)));
                }
                goto label43;
            }
            if ((temp87 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label43;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S220\'.");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker172() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker173() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS218FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S225");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS226() {
            this.Manager.Comment("reaching state \'S226\'");
        }
        
        private void PreConstraintChecker174() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS218FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S229");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker175() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS230() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS230");
            this.Manager.Comment("reaching state \'S230\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp88);
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp88, "c of ReadConfig, state S231");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S232\'");
            int temp89 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker176)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker177)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker178)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker179)));
            if ((temp89 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label44;
            }
            if ((temp89 == 1)) {
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Read,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters" +
                        ")\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S237\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS230FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS230FileOperationResponseChecker)));
                }
                goto label44;
            }
            if ((temp89 == 2)) {
                this.Manager.Comment("reaching state \'S238\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,ChannelSequenceI" +
                        "ncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S239\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S240\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS230FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS35();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS230FileOperationResponseChecker1)));
                }
                goto label44;
            }
            if ((temp89 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label44;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S232\'.");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker176() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker177() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS230FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S237");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker178() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS230FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S240");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker179() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S241
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS241() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS241");
            this.Manager.Comment("reaching state \'S241\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp90;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp90);
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp90, "c of ReadConfig, state S242");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S243\'");
            int temp91 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker180)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker181)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker182)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker183)));
            if ((temp91 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label45;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S244\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S245\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Read,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters" +
                        ")\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S247\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S248\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS241FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS241FileOperationResponseChecker)));
                }
                goto label45;
            }
            if ((temp91 == 2)) {
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S251\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS241FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S252\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS241FileOperationResponseChecker1)));
                }
                goto label45;
            }
            if ((temp91 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label45;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S243\'.");
        label45:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker180() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker181() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS241FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S248");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker182() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS241FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S251");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker183() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S253
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS253() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS253");
            this.Manager.Comment("reaching state \'S253\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp92;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp92);
            this.Manager.Comment("reaching state \'S254\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp92, "c of ReadConfig, state S254");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S255\'");
            int temp93 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker184)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker185)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker186)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker187)));
            if ((temp93 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label46;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Read,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S259\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S260\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS253FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS253FileOperationResponseChecker)));
                }
                goto label46;
            }
            if ((temp93 == 2)) {
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Write,ChannelSequen" +
                        "ceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S263\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS253FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS264();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS253FileOperationResponseChecker1)));
                }
                goto label46;
            }
            if ((temp93 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label46;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S255\'.");
        label46:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker184() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker185() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS253FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S260");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker186() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS253FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S263");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S263");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS264() {
            this.Manager.Comment("reaching state \'S264\'");
        }
        
        private void PreConstraintChecker187() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S265
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS265() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS265");
            this.Manager.Comment("reaching state \'S265\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp94);
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp94, "c of ReadConfig, state S266");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S267\'");
            int temp95 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker188)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker189)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker190)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker191)));
            if ((temp95 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label47;
            }
            if ((temp95 == 1)) {
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Read,ChannelSequenceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S271\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S272\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS265FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS265FileOperationResponseChecker)));
                }
                goto label47;
            }
            if ((temp95 == 2)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,IoCtl,ChannelSequen" +
                        "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S275\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS265FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS264();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS265FileOperationResponseChecker1)));
                }
                goto label47;
            }
            if ((temp95 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label47;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S267\'.");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker188() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker189() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS265FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S272");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S272");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker190() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS265FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S275");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker191() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS276() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS276");
            this.Manager.Comment("reaching state \'S276\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp96;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp96);
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp96, "c of ReadConfig, state S277");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S278\'");
            int temp97 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker192)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker193)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker194)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker195)));
            if ((temp97 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label48;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S279\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S280\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S281\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,InvalidChannelSe" +
                        "quence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S283\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS276FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S284\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS276FileOperationResponseChecker)));
                }
                goto label48;
            }
            if ((temp97 == 2)) {
                this.Manager.Comment("reaching state \'S285\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Read,InvalidChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S286\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S287\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS276FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS264();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS276FileOperationResponseChecker1)));
                }
                goto label48;
            }
            if ((temp97 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label48;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S278\'.");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker192() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker193() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS276FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S283");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker194() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS276FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S287");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker195() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS288() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS288");
            this.Manager.Comment("reaching state \'S288\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp98);
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp98, "c of ReadConfig, state S289");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S290\'");
            int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker196)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker197)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker198)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker199)));
            if ((temp99 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label49;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S291\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S292\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S293\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Read,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S295\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS288FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS288FileOperationResponseChecker)));
                }
                goto label49;
            }
            if ((temp99 == 2)) {
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,SetInfo,DefaultChan" +
                        "nelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S297\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S298\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS288FileOperationResponseChecker1))) != -1)) {
                    this.Manager.Comment("reaching state \'S299\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS288FileOperationResponseChecker1)));
                }
                goto label49;
            }
            if ((temp99 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label49;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S290\'.");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker196() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker197() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS288FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker198() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS288FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker199() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS300() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS300");
            this.Manager.Comment("reaching state \'S300\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp100);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp100, "c of ReadConfig, state S301");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S302\'");
            int temp101 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker200)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker201)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker202)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker203)));
            if ((temp101 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label50;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Read,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S307\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS300FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS300FileOperationResponseChecker)));
                }
                goto label50;
            }
            if ((temp101 == 2)) {
                this.Manager.Comment("reaching state \'S308\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,IoCtl,InvalidChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S309\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S310\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS300FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS208();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS300FileOperationResponseChecker1)));
                }
                goto label50;
            }
            if ((temp101 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label50;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S302\'.");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker200() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker201() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS300FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S307");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S307");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker202() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS300FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S310");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S310");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker203() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S311
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS311() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS311");
            this.Manager.Comment("reaching state \'S311\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp102);
            this.Manager.Comment("reaching state \'S312\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp102, "c of ReadConfig, state S312");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S313\'");
            int temp103 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker204)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker205)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker206)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker207)));
            if ((temp103 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label51;
            }
            if ((temp103 == 1)) {
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Read,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S317\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S318\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS311FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS311FileOperationResponseChecker)));
                }
                goto label51;
            }
            if ((temp103 == 2)) {
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,SetInfo,ChannelSequen" +
                        "ceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S321\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS311FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS208();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS311FileOperationResponseChecker1)));
                }
                goto label51;
            }
            if ((temp103 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label51;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S313\'.");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker204() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker205() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS311FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S318");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S318");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker206() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS311FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S321");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S321");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker207() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS322() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS322");
            this.Manager.Comment("reaching state \'S322\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp104);
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp104, "c of ReadConfig, state S323");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S324\'");
            int temp105 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker208)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker209)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker210)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker211)));
            if ((temp105 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label52;
            }
            if ((temp105 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label52;
            }
            if ((temp105 == 2)) {
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S327\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Read,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S328\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S329\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS322FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS330();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS322FileOperationResponseChecker)));
                }
                goto label52;
            }
            if ((temp105 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label52;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S324\'.");
        label52:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker208() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker209() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker210() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS322FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S329");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S329");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker211() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S331
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS331() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS331");
            this.Manager.Comment("reaching state \'S331\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp106;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp106);
            this.Manager.Comment("reaching state \'S332\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp106, "c of ReadConfig, state S332");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S333\'");
            int temp107 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker212)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker213)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker214)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker215)));
            if ((temp107 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label53;
            }
            if ((temp107 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label53;
            }
            if ((temp107 == 2)) {
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Read,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)\'" +
                        "");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S337\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S338\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS331FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS226();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS331FileOperationResponseChecker)));
                }
                goto label53;
            }
            if ((temp107 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label53;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S333\'.");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker212() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker213() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker214() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS331FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker215() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S339
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS339() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS339");
            this.Manager.Comment("reaching state \'S339\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp108;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp108);
            this.Manager.Comment("reaching state \'S340\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp108, "c of ReadConfig, state S340");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S341\'");
            int temp109 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker216)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker217)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker218)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker219)));
            if ((temp109 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label54;
            }
            if ((temp109 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label54;
            }
            if ((temp109 == 2)) {
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,ChannelSequenceB" +
                        "oundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S345\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S346\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS339FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS217();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS339FileOperationResponseChecker)));
                }
                goto label54;
            }
            if ((temp109 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label54;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S341\'.");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker216() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker217() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker218() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS339FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S346");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker219() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S347
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS347() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS347");
            this.Manager.Comment("reaching state \'S347\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp110;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp110);
            this.Manager.Comment("reaching state \'S348\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp110, "c of ReadConfig, state S348");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S349\'");
            int temp111 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker220)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker221)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker222)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker223)));
            if ((temp111 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label55;
            }
            if ((temp111 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label55;
            }
            if ((temp111 == 2)) {
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S352\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Read,ChannelSequenceI" +
                        "ncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S353\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S354\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS347FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS217();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS347FileOperationResponseChecker)));
                }
                goto label55;
            }
            if ((temp111 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label55;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S349\'.");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker220() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker221() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker222() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS347FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S354");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker223() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S355
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS355() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS355");
            this.Manager.Comment("reaching state \'S355\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp112;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp112);
            this.Manager.Comment("reaching state \'S356\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp112, "c of ReadConfig, state S356");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S357\'");
            int temp113 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker224)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker225)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker226)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker227)));
            if ((temp113 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label56;
            }
            if ((temp113 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label56;
            }
            if ((temp113 == 2)) {
                this.Manager.Comment("reaching state \'S358\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S359\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S360\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S362\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS355FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS363();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS355FileOperationResponseChecker)));
                }
                goto label56;
            }
            if ((temp113 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label56;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S357\'.");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker224() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker225() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker226() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS355FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S362");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS363() {
            this.Manager.Comment("reaching state \'S363\'");
        }
        
        private void PreConstraintChecker227() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS36() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS36");
            this.Manager.Comment("reaching state \'S36\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp114);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp114, "c of ReadConfig, state S37");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S38\'");
            int temp115 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker228)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker229)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker230)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker231)));
            if ((temp115 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label57;
            }
            if ((temp115 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label57;
            }
            if ((temp115 == 2)) {
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Write,ChannelSequenceBoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S42\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S43\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS36FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS36FileOperationResponseChecker)));
                }
                goto label57;
            }
            if ((temp115 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label57;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S38\'.");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker228() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker229() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker230() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS36FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S43");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S43");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker231() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS364() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS364");
            this.Manager.Comment("reaching state \'S364\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp116;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp116);
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp116, "c of ReadConfig, state S365");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S366\'");
            int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker232)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker233)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker234)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker235)));
            if ((temp117 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label58;
            }
            if ((temp117 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label58;
            }
            if ((temp117 == 2)) {
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S369\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Write,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S370\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S371\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS364FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS364FileOperationResponseChecker)));
                }
                goto label58;
            }
            if ((temp117 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label58;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S366\'.");
        label58:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker232() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker233() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker234() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS364FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S371");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS372() {
            this.Manager.Comment("reaching state \'S372\'");
        }
        
        private void PreConstraintChecker235() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S373
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS373() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS373");
            this.Manager.Comment("reaching state \'S373\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp118;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp118);
            this.Manager.Comment("reaching state \'S374\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp118, "c of ReadConfig, state S374");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S375\'");
            int temp119 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker236)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker237)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker238)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker239)));
            if ((temp119 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label59;
            }
            if ((temp119 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label59;
            }
            if ((temp119 == 2)) {
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Write,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameter" +
                        "s)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S379\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S380\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS373FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS373FileOperationResponseChecker)));
                }
                goto label59;
            }
            if ((temp119 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label59;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S375\'.");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker236() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker237() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker238() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS373FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S380");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S380");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker239() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S381
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS381() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS381");
            this.Manager.Comment("reaching state \'S381\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp120;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp120);
            this.Manager.Comment("reaching state \'S382\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp120, "c of ReadConfig, state S382");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S383\'");
            int temp121 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker240)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker241)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker242)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker243)));
            if ((temp121 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label60;
            }
            if ((temp121 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label60;
            }
            if ((temp121 == 2)) {
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S385\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Write,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S388\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS381FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS381FileOperationResponseChecker)));
                }
                goto label60;
            }
            if ((temp121 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label60;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S383\'.");
        label60:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker240() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker241() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker242() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS381FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S388");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker243() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S389
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS389() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS389");
            this.Manager.Comment("reaching state \'S389\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp122;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp122);
            this.Manager.Comment("reaching state \'S390\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp122, "c of ReadConfig, state S390");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S391\'");
            int temp123 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker244)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker245)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker246)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker247)));
            if ((temp123 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label61;
            }
            if ((temp123 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label61;
            }
            if ((temp123 == 2)) {
                this.Manager.Comment("reaching state \'S392\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Write,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S396\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS389FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS397();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS389FileOperationResponseChecker)));
                }
                goto label61;
            }
            if ((temp123 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label61;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S391\'.");
        label61:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker244() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker245() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker246() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS389FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S396");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S396");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS397() {
            this.Manager.Comment("reaching state \'S397\'");
        }
        
        private void PreConstraintChecker247() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS398() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS398");
            this.Manager.Comment("reaching state \'S398\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp124;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp124);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp124, "c of ReadConfig, state S399");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S400\'");
            int temp125 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker248)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker249)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker250)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker251)));
            if ((temp125 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label62;
            }
            if ((temp125 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label62;
            }
            if ((temp125 == 2)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Write,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S405\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS398FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS398FileOperationResponseChecker)));
                }
                goto label62;
            }
            if ((temp125 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label62;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S400\'.");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker248() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker249() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker250() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS398FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker251() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS406() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS406");
            this.Manager.Comment("reaching state \'S406\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp126;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp126);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp126, "c of ReadConfig, state S407");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S408\'");
            int temp127 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker252)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker253)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker254)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker255)));
            if ((temp127 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label63;
            }
            if ((temp127 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label63;
            }
            if ((temp127 == 2)) {
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,ChannelSequence" +
                        "BoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S413\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS406FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS363();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS406FileOperationResponseChecker)));
                }
                goto label63;
            }
            if ((temp127 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label63;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S408\'.");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker252() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker253() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker254() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS406FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker255() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS414() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS414");
            this.Manager.Comment("reaching state \'S414\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp128;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp128);
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp128, "c of ReadConfig, state S415");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S416\'");
            int temp129 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker256)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker257)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker258)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker259)));
            if ((temp129 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label64;
            }
            if ((temp129 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label64;
            }
            if ((temp129 == 2)) {
                this.Manager.Comment("reaching state \'S417\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S418\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Write,ChannelSequenceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S420\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S421\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS414FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS414FileOperationResponseChecker)));
                }
                goto label64;
            }
            if ((temp129 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label64;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S416\'.");
        label64:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker256() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker257() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker258() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS414FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S421");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S421");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker259() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS422() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS422");
            this.Manager.Comment("reaching state \'S422\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp130;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp130);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp130, "c of ReadConfig, state S423");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S424\'");
            int temp131 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker260)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker261)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker262)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker263)));
            if ((temp131 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label65;
            }
            if ((temp131 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label65;
            }
            if ((temp131 == 2)) {
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,Write,InvalidChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S428\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S429\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS422FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS397();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS422FileOperationResponseChecker)));
                }
                goto label65;
            }
            if ((temp131 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label65;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S424\'.");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker260() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker261() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker262() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS422FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker263() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS430() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS430");
            this.Manager.Comment("reaching state \'S430\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp132;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp132);
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp132, "c of ReadConfig, state S431");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S432\'");
            int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker264)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker265)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker266)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker267)));
            if ((temp133 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label66;
            }
            if ((temp133 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label66;
            }
            if ((temp133 == 2)) {
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Write,DefaultChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S436\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S437\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS430FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS430FileOperationResponseChecker)));
                }
                goto label66;
            }
            if ((temp133 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label66;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S432\'.");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker264() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker265() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker266() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS430FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S437");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S437");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker267() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS438() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS438");
            this.Manager.Comment("reaching state \'S438\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp134;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp134);
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp134, "c of ReadConfig, state S439");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S440\'");
            int temp135 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker268)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker269)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker270)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker271)));
            if ((temp135 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label67;
            }
            if ((temp135 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label67;
            }
            if ((temp135 == 2)) {
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",Write,ChannelSequenceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S444\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S445\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS438FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS438FileOperationResponseChecker)));
                }
                goto label67;
            }
            if ((temp135 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label67;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S440\'.");
        label67:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker268() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker269() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker270() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS438FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker271() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS446() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS446");
            this.Manager.Comment("reaching state \'S446\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp136;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp136);
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp136, "c of ReadConfig, state S447");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S448\'");
            int temp137 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker272)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker273)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker274)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker275)));
            if ((temp137 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label68;
            }
            if ((temp137 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label68;
            }
            if ((temp137 == 2)) {
                this.Manager.Comment("reaching state \'S449\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Write,DefaultChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S452\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S453\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS446FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS446FileOperationResponseChecker)));
                }
                goto label68;
            }
            if ((temp137 == 3)) {
                ReplayFileOperationTestCaseS45();
                goto label68;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S448\'.");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker272() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker273() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker274() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS446FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S453");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S453");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker275() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        #endregion
        
        #region Test Starting in S454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS454() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS454");
            this.Manager.Comment("reaching state \'S454\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp138;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp138);
            this.Manager.Comment("reaching state \'S455\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp138, "c of ReadConfig, state S455");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S456\'");
            int temp139 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker276)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker277)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker278)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker279)));
            if ((temp139 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label69;
            }
            if ((temp139 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label69;
            }
            if ((temp139 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label69;
            }
            if ((temp139 == 3)) {
                this.Manager.Comment("reaching state \'S457\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",Write,ChannelSequenceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S461\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS454FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS372();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS454FileOperationResponseChecker)));
                }
                goto label69;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S456\'.");
        label69:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker276() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker277() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker278() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker279() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS454FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S461");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS462() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS462");
            this.Manager.Comment("reaching state \'S462\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp140);
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp140, "c of ReadConfig, state S463");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S464\'");
            int temp141 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker280)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker281)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker282)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker283)));
            if ((temp141 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label70;
            }
            if ((temp141 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label70;
            }
            if ((temp141 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label70;
            }
            if ((temp141 == 3)) {
                this.Manager.Comment("reaching state \'S465\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,Write,ChannelSequence" +
                        "IncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S468\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S469\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS462FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS363();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS462FileOperationResponseChecker)));
                }
                goto label70;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S464\'.");
        label70:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker280() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker281() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker282() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker283() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS462FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S469");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S469");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS470() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS470");
            this.Manager.Comment("reaching state \'S470\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp142);
            this.Manager.Comment("reaching state \'S471\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp142, "c of ReadConfig, state S471");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S472\'");
            int temp143 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker284)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker285)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker286)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker287)));
            if ((temp143 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label71;
            }
            if ((temp143 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label71;
            }
            if ((temp143 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label71;
            }
            if ((temp143 == 3)) {
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S474\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S475\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S476\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S477\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS470FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS478();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS470FileOperationResponseChecker)));
                }
                goto label71;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S472\'.");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker284() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker285() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker286() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker287() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS470FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S477");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S477");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS478() {
            this.Manager.Comment("reaching state \'S478\'");
        }
        #endregion
        
        #region Test Starting in S479
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS479() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS479");
            this.Manager.Comment("reaching state \'S479\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp144;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp144);
            this.Manager.Comment("reaching state \'S480\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp144, "c of ReadConfig, state S480");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S481\'");
            int temp145 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker288)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker289)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker290)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker291)));
            if ((temp145 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label72;
            }
            if ((temp145 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label72;
            }
            if ((temp145 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label72;
            }
            if ((temp145 == 3)) {
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S483\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S484\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,IoCtl,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativeParame" +
                        "ters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S485\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S486\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS479FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS479FileOperationResponseChecker)));
                }
                goto label72;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S481\'.");
        label72:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker288() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker289() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker290() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker291() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS479FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S486");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S486");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS488() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS488");
            this.Manager.Comment("reaching state \'S488\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp146;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp146);
            this.Manager.Comment("reaching state \'S489\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp146, "c of ReadConfig, state S489");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S490\'");
            int temp147 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker292)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker293)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker294)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker295)));
            if ((temp147 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label73;
            }
            if ((temp147 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label73;
            }
            if ((temp147 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label73;
            }
            if ((temp147 == 3)) {
                this.Manager.Comment("reaching state \'S491\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S492\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S493\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",IoCtl,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S495\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS488FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS488FileOperationResponseChecker)));
                }
                goto label73;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S490\'.");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker292() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker293() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker294() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker295() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS488FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S495");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S495");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S49
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS49() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS49");
            this.Manager.Comment("reaching state \'S49\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp148);
            this.Manager.Comment("reaching state \'S50\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp148, "c of ReadConfig, state S50");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S51\'");
            int temp149 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker296)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker297)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker298)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker299)));
            if ((temp149 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label74;
            }
            if ((temp149 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label74;
            }
            if ((temp149 == 2)) {
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,IoCtl,ChannelSequen" +
                        "ceBoundaryValid,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S54\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS49FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS48();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS49FileOperationResponseChecker)));
                }
                goto label74;
            }
            if ((temp149 == 3)) {
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S56\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S57\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Write,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S59\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS49FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS60();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS49FileOperationResponseChecker1)));
                }
                goto label74;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S51\'.");
        label74:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker296() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker297() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker298() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS49FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S54");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker299() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS49FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S59");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS496() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS496");
            this.Manager.Comment("reaching state \'S496\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp150;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp150);
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp150, "c of ReadConfig, state S497");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S498\'");
            int temp151 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker300)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker301)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker302)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker303)));
            if ((temp151 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label75;
            }
            if ((temp151 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label75;
            }
            if ((temp151 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label75;
            }
            if ((temp151 == 3)) {
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S501\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",IoCtl,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S503\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS496FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS496FileOperationResponseChecker)));
                }
                goto label75;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S498\'.");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker300() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker301() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker302() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker303() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS496FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S503");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S503");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS504() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS504");
            this.Manager.Comment("reaching state \'S504\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp152;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp152);
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp152, "c of ReadConfig, state S505");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S506\'");
            int temp153 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker304)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker305)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker306)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker307)));
            if ((temp153 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label76;
            }
            if ((temp153 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label76;
            }
            if ((temp153 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label76;
            }
            if ((temp153 == 3)) {
                this.Manager.Comment("reaching state \'S507\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S508\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,IoCtl,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S511\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS504FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS512();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS504FileOperationResponseChecker)));
                }
                goto label76;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S506\'.");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker304() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker305() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker306() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker307() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS504FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S511");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S511");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS512() {
            this.Manager.Comment("reaching state \'S512\'");
        }
        #endregion
        
        #region Test Starting in S513
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS513() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS513");
            this.Manager.Comment("reaching state \'S513\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp154;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp154);
            this.Manager.Comment("reaching state \'S514\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp154, "c of ReadConfig, state S514");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S515\'");
            int temp155 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker308)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker309)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker310)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker311)));
            if ((temp155 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label77;
            }
            if ((temp155 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label77;
            }
            if ((temp155 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label77;
            }
            if ((temp155 == 3)) {
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",IoCtl,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S520\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS513FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS513FileOperationResponseChecker)));
                }
                goto label77;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S515\'.");
        label77:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker308() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker309() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker310() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker311() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS513FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S521
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS521() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS521");
            this.Manager.Comment("reaching state \'S521\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp156;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp156);
            this.Manager.Comment("reaching state \'S522\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp156, "c of ReadConfig, state S522");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S523\'");
            int temp157 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker312)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker313)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker314)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker315)));
            if ((temp157 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label78;
            }
            if ((temp157 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label78;
            }
            if ((temp157 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label78;
            }
            if ((temp157 == 3)) {
                this.Manager.Comment("reaching state \'S524\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S525\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,ChannelSequence" +
                        "BoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S528\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS521FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS478();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS521FileOperationResponseChecker)));
                }
                goto label78;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S523\'.");
        label78:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker312() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker313() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker314() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker315() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS521FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S528");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S529
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS529() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS529");
            this.Manager.Comment("reaching state \'S529\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp158);
            this.Manager.Comment("reaching state \'S530\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp158, "c of ReadConfig, state S530");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S531\'");
            int temp159 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker316)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker317)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker318)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker319)));
            if ((temp159 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label79;
            }
            if ((temp159 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label79;
            }
            if ((temp159 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label79;
            }
            if ((temp159 == 3)) {
                this.Manager.Comment("reaching state \'S532\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S533\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S534\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",IoCtl,InvalidChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S535\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S536\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS529FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS512();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS529FileOperationResponseChecker)));
                }
                goto label79;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S531\'.");
        label79:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker316() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker317() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker318() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker319() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS529FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S536");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S536");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S537
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS537() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS537");
            this.Manager.Comment("reaching state \'S537\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp160;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp160);
            this.Manager.Comment("reaching state \'S538\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp160, "c of ReadConfig, state S538");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S539\'");
            int temp161 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker320)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker321)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker322)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker323)));
            if ((temp161 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label80;
            }
            if ((temp161 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label80;
            }
            if ((temp161 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label80;
            }
            if ((temp161 == 3)) {
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",IoCtl,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S544\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS537FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS537FileOperationResponseChecker)));
                }
                goto label80;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S539\'.");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker320() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker321() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker322() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker323() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS537FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S544");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S545
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS545() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS545");
            this.Manager.Comment("reaching state \'S545\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp162;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp162);
            this.Manager.Comment("reaching state \'S546\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp162, "c of ReadConfig, state S546");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S547\'");
            int temp163 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker324)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker325)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker326)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker327)));
            if ((temp163 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label81;
            }
            if ((temp163 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label81;
            }
            if ((temp163 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label81;
            }
            if ((temp163 == 3)) {
                this.Manager.Comment("reaching state \'S548\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",IoCtl,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S552\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS545FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS545FileOperationResponseChecker)));
                }
                goto label81;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S547\'.");
        label81:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker324() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker325() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker326() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker327() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS545FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S552");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S552");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S553
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS553() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS553");
            this.Manager.Comment("reaching state \'S553\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp164;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp164);
            this.Manager.Comment("reaching state \'S554\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp164, "c of ReadConfig, state S554");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S555\'");
            int temp165 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker328)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker329)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker330)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker331)));
            if ((temp165 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label82;
            }
            if ((temp165 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label82;
            }
            if ((temp165 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label82;
            }
            if ((temp165 == 3)) {
                this.Manager.Comment("reaching state \'S556\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S557\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S558\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",IoCtl,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S559\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S560\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS553FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS553FileOperationResponseChecker)));
                }
                goto label82;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S555\'.");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker328() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker329() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker330() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker331() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS553FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S560");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S560");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S561
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS561() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS561");
            this.Manager.Comment("reaching state \'S561\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp166;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp166);
            this.Manager.Comment("reaching state \'S562\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp166, "c of ReadConfig, state S562");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S563\'");
            int temp167 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker332)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker333)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker334)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker335)));
            if ((temp167 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label83;
            }
            if ((temp167 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label83;
            }
            if ((temp167 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label83;
            }
            if ((temp167 == 3)) {
                this.Manager.Comment("reaching state \'S564\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S565\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S566\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,IoCtl,DefaultChannelSequence,WithoutReplayFlag,AlternativeParameters)" +
                        "\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S568\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS561FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS487();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS561FileOperationResponseChecker)));
                }
                goto label83;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S563\'.");
        label83:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker332() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker333() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker334() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker335() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS561FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S568");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S568");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S569
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS569() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS569");
            this.Manager.Comment("reaching state \'S569\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp168;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp168);
            this.Manager.Comment("reaching state \'S570\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp168, "c of ReadConfig, state S570");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S571\'");
            int temp169 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker336)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker337)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker338)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker339)));
            if ((temp169 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label84;
            }
            if ((temp169 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label84;
            }
            if ((temp169 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label84;
            }
            if ((temp169 == 3)) {
                this.Manager.Comment("reaching state \'S572\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S573\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S574\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,InvalidChannelS" +
                        "equence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S575\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S576\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS569FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S577\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS569FileOperationResponseChecker)));
                }
                goto label84;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S571\'.");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker336() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker337() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker338() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker339() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS569FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS578() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS578");
            this.Manager.Comment("reaching state \'S578\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp170;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp170);
            this.Manager.Comment("reaching state \'S579\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp170, "c of ReadConfig, state S579");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S580\'");
            int temp171 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker340)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker341)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker342)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker343)));
            if ((temp171 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label85;
            }
            if ((temp171 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label85;
            }
            if ((temp171 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label85;
            }
            if ((temp171 == 3)) {
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S583\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,IoCtl,ChannelSequence" +
                        "IncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S584\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S585\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS578FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS478();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS578FileOperationResponseChecker)));
                }
                goto label85;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S580\'.");
        label85:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker340() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker341() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker342() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker343() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS578FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S585");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S585");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS586() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS586");
            this.Manager.Comment("reaching state \'S586\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp172;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp172);
            this.Manager.Comment("reaching state \'S587\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp172, "c of ReadConfig, state S587");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S588\'");
            int temp173 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker344)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker345)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker346)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker347)));
            if ((temp173 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label86;
            }
            if ((temp173 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label86;
            }
            if ((temp173 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label86;
            }
            if ((temp173 == 3)) {
                this.Manager.Comment("reaching state \'S589\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S590\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S591\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,IoCtl,DefaultChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S592\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S593\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS586FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS594();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS586FileOperationResponseChecker)));
                }
                goto label86;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S588\'.");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker344() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker345() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker346() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker347() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS586FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S593");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S593");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S595
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS595() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS595");
            this.Manager.Comment("reaching state \'S595\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp174;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp174);
            this.Manager.Comment("reaching state \'S596\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp174, "c of ReadConfig, state S596");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S597\'");
            int temp175 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker348)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker349)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker350)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker351)));
            if ((temp175 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label87;
            }
            if ((temp175 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label87;
            }
            if ((temp175 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label87;
            }
            if ((temp175 == 3)) {
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S599\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S600\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,IoCtl,ChannelSequenceBoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S601\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S602\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS595FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS595FileOperationResponseChecker)));
                }
                goto label87;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S597\'.");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker348() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker349() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker350() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker351() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS595FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S602");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S602");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS603() {
            this.Manager.Comment("reaching state \'S603\'");
        }
        #endregion
        
        #region Test Starting in S604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS604() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS604");
            this.Manager.Comment("reaching state \'S604\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp176;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp176);
            this.Manager.Comment("reaching state \'S605\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp176, "c of ReadConfig, state S605");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S606\'");
            int temp177 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker352)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker353)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker354)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker355)));
            if ((temp177 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label88;
            }
            if ((temp177 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label88;
            }
            if ((temp177 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label88;
            }
            if ((temp177 == 3)) {
                this.Manager.Comment("reaching state \'S607\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S608\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,IoCtl,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameter" +
                        "s)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S611\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS604FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS604FileOperationResponseChecker)));
                }
                goto label88;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S606\'.");
        label88:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker352() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker353() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker354() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker355() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS604FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S611");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S611");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S61
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS61() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS61");
            this.Manager.Comment("reaching state \'S61\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp178;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp178);
            this.Manager.Comment("reaching state \'S62\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp178, "c of ReadConfig, state S62");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S63\'");
            int temp179 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker356)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker357)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker358)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker359)));
            if ((temp179 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label89;
            }
            if ((temp179 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label89;
            }
            if ((temp179 == 2)) {
                this.Manager.Comment("reaching state \'S64\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,Read,InvalidChannel" +
                        "Sequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S65\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S66\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS61FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS48();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS61FileOperationResponseChecker)));
                }
                goto label89;
            }
            if ((temp179 == 3)) {
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S68\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S69\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Write,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameter" +
                        "s)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S70\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S71\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS61FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS61FileOperationResponseChecker1)));
                }
                goto label89;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S63\'.");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker356() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker357() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker358() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS61FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S66");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker359() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS61FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S71");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S71");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS612() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS612");
            this.Manager.Comment("reaching state \'S612\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp180;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp180);
            this.Manager.Comment("reaching state \'S613\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp180, "c of ReadConfig, state S613");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S614\'");
            int temp181 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker360)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker361)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker362)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker363)));
            if ((temp181 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label90;
            }
            if ((temp181 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label90;
            }
            if ((temp181 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label90;
            }
            if ((temp181 == 3)) {
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S616\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,IoCtl,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S619\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS612FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS620();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS612FileOperationResponseChecker)));
                }
                goto label90;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S614\'.");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker360() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker361() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker362() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker363() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS612FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S619");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S619");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS620() {
            this.Manager.Comment("reaching state \'S620\'");
        }
        #endregion
        
        #region Test Starting in S621
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS621() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS621");
            this.Manager.Comment("reaching state \'S621\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp182;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp182);
            this.Manager.Comment("reaching state \'S622\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp182, "c of ReadConfig, state S622");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S623\'");
            int temp183 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker364)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker365)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker366)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker367)));
            if ((temp183 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label91;
            }
            if ((temp183 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label91;
            }
            if ((temp183 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label91;
            }
            if ((temp183 == 3)) {
                this.Manager.Comment("reaching state \'S624\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,IoCtl,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S628\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS621FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS620();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS621FileOperationResponseChecker)));
                }
                goto label91;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S623\'.");
        label91:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker364() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker365() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker366() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker367() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS621FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S628");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S628");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S629
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS629() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS629");
            this.Manager.Comment("reaching state \'S629\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp184;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp184);
            this.Manager.Comment("reaching state \'S630\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp184, "c of ReadConfig, state S630");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S631\'");
            int temp185 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker368)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker369)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker370)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker371)));
            if ((temp185 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label92;
            }
            if ((temp185 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label92;
            }
            if ((temp185 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label92;
            }
            if ((temp185 == 3)) {
                this.Manager.Comment("reaching state \'S632\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,IoCtl,ChannelSequenc" +
                        "eIncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S636\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS629FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS594();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS629FileOperationResponseChecker)));
                }
                goto label92;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S631\'.");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker368() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker369() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker370() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker371() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS629FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S636");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S636");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S637
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS637() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS637");
            this.Manager.Comment("reaching state \'S637\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp186);
            this.Manager.Comment("reaching state \'S638\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp186, "c of ReadConfig, state S638");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S639\'");
            int temp187 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker372)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker373)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker374)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker375)));
            if ((temp187 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label93;
            }
            if ((temp187 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label93;
            }
            if ((temp187 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label93;
            }
            if ((temp187 == 3)) {
                this.Manager.Comment("reaching state \'S640\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S641\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S642\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,IoCtl,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S643\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S644\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS637FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS637FileOperationResponseChecker)));
                }
                goto label93;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S639\'.");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker372() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker373() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker374() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker375() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS637FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S644");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S644");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S645
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS645() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS645");
            this.Manager.Comment("reaching state \'S645\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp188;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp188);
            this.Manager.Comment("reaching state \'S646\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp188, "c of ReadConfig, state S646");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S647\'");
            int temp189 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker376)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker377)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker378)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker379)));
            if ((temp189 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label94;
            }
            if ((temp189 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label94;
            }
            if ((temp189 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label94;
            }
            if ((temp189 == 3)) {
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S650\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,IoCtl,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S651\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S652\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS645FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS645FileOperationResponseChecker)));
                }
                goto label94;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S647\'.");
        label94:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker376() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker377() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker378() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker379() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS645FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S652");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S652");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S653
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS653() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS653");
            this.Manager.Comment("reaching state \'S653\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp190;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp190);
            this.Manager.Comment("reaching state \'S654\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp190, "c of ReadConfig, state S654");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S655\'");
            int temp191 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker380)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker381)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker382)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker383)));
            if ((temp191 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label95;
            }
            if ((temp191 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label95;
            }
            if ((temp191 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label95;
            }
            if ((temp191 == 3)) {
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,IoCtl,ChannelSequenceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S659\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S660\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS653FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS653FileOperationResponseChecker)));
                }
                goto label95;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S655\'.");
        label95:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker380() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker381() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker382() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker383() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS653FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S660");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S660");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S661
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS661() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS661");
            this.Manager.Comment("reaching state \'S661\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp192;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp192);
            this.Manager.Comment("reaching state \'S662\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp192, "c of ReadConfig, state S662");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S663\'");
            int temp193 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker384)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker385)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker386)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker387)));
            if ((temp193 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label96;
            }
            if ((temp193 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label96;
            }
            if ((temp193 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label96;
            }
            if ((temp193 == 3)) {
                this.Manager.Comment("reaching state \'S664\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S665\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S666\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,IoCtl,DefaultChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S667\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S668\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS661FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS661FileOperationResponseChecker)));
                }
                goto label96;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S663\'.");
        label96:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker384() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker385() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker386() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker387() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS661FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S668");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S668");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S669
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS669() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS669");
            this.Manager.Comment("reaching state \'S669\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp194;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp194);
            this.Manager.Comment("reaching state \'S670\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp194, "c of ReadConfig, state S670");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S671\'");
            int temp195 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker388)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker389)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker390)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker391)));
            if ((temp195 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label97;
            }
            if ((temp195 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label97;
            }
            if ((temp195 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label97;
            }
            if ((temp195 == 3)) {
                this.Manager.Comment("reaching state \'S672\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S673\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S674\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,IoCtl,ChannelSequenceBoundaryValid,WithReplayFlag,DefaultParameters)" +
                        "\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S675\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S676\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS669FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS669FileOperationResponseChecker)));
                }
                goto label97;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S671\'.");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker388() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker389() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker390() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker391() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS669FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S676");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S676");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S677
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS677() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS677");
            this.Manager.Comment("reaching state \'S677\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp196;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp196);
            this.Manager.Comment("reaching state \'S678\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp196, "c of ReadConfig, state S678");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S679\'");
            int temp197 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker392)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker393)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker394)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker395)));
            if ((temp197 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label98;
            }
            if ((temp197 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label98;
            }
            if ((temp197 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label98;
            }
            if ((temp197 == 3)) {
                this.Manager.Comment("reaching state \'S680\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S681\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S682\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,IoCtl,InvalidChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S683\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S684\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS677FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS620();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS677FileOperationResponseChecker)));
                }
                goto label98;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S679\'.");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker392() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker393() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker394() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker395() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS677FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S684");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S684");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S685
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS685() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS685");
            this.Manager.Comment("reaching state \'S685\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp198;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp198);
            this.Manager.Comment("reaching state \'S686\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp198, "c of ReadConfig, state S686");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S687\'");
            int temp199 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker396)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker397)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker398)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker399)));
            if ((temp199 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label99;
            }
            if ((temp199 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label99;
            }
            if ((temp199 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label99;
            }
            if ((temp199 == 3)) {
                this.Manager.Comment("reaching state \'S688\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S689\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S690\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,IoCtl,InvalidChannel" +
                        "Sequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S691\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S692\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS685FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S693\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS685FileOperationResponseChecker)));
                }
                goto label99;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S687\'.");
        label99:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker396() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker397() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker398() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker399() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS685FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S692");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S692");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is IoCtl"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is IoCtl\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS694() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS694");
            this.Manager.Comment("reaching state \'S694\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp200;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp200);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp200, "c of ReadConfig, state S695");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S696\'");
            int temp201 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker400)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker401)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker402)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker403)));
            if ((temp201 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label100;
            }
            if ((temp201 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label100;
            }
            if ((temp201 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label100;
            }
            if ((temp201 == 3)) {
                this.Manager.Comment("reaching state \'S697\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S698\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S699\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,IoCtl,DefaultChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S700\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S701\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS694FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS694FileOperationResponseChecker)));
                }
                goto label100;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S696\'.");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker400() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker401() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker402() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker403() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS694FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S701");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S701");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS702() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS702");
            this.Manager.Comment("reaching state \'S702\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp202;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp202);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp202, "c of ReadConfig, state S703");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S704\'");
            int temp203 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker404)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker405)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker406)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker407)));
            if ((temp203 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label101;
            }
            if ((temp203 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label101;
            }
            if ((temp203 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label101;
            }
            if ((temp203 == 3)) {
                this.Manager.Comment("reaching state \'S705\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,IoCtl)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl);
                this.Manager.Comment("reaching state \'S706\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S707\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,IoCtl,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.IoCtl, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S708\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S709\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS702FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS603();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS702FileOperationResponseChecker)));
                }
                goto label101;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S704\'.");
        label101:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker404() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker405() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker406() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker407() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS702FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S709");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S709");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS710() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS710");
            this.Manager.Comment("reaching state \'S710\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp204;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp204);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp204, "c of ReadConfig, state S711");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S712\'");
            int temp205 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker408)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker409)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker410)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker411)));
            if ((temp205 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label102;
            }
            if ((temp205 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label102;
            }
            if ((temp205 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label102;
            }
            if ((temp205 == 3)) {
                this.Manager.Comment("reaching state \'S713\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S714\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S715\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,DefaultChanne" +
                        "lSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S716\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S717\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS710FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS718();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS710FileOperationResponseChecker)));
                }
                goto label102;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S712\'.");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker408() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker409() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker410() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker411() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS710FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S717");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S717");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S719
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS719() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS719");
            this.Manager.Comment("reaching state \'S719\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp206;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp206);
            this.Manager.Comment("reaching state \'S720\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp206, "c of ReadConfig, state S720");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S721\'");
            int temp207 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker412)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker413)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker414)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker415)));
            if ((temp207 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label103;
            }
            if ((temp207 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label103;
            }
            if ((temp207 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label103;
            }
            if ((temp207 == 3)) {
                this.Manager.Comment("reaching state \'S722\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S723\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S724\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",SetInfo,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S725\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S726\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS719FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS719FileOperationResponseChecker)));
                }
                goto label103;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S721\'.");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker412() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker413() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker414() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker415() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS719FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S726");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S726");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS727() {
            this.Manager.Comment("reaching state \'S727\'");
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS72() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS72");
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp208;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp208);
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp208, "c of ReadConfig, state S73");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S74\'");
            int temp209 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker416)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker417)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker418)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker419)));
            if ((temp209 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label104;
            }
            if ((temp209 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label104;
            }
            if ((temp209 == 2)) {
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb2002,SetInfo,DefaultChan" +
                        "nelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S76\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S77\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS72FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S78\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS72FileOperationResponseChecker)));
                }
                goto label104;
            }
            if ((temp209 == 3)) {
                this.Manager.Comment("reaching state \'S79\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S80\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S81\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Write,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S82\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S83\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS72FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS60();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS72FileOperationResponseChecker1)));
                }
                goto label104;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S74\'.");
        label104:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker416() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker417() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker418() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS72FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S77");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S77");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb2002. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker419() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS72FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S83");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is Write"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is Write\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS728() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS728");
            this.Manager.Comment("reaching state \'S728\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp210;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp210);
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp210, "c of ReadConfig, state S729");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S730\'");
            int temp211 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker420)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker421)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker422)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker423)));
            if ((temp211 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label105;
            }
            if ((temp211 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label105;
            }
            if ((temp211 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label105;
            }
            if ((temp211 == 3)) {
                this.Manager.Comment("reaching state \'S731\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S732\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S733\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",SetInfo,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S734\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S735\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS728FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS728FileOperationResponseChecker)));
                }
                goto label105;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S730\'.");
        label105:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker420() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker421() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker422() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker423() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS728FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S735");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S735");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S736
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS736() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS736");
            this.Manager.Comment("reaching state \'S736\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp212;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp212);
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp212, "c of ReadConfig, state S737");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S738\'");
            int temp213 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker424)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker425)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker426)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker427)));
            if ((temp213 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label106;
            }
            if ((temp213 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label106;
            }
            if ((temp213 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label106;
            }
            if ((temp213 == 3)) {
                this.Manager.Comment("reaching state \'S739\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S740\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S741\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",SetInfo,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S742\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S743\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS736FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS744();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS736FileOperationResponseChecker)));
                }
                goto label106;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S738\'.");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker424() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker425() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker426() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker427() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS736FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S743");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S743");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS744() {
            this.Manager.Comment("reaching state \'S744\'");
        }
        #endregion
        
        #region Test Starting in S745
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS745() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS745");
            this.Manager.Comment("reaching state \'S745\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp214;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp214);
            this.Manager.Comment("reaching state \'S746\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp214, "c of ReadConfig, state S746");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S747\'");
            int temp215 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker428)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker429)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker430)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker431)));
            if ((temp215 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label107;
            }
            if ((temp215 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label107;
            }
            if ((temp215 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label107;
            }
            if ((temp215 == 3)) {
                this.Manager.Comment("reaching state \'S748\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S749\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S750\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",SetInfo,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S751\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S752\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS745FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS745FileOperationResponseChecker)));
                }
                goto label107;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S747\'.");
        label107:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker428() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker429() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker430() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker431() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS745FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S752");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S752");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S753
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS753() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS753");
            this.Manager.Comment("reaching state \'S753\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp216;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp216);
            this.Manager.Comment("reaching state \'S754\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp216, "c of ReadConfig, state S754");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S755\'");
            int temp217 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker432)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker433)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker434)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker435)));
            if ((temp217 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label108;
            }
            if ((temp217 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label108;
            }
            if ((temp217 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label108;
            }
            if ((temp217 == 3)) {
                this.Manager.Comment("reaching state \'S756\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S757\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S758\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,SetInfo,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParamete" +
                        "rs)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S759\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S760\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS753FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS753FileOperationResponseChecker)));
                }
                goto label108;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S755\'.");
        label108:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker432() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker433() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker434() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker435() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS753FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S760");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S760");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S761
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS761() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS761");
            this.Manager.Comment("reaching state \'S761\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp218;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp218);
            this.Manager.Comment("reaching state \'S762\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp218, "c of ReadConfig, state S762");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S763\'");
            int temp219 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker436)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker437)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker438)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker439)));
            if ((temp219 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label109;
            }
            if ((temp219 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label109;
            }
            if ((temp219 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label109;
            }
            if ((temp219 == 3)) {
                this.Manager.Comment("reaching state \'S764\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S765\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S766\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,ChannelSequen" +
                        "ceBoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S767\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S768\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS761FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS718();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS761FileOperationResponseChecker)));
                }
                goto label109;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S763\'.");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker436() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker437() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker438() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker439() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS761FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S768");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S769
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS769() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS769");
            this.Manager.Comment("reaching state \'S769\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp220;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp220);
            this.Manager.Comment("reaching state \'S770\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp220, "c of ReadConfig, state S770");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S771\'");
            int temp221 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker440)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker441)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker442)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker443)));
            if ((temp221 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label110;
            }
            if ((temp221 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label110;
            }
            if ((temp221 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label110;
            }
            if ((temp221 == 3)) {
                this.Manager.Comment("reaching state \'S772\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S773\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S774\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,SetInfo,ChannelSequenceBoundaryValid,WithReplayFlag,DefaultParameters" +
                        ")\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S775\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S776\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS769FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS769FileOperationResponseChecker)));
                }
                goto label110;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S771\'.");
        label110:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker440() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker441() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker442() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker443() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS769FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S776");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S776");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S777
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS777() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS777");
            this.Manager.Comment("reaching state \'S777\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp222;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp222);
            this.Manager.Comment("reaching state \'S778\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp222, "c of ReadConfig, state S778");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S779\'");
            int temp223 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker444)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker445)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker446)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker447)));
            if ((temp223 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label111;
            }
            if ((temp223 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label111;
            }
            if ((temp223 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label111;
            }
            if ((temp223 == 3)) {
                this.Manager.Comment("reaching state \'S780\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S781\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S782\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb30,SetInfo,DefaultChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S783\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S784\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS777FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS777FileOperationResponseChecker)));
                }
                goto label111;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S779\'.");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker444() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker445() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker446() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker447() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS777FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S784");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S784");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S785
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS785() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS785");
            this.Manager.Comment("reaching state \'S785\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp224;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp224);
            this.Manager.Comment("reaching state \'S786\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp224, "c of ReadConfig, state S786");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S787\'");
            int temp225 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker448)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker449)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker450)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker451)));
            if ((temp225 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label112;
            }
            if ((temp225 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label112;
            }
            if ((temp225 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label112;
            }
            if ((temp225 == 3)) {
                this.Manager.Comment("reaching state \'S788\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S789\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S790\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",SetInfo,InvalidChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S791\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S792\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS785FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS744();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS785FileOperationResponseChecker)));
                }
                goto label112;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S787\'.");
        label112:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker448() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker449() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker450() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker451() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS785FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S792");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S792");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S793
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS793() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS793");
            this.Manager.Comment("reaching state \'S793\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp226;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp226);
            this.Manager.Comment("reaching state \'S794\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp226, "c of ReadConfig, state S794");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S795\'");
            int temp227 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker452)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker453)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker454)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker455)));
            if ((temp227 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label113;
            }
            if ((temp227 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label113;
            }
            if ((temp227 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label113;
            }
            if ((temp227 == 3)) {
                this.Manager.Comment("reaching state \'S796\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S797\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S798\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        ",SetInfo,ChannelSequenceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S799\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S800\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS793FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS793FileOperationResponseChecker)));
                }
                goto label113;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S795\'.");
        label113:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker452() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker453() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker454() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker455() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS793FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S800");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S800");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S801
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS801() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS801");
            this.Manager.Comment("reaching state \'S801\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp228;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp228);
            this.Manager.Comment("reaching state \'S802\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp228, "c of ReadConfig, state S802");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S803\'");
            int temp229 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker456)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker457)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker458)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker459)));
            if ((temp229 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label114;
            }
            if ((temp229 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label114;
            }
            if ((temp229 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label114;
            }
            if ((temp229 == 3)) {
                this.Manager.Comment("reaching state \'S804\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S805\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S806\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",SetInfo,DefaultChannelSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S807\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S808\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS801FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS801FileOperationResponseChecker)));
                }
                goto label114;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S803\'.");
        label114:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker456() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker457() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker458() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker459() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS801FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S808");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S808");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S809
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS809() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS809");
            this.Manager.Comment("reaching state \'S809\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp230;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp230);
            this.Manager.Comment("reaching state \'S810\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp230, "c of ReadConfig, state S810");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S811\'");
            int temp231 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker460)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker461)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker462)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker463)));
            if ((temp231 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label115;
            }
            if ((temp231 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label115;
            }
            if ((temp231 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label115;
            }
            if ((temp231 == 3)) {
                this.Manager.Comment("reaching state \'S812\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S813\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S814\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        ",SetInfo,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S815\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S816\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS809FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS727();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS809FileOperationResponseChecker)));
                }
                goto label115;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S811\'.");
        label115:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker460() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker461() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker462() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker463() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS809FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S816");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S816");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S817
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS817() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS817");
            this.Manager.Comment("reaching state \'S817\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp232;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp232);
            this.Manager.Comment("reaching state \'S818\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp232, "c of ReadConfig, state S818");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S819\'");
            int temp233 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker464)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker465)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker466)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker467)));
            if ((temp233 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label116;
            }
            if ((temp233 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label116;
            }
            if ((temp233 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label116;
            }
            if ((temp233 == 3)) {
                this.Manager.Comment("reaching state \'S820\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb30,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S821\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S822\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb30,SetInfo,InvalidChanne" +
                        "lSequence,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S823\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S824\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS817FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S825\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS817FileOperationResponseChecker)));
                }
                goto label116;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S819\'.");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker464() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker465() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker466() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker467() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS817FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S824");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S824");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS826() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS826");
            this.Manager.Comment("reaching state \'S826\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp234;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp234);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp234, "c of ReadConfig, state S827");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S828\'");
            int temp235 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker468)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker469)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker470)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker471)));
            if ((temp235 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label117;
            }
            if ((temp235 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label117;
            }
            if ((temp235 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label117;
            }
            if ((temp235 == 3)) {
                this.Manager.Comment("reaching state \'S829\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S830\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S831\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,SetInfo,DefaultChann" +
                        "elSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S832\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S833\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS826FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS834();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS826FileOperationResponseChecker)));
                }
                goto label117;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S828\'.");
        label117:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker468() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker469() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker470() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker471() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS826FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S833");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S833");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S835
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS835() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS835");
            this.Manager.Comment("reaching state \'S835\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp236;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp236);
            this.Manager.Comment("reaching state \'S836\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp236, "c of ReadConfig, state S836");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S837\'");
            int temp237 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker472)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker473)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker474)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker475)));
            if ((temp237 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label118;
            }
            if ((temp237 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label118;
            }
            if ((temp237 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label118;
            }
            if ((temp237 == 3)) {
                this.Manager.Comment("reaching state \'S838\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S839\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S840\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,SetInfo,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativePar" +
                        "ameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S841\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S842\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS835FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS835FileOperationResponseChecker)));
                }
                goto label118;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S837\'.");
        label118:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker472() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker473() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker474() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker475() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS835FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S842");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S842");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS843() {
            this.Manager.Comment("reaching state \'S843\'");
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS84() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS84");
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp238;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp238);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp238, "c of ReadConfig, state S85");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S86\'");
            int temp239 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker476)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker477)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker478)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker479)));
            if ((temp239 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label119;
            }
            if ((temp239 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label119;
            }
            if ((temp239 == 2)) {
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,Read,ChannelSequenceB" +
                        "oundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S88\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S89\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS84FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS25();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS84FileOperationResponseChecker)));
                }
                goto label119;
            }
            if ((temp239 == 3)) {
                this.Manager.Comment("reaching state \'S90\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Write,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S94\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS84FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS44();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS84FileOperationResponseChecker1)));
                }
                goto label119;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S86\'.");
        label119:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker476() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker477() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker478() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS84FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S89");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is Read"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is Read\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker479() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS84FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S94");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS844() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS844");
            this.Manager.Comment("reaching state \'S844\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp240;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp240);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp240, "c of ReadConfig, state S845");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S846\'");
            int temp241 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker480)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker481)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker482)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker483)));
            if ((temp241 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label120;
            }
            if ((temp241 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label120;
            }
            if ((temp241 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label120;
            }
            if ((temp241 == 3)) {
                this.Manager.Comment("reaching state \'S847\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S848\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S849\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,SetInfo,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S850\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S851\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS844FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS852();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS844FileOperationResponseChecker)));
                }
                goto label120;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S846\'.");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker480() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker481() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker482() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker483() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS844FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S851");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void ReplayFileOperationTestCaseS852() {
            this.Manager.Comment("reaching state \'S852\'");
        }
        #endregion
        
        #region Test Starting in S853
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS853() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS853");
            this.Manager.Comment("reaching state \'S853\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp242;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp242);
            this.Manager.Comment("reaching state \'S854\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp242, "c of ReadConfig, state S854");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S855\'");
            int temp243 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker484)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker485)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker486)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker487)));
            if ((temp243 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label121;
            }
            if ((temp243 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label121;
            }
            if ((temp243 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label121;
            }
            if ((temp243 == 3)) {
                this.Manager.Comment("reaching state \'S856\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S857\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S858\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,SetInfo,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S859\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S860\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS853FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS853FileOperationResponseChecker)));
                }
                goto label121;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S855\'.");
        label121:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker484() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker485() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker486() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker487() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS853FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S860");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S860");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S861
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS861() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS861");
            this.Manager.Comment("reaching state \'S861\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp244;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp244);
            this.Manager.Comment("reaching state \'S862\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp244, "c of ReadConfig, state S862");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S863\'");
            int temp245 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker488)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker489)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker490)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker491)));
            if ((temp245 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label122;
            }
            if ((temp245 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label122;
            }
            if ((temp245 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label122;
            }
            if ((temp245 == 3)) {
                this.Manager.Comment("reaching state \'S864\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S865\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S866\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,SetInfo,ChannelSeque" +
                        "nceBoundaryValid,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S867\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S868\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS861FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS834();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS861FileOperationResponseChecker)));
                }
                goto label122;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S863\'.");
        label122:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker488() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker489() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker490() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker491() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS861FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S868");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S868");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S869
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS869() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS869");
            this.Manager.Comment("reaching state \'S869\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp246;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp246);
            this.Manager.Comment("reaching state \'S870\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp246, "c of ReadConfig, state S870");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S871\'");
            int temp247 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker492)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker493)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker494)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker495)));
            if ((temp247 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label123;
            }
            if ((temp247 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label123;
            }
            if ((temp247 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label123;
            }
            if ((temp247 == 3)) {
                this.Manager.Comment("reaching state \'S872\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S873\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S874\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,SetInfo,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S875\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S876\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS869FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS869FileOperationResponseChecker)));
                }
                goto label123;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S871\'.");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker492() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker493() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker494() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker495() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS869FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S876");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S876");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S877
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS877() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS877");
            this.Manager.Comment("reaching state \'S877\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp248;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp248);
            this.Manager.Comment("reaching state \'S878\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp248, "c of ReadConfig, state S878");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S879\'");
            int temp249 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker496)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker497)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker498)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker499)));
            if ((temp249 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label124;
            }
            if ((temp249 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label124;
            }
            if ((temp249 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label124;
            }
            if ((temp249 == 3)) {
                this.Manager.Comment("reaching state \'S880\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S881\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S882\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,SetInfo,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S883\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S884\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS877FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS852();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS877FileOperationResponseChecker)));
                }
                goto label124;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S879\'.");
        label124:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker496() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker497() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker498() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker499() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS877FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S884");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S884");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S885
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS885() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS885");
            this.Manager.Comment("reaching state \'S885\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp250;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp250);
            this.Manager.Comment("reaching state \'S886\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp250, "c of ReadConfig, state S886");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S887\'");
            int temp251 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker500)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker501)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker502)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker503)));
            if ((temp251 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label125;
            }
            if ((temp251 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label125;
            }
            if ((temp251 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label125;
            }
            if ((temp251 == 3)) {
                this.Manager.Comment("reaching state \'S888\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S889\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S890\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,SetInfo,ChannelSequenceIncrementOne,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S891\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S892\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS885FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS885FileOperationResponseChecker)));
                }
                goto label125;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S887\'.");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker500() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker501() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker502() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker503() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS885FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S892");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S892");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S893
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS893() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS893");
            this.Manager.Comment("reaching state \'S893\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp252;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp252);
            this.Manager.Comment("reaching state \'S894\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp252, "c of ReadConfig, state S894");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S895\'");
            int temp253 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker504)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker505)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker506)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker507)));
            if ((temp253 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label126;
            }
            if ((temp253 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label126;
            }
            if ((temp253 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label126;
            }
            if ((temp253 == 3)) {
                this.Manager.Comment("reaching state \'S896\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S897\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S898\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,SetInfo,DefaultChannelSequence,WithoutReplayFlag,AlternativeParamete" +
                        "rs)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S899\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S900\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS893FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS893FileOperationResponseChecker)));
                }
                goto label126;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S895\'.");
        label126:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker504() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker505() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker506() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker507() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS893FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S900");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S900");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence, the server MUST increment Open.OutstandingRequestCount by 1."", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    ", the server MUST increment Open.OutstandingRequestCount by 1.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S901
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS901() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS901");
            this.Manager.Comment("reaching state \'S901\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp254;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp254);
            this.Manager.Comment("reaching state \'S902\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp254, "c of ReadConfig, state S902");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S903\'");
            int temp255 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker508)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker509)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker510)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker511)));
            if ((temp255 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label127;
            }
            if ((temp255 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label127;
            }
            if ((temp255 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label127;
            }
            if ((temp255 == 3)) {
                this.Manager.Comment("reaching state \'S904\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S905\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S906\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,SetInfo,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S907\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S908\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS901FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS901FileOperationResponseChecker)));
                }
                goto label127;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S903\'.");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker508() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker509() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker510() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker511() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS901FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S908");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S908");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S909
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS909() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS909");
            this.Manager.Comment("reaching state \'S909\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp256;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp256);
            this.Manager.Comment("reaching state \'S910\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp256, "c of ReadConfig, state S910");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S911\'");
            int temp257 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker512)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker513)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker514)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker515)));
            if ((temp257 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label128;
            }
            if ((temp257 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label128;
            }
            if ((temp257 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label128;
            }
            if ((temp257 == 3)) {
                this.Manager.Comment("reaching state \'S912\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S913\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S914\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,SetInfo,ChannelSequenceIncrementOne,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S915\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S916\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS909FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS909FileOperationResponseChecker)));
                }
                goto label128;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S911\'.");
        label128:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker512() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker513() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker514() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker515() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS909FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S916");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S916");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S917
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS917() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS917");
            this.Manager.Comment("reaching state \'S917\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp258;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp258);
            this.Manager.Comment("reaching state \'S918\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp258, "c of ReadConfig, state S918");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S919\'");
            int temp259 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker516)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker517)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker518)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker519)));
            if ((temp259 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label129;
            }
            if ((temp259 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label129;
            }
            if ((temp259 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label129;
            }
            if ((temp259 == 3)) {
                this.Manager.Comment("reaching state \'S920\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S921\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S922\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,SetInfo,InvalidChannelSequence,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S923\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S924\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS917FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS852();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS917FileOperationResponseChecker)));
                }
                goto label129;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S919\'.");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker516() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker517() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker518() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker519() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS917FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S924");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S924");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S925
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS925() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS925");
            this.Manager.Comment("reaching state \'S925\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp260;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp260);
            this.Manager.Comment("reaching state \'S926\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp260, "c of ReadConfig, state S926");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S927\'");
            int temp261 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker520)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker521)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker522)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker523)));
            if ((temp261 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label130;
            }
            if ((temp261 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label130;
            }
            if ((temp261 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label130;
            }
            if ((temp261 == 3)) {
                this.Manager.Comment("reaching state \'S928\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S929\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S930\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,SetInfo,InvalidChann" +
                        "elSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S931\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S932\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS925FileOperationResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S933\'");
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS925FileOperationResponseChecker)));
                }
                goto label130;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S927\'.");
        label130:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker520() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker521() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker522() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker523() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS925FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(STATUS_FILE_NOT_AVAILABLE,c)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_FILE_NOT_AVAILABLE, status, "status of FileOperationResponse, state S932");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S932");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL requests with STATUS_FILE_NOT_AVAILABLE"", ""[TestInfo] requestCommand is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] Otherwise, the server MUST fail SMB2 WRITE, SET_INFO, and IOCTL reques" +
                    "ts with STATUS_FILE_NOT_AVAILABLE\"");
            this.Manager.Checkpoint("\"[TestInfo] requestCommand is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS934() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS934");
            this.Manager.Comment("reaching state \'S934\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp262;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp262);
            this.Manager.Comment("reaching state \'S935\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp262, "c of ReadConfig, state S935");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S936\'");
            int temp263 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker524)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker525)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker526)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker527)));
            if ((temp263 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label131;
            }
            if ((temp263 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label131;
            }
            if ((temp263 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label131;
            }
            if ((temp263 == 3)) {
                this.Manager.Comment("reaching state \'S937\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S938\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S939\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,SetInfo,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S940\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S941\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS934FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS934FileOperationResponseChecker)));
                }
                goto label131;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S936\'.");
        label131:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker524() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker525() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker526() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker527() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS934FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S941");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S941");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S942
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS942() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS942");
            this.Manager.Comment("reaching state \'S942\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp264;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp264);
            this.Manager.Comment("reaching state \'S943\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp264, "c of ReadConfig, state S943");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S944\'");
            int temp265 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker528)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker529)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker530)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker531)));
            if ((temp265 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label132;
            }
            if ((temp265 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label132;
            }
            if ((temp265 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label132;
            }
            if ((temp265 == 3)) {
                this.Manager.Comment("reaching state \'S945\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,SetInfo)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo);
                this.Manager.Comment("reaching state \'S946\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S947\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,SetInfo,ChannelSequenceBoundaryValid,WithReplayFlag,AlternativeParam" +
                        "eters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S948\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S949\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS942FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS843();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS942FileOperationResponseChecker)));
                }
                goto label132;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S944\'.");
        label132:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker528() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker529() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker530() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker531() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS942FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S949");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S949");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header."", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header.""");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S95
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS95() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS95");
            this.Manager.Comment("reaching state \'S95\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp266;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp266);
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp266, "c of ReadConfig, state S96");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S97\'");
            int temp267 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker532)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker533)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker534)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker535)));
            if ((temp267 == 0)) {
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Write)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write);
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Write,ChannelSequenc" +
                        "eIncrementOne,WithoutReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Write, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S104\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S105\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS95FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS31();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS95FileOperationResponseChecker)));
                }
                goto label133;
            }
            if ((temp267 == 1)) {
                ReplayFileOperationTestCaseS15();
                goto label133;
            }
            if ((temp267 == 2)) {
                ReplayFileOperationTestCaseS32();
                goto label133;
            }
            if ((temp267 == 3)) {
                this.Manager.Comment("reaching state \'S98\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb21,SetInfo,ChannelSequen" +
                        "ceIncrementOne,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.SetInfo, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S99\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S100\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS95FileOperationResponseChecker1))) != -1)) {
                    ReplayFileOperationTestCaseS25();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS95FileOperationResponseChecker1)));
                }
                goto label133;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S97\'.");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker532() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS95FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S105");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S105");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        
        private void PreConstraintChecker533() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker534() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker535() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void ReplayFileOperationTestCaseS95FileOperationResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S100");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S100");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to ""2.002"" or ""2.100"", or the command request does not include FileId, this section MUST be skipped"", ""[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo"", ""[TestTag] Compatibility"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If Connection.Dialect is equal to \"2.002\" or \"2.100\", or t" +
                    "he command request does not include FileId, this section MUST be skipped\"");
            this.Manager.Checkpoint("\"[TestInfo] Connection.Dialect is Smb21. The request command is SetInfo\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS950() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS950");
            this.Manager.Comment("reaching state \'S950\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp268;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp268);
            this.Manager.Comment("reaching state \'S951\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp268, "c of ReadConfig, state S951");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S952\'");
            int temp269 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker536)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker537)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker538)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker539)));
            if ((temp269 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label134;
            }
            if ((temp269 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label134;
            }
            if ((temp269 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label134;
            }
            if ((temp269 == 3)) {
                this.Manager.Comment("reaching state \'S953\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S954\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S955\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannel,Smb302,Read,DefaultChannelS" +
                        "equence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S956\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S957\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS950FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS958();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS950FileOperationResponseChecker)));
                }
                goto label134;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S952\'.");
        label134:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker536() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker537() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker538() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker539() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS950FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S957");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S957");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S959
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS959() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS959");
            this.Manager.Comment("reaching state \'S959\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp270;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp270);
            this.Manager.Comment("reaching state \'S960\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp270, "c of ReadConfig, state S960");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S961\'");
            int temp271 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker540)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker541)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker542)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker543)));
            if ((temp271 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label135;
            }
            if ((temp271 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label135;
            }
            if ((temp271 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label135;
            }
            if ((temp271 == 3)) {
                this.Manager.Comment("reaching state \'S962\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S963\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S964\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Read,ChannelSequenceIncrementOne,WithoutReplayFlag,AlternativeParame" +
                        "ters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S965\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S966\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS959FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS959FileOperationResponseChecker)));
                }
                goto label135;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S961\'.");
        label135:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker540() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker541() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker542() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker543() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS959FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S966");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S966");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceIncrementOne"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceIncrementOne\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS968() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS968");
            this.Manager.Comment("reaching state \'S968\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp272;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp272);
            this.Manager.Comment("reaching state \'S969\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp272, "c of ReadConfig, state S969");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S970\'");
            int temp273 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker544)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker545)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker546)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker547)));
            if ((temp273 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label136;
            }
            if ((temp273 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label136;
            }
            if ((temp273 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label136;
            }
            if ((temp273 == 3)) {
                this.Manager.Comment("reaching state \'S971\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S972\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S973\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithMainChannel,Smb30" +
                        "2,Read,InvalidChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S974\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S975\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS968FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS976();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS968FileOperationResponseChecker)));
                }
                goto label136;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S970\'.");
        label136:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker544() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker545() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker546() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker547() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS968FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S975");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S975");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S977
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS977() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS977");
            this.Manager.Comment("reaching state \'S977\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp274;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp274);
            this.Manager.Comment("reaching state \'S978\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp274, "c of ReadConfig, state S978");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S979\'");
            int temp275 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker548)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker549)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker550)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker551)));
            if ((temp275 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label137;
            }
            if ((temp275 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label137;
            }
            if ((temp275 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label137;
            }
            if ((temp275 == 3)) {
                this.Manager.Comment("reaching state \'S980\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S981\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S982\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Read,ChannelSequenceBoundaryValid,WithoutReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.ChannelSequenceBoundaryValid, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S983\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S984\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS977FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS977FileOperationResponseChecker)));
                }
                goto label137;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S979\'.");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker548() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker549() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker550() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker551() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS977FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S984");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S984");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the Flags field of the SMB2 Header:"", ""[TestTag] UnexpectedFields"", ""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header"", ""[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid"", ""[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.OutstandingRequestCount with value 1"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is not set in the F" +
                    "lags field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] Otherwise, if the unsigned difference using 16-bit arithmetic between ChannelSequence and Open.ChannelSequence is less than or equal to 0x7FFF, the server MUST increment Open.OutstandingPreRequestCount by Open.OutstandingRequestCount, and MUST set Open.OutstandingRequestCount to 1. The server MUST set Open.ChannelSequence to ChannelSequence in the SMB2 Header""");
            this.Manager.Checkpoint("\"[TestInfo] ChannelSequence is ChannelSequenceBoundaryValid\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is 0 after increment by Open.Outstand" +
                    "ingRequestCount with value 1\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S985
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS985() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS985");
            this.Manager.Comment("reaching state \'S985\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp276;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp276);
            this.Manager.Comment("reaching state \'S986\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp276, "c of ReadConfig, state S986");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S987\'");
            int temp277 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker552)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker553)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker554)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker555)));
            if ((temp277 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label138;
            }
            if ((temp277 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label138;
            }
            if ((temp277 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label138;
            }
            if ((temp277 == 3)) {
                this.Manager.Comment("reaching state \'S988\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S989\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S990\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(MainChannelWithAlternativeChannel,Smb30" +
                        "2,Read,DefaultChannelSequence,WithReplayFlag,AlternativeParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.MainChannelWithAlternativeChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(1)));
                this.Manager.Comment("reaching state \'S991\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S992\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS985FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS967();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS985FileOperationResponseChecker)));
                }
                goto label138;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S987\'.");
        label138:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker552() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker553() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker554() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker555() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS985FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S992");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S992");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and the following:"", ""[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment Open.OutstandingRequestCount by 1"", ""[TestInfo] Open.OutstandingRequestCount is 1 after increment"", ""[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection.Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Open.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1. "", ""[TestInfo] Open.OutstandingRequestCount is 0 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If ChannelSequence in the SMB2 Header is equal to Open.ChannelSequence" +
                    " and Open.OutstandingPreRequestCount is equal to zero, the server MUST increment" +
                    " Open.OutstandingRequestCount by 1\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 1 after increment\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: For the command requests which include FileId, if Connection." +
                    "Dialect belongs to the SMB 3.x dialect family and ChannelSequence is equal to Op" +
                    "en.ChannelSequence, the server MUST decrement Open.OutstandingRequestCount by 1." +
                    " \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingRequestCount is 0 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
        
        #region Test Starting in S993
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Replay)]
        public void ReplayFileOperationTestCaseS993() {
            this.Manager.BeginTest("ReplayFileOperationTestCaseS993");
            this.Manager.Comment("reaching state \'S993\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig temp278;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IReplayAdapterInstance.ReadConfig(out temp278);
            this.Manager.Comment("reaching state \'S994\'");
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, temp278, "c of ReadConfig, state S994");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.c.Value)), ((object)(null)))) 
                            == false), "Fail to check the assumption : !(c == null)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Comment("reaching state \'S995\'");
            int temp279 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker556)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker557)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker558)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker559)));
            if ((temp279 == 0)) {
                ReplayFileOperationTestCaseS15();
                goto label139;
            }
            if ((temp279 == 1)) {
                ReplayFileOperationTestCaseS32();
                goto label139;
            }
            if ((temp279 == 2)) {
                ReplayFileOperationTestCaseS45();
                goto label139;
            }
            if ((temp279 == 3)) {
                this.Manager.Comment("reaching state \'S996\'");
                this.Manager.Comment("executing step \'call PrepareFileOperation(Smb302,Read)\'");
                this.IReplayAdapterInstance.PrepareFileOperation(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read);
                this.Manager.Comment("reaching state \'S997\'");
                this.Manager.Comment("checking step \'return PrepareFileOperation\'");
                this.Manager.Comment("reaching state \'S998\'");
                this.Manager.Comment("executing step \'call FileOperationRequest(AlternativeChannelWithDisconnectMainCha" +
                        "nnel,Smb302,Read,InvalidChannelSequence,WithReplayFlag,DefaultParameters)\'");
                this.IReplayAdapterInstance.FileOperationRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSwitchChannelType.AlternativeChannelWithDisconnectMainChannel, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommand.Read, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelChannelSequenceType.InvalidChannelSequence, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelSetReplayFlag)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayModelRequestCommandParameters)(0)));
                this.Manager.Comment("reaching state \'S999\'");
                this.Manager.Comment("checking step \'return FileOperationRequest\'");
                this.Manager.Comment("reaching state \'S1000\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS993FileOperationResponseChecker))) != -1)) {
                    ReplayFileOperationTestCaseS976();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(ReplayFileOperationTestCase.FileOperationResponseInfo, null, new FileOperationResponseDelegate1(this.ReplayFileOperationTestCaseS993FileOperationResponseChecker)));
                }
                goto label139;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S995\'.");
        label139:
;
            this.Manager.EndTest();
        }
        
        private void PreConstraintChecker556() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 528");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker557() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker558() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 768");
            this.Manager.Assert((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770), "Fail to check preconstraint : (ushort)c.MaxSmbVersionSupported < 770");
        }
        
        private void PreConstraintChecker559() {
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 514)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 514)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 528)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 528)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 768)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 768)");
            this.Manager.Assert((((((int)(((ushort)(((int)(this.c.Value.MaxSmbVersionSupported)))))) < 770)) 
                            == false), "Fail to check preconstraint : !((ushort)c.MaxSmbVersionSupported < 770)");
        }
        
        private void ReplayFileOperationTestCaseS993FileOperationResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig c) {
            this.Manager.Comment("checking step \'event FileOperationResponse(status,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of FileOperationResponse, state S1000");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c, c, "c of FileOperationResponse, state S1000");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags field of the SMB2 Header:"", ""[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreRequestCount by 1. "", ""[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.c1, this.c, "c1 == c");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Replay.ReplayServerConfig>(this.Manager, this.v2, this.c, "v2 == c");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.2.10: If the SMB2_FLAGS_REPLAY_OPERATION bit is set in the Flags" +
                    " field of the SMB2 Header:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.4.1: Otherwise, the server MUST decrement Open.OutstandingPreReque" +
                    "stCount by 1. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.OutstandingPreRequestCount is -1 after decrement\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
        }
        #endregion
    }
}
