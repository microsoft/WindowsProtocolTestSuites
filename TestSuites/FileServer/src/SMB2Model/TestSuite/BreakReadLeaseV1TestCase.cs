// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BreakReadLeaseV1TestCase : PtfTestClassBase {
        
        public BreakReadLeaseV1TestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void CreateResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c);
        
        public delegate void OnLeaseBreakNotificationDelegate1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState);
        
        public delegate void CreateRequestDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig).MakeByRefType());
        
        static System.Reflection.MethodBase CreateRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateRequest", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType), typeof(uint), typeof(Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType));
        
        static System.Reflection.EventInfo CreateResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "CreateResponse");
        
        static System.Reflection.EventInfo OnLeaseBreakNotificationInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter), "OnLeaseBreakNotification");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter ILeasingAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> c1;
        
        private IVariable<int> leaseFlags;
        
        private IVariable<int> leaseState;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<int> v3;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ILeasingAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ILeasingAdapter))));
            this.Manager.Subscribe(CreateResponseInfo, this.ILeasingAdapterInstance);
            this.Manager.Subscribe(OnLeaseBreakNotificationInfo, this.ILeasingAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("c1");
            this.leaseFlags = this.Manager.CreateVariable<int>("leaseFlags");
            this.leaseState = this.Manager.CreateVariable<int>("leaseState");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<int>("v3");
            this.v4 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS0() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS0ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS0ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS0ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS0ReadConfigChecker3)));
            if ((temp7 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S15\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS17();
                goto label3;
            }
            if ((temp7 == 1)) {
                this.Manager.Comment("reaching state \'S2\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS5();
                goto label3;
            }
            if ((temp7 == 2)) {
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S30\'");
                int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker5)));
                if ((temp6 == 0)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp5;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp5);
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp5, "c of FileOperationToBreakLeaseRequest, state S32");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS33();
                    goto label2;
                }
                if ((temp6 == 1)) {
                    BreakReadLeaseV1TestCaseS37();
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker4)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker5)));
            label2:
;
                goto label3;
            }
            if ((temp7 == 3)) {
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS41();
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS17() {
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS0CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S18\'");
            int temp2 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker1)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S19\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp1;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                        "mb2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp1);
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp1, "c of FileOperationToBreakLeaseRequest, state S20");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS21();
                goto label0;
            }
            if ((temp2 == 1)) {
                BreakReadLeaseV1TestCaseS25();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker1)));
        label0:
;
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS21() {
            this.Manager.Comment("reaching state \'S21\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S24\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S21");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S18");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S18");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S18");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS5() {
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS0CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S6\'");
            int temp4 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker3)));
            if ((temp4 == 0)) {
                BreakReadLeaseV1TestCaseS13();
                goto label1;
            }
            if ((temp4 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp3;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                        "fferentLeaseKey,Smb30,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp3);
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp3, "c of FileOperationToBreakLeaseRequest, state S8");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS9();
                goto label1;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker3)));
        label1:
;
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S6");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S6");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S6");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS9() {
            this.Manager.Comment("reaching state \'S9\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S12\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S9");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S9");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S30");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S30");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS33() {
            this.Manager.Comment("reaching state \'S33\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S36\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS0OnLeaseBreakNotificationChecker2(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S33");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S33");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S33");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S33");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S30");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S30");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S30");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S30");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S30");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS37() {
            this.Manager.Comment("reaching state \'S37\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S1");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS0CreateRequestChecker2)));
            this.Manager.Comment("reaching state \'S42\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker6))) != -1)) {
                BreakReadLeaseV1TestCaseS43();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS0CreateResponseChecker6)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateRequestChecker2() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS0CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S42");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S42");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of CreateResponse, state S42");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS43() {
            this.Manager.Comment("reaching state \'S43\'");
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS114() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS114");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp8;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp8);
            this.Manager.AddReturn(ReadConfigInfo, null, temp8);
            this.Manager.Comment("reaching state \'S115\'");
            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS114ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS114ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS114ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS114ReadConfigChecker3)));
            if ((temp14 == 0)) {
                this.Manager.Comment("reaching state \'S116\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S117\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S118\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S119\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S120\'");
                int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker1)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S121\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp9;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp9);
                    this.Manager.Comment("reaching state \'S122\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp9, "c of FileOperationToBreakLeaseRequest, state S122");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS53();
                    goto label4;
                }
                if ((temp10 == 1)) {
                    BreakReadLeaseV1TestCaseS57();
                    goto label4;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker1)));
            label4:
;
                goto label7;
            }
            if ((temp14 == 1)) {
                this.Manager.Comment("reaching state \'S123\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S124\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S125\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S126\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S127\'");
                int temp12 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker3)));
                if ((temp12 == 0)) {
                    this.Manager.Comment("reaching state \'S128\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp11;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp11);
                    this.Manager.Comment("reaching state \'S129\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp11, "c of FileOperationToBreakLeaseRequest, state S129");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS65();
                    goto label5;
                }
                if ((temp12 == 1)) {
                    BreakReadLeaseV1TestCaseS69();
                    goto label5;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker3)));
            label5:
;
                goto label7;
            }
            if ((temp14 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label7;
            }
            if ((temp14 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS114ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S115");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS53() {
            this.Manager.Comment("reaching state \'S53\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S54\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S55\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S56\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S53");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S53");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S120");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S120");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S120");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS57() {
            this.Manager.Comment("reaching state \'S57\'");
        }
        
        private void BreakReadLeaseV1TestCaseS114ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S115");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S127");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S127");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS65() {
            this.Manager.Comment("reaching state \'S65\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker1))) != -1)) {
                this.Manager.Comment("reaching state \'S66\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S67\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S68\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker1)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS114OnLeaseBreakNotificationChecker1(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S65");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S65");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S127");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S127");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S127");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S127");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S127");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS69() {
            this.Manager.Comment("reaching state \'S69\'");
        }
        
        private void BreakReadLeaseV1TestCaseS114ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S115");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS70() {
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                    "NONE,EmptyParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.AddReturn(CreateRequestInfo, null);
            BreakReadLeaseV1TestCaseS73();
        }
        
        private void BreakReadLeaseV1TestCaseS73() {
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS114CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S74\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker4))) != -1)) {
                BreakReadLeaseV1TestCaseS43();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker4)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S74");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S74");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S74");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S74");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of CreateResponse, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS114ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S115");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS75() {
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S76\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                    "NONE,EmptyParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.AddReturn(CreateRequestInfo, null);
            BreakReadLeaseV1TestCaseS78();
        }
        
        private void BreakReadLeaseV1TestCaseS78() {
            this.Manager.Comment("reaching state \'S78\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS114CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S79\'");
            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker5)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker6)));
            if ((temp13 == 0)) {
                BreakReadLeaseV1TestCaseS80();
                goto label6;
            }
            if ((temp13 == 1)) {
                BreakReadLeaseV1TestCaseS81();
                goto label6;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker5)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS114CreateResponseChecker6)));
        label6:
;
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S79");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S79");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S79");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S79");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S79");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS80() {
            this.Manager.Comment("reaching state \'S80\'");
        }
        
        private void BreakReadLeaseV1TestCaseS114CreateResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S79");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S79");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S79");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S79");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS81() {
            this.Manager.Comment("reaching state \'S81\'");
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS130() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS130");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp15;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp15);
            this.Manager.AddReturn(ReadConfigInfo, null, temp15);
            this.Manager.Comment("reaching state \'S131\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS130ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS130ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS130ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS130ReadConfigChecker3)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S132\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S133\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S134\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S135\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S136\'");
                int temp17 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker1)));
                if ((temp17 == 0)) {
                    this.Manager.Comment("reaching state \'S137\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp16;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp16);
                    this.Manager.Comment("reaching state \'S138\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp16, "c of FileOperationToBreakLeaseRequest, state S138");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS139();
                    goto label8;
                }
                if ((temp17 == 1)) {
                    BreakReadLeaseV1TestCaseS143();
                    goto label8;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker1)));
            label8:
;
                goto label10;
            }
            if ((temp20 == 1)) {
                this.Manager.Comment("reaching state \'S144\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S145\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S146\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS147();
                goto label10;
            }
            if ((temp20 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label10;
            }
            if ((temp20 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS130ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S131");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS130CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S136");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S136");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S136");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS139() {
            this.Manager.Comment("reaching state \'S139\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS130OnLeaseBreakNotificationChecker))) != -1)) {
                this.Manager.Comment("reaching state \'S140\'");
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseResponse()\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseResponse();
                this.Manager.Comment("reaching state \'S141\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseResponse\'");
                this.Manager.Comment("reaching state \'S142\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.OnLeaseBreakNotificationInfo, null, new OnLeaseBreakNotificationDelegate1(this.BreakReadLeaseV1TestCaseS130OnLeaseBreakNotificationChecker)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS130OnLeaseBreakNotificationChecker(ushort newEpoch, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values flags, uint currentLeaseState, uint newLeaseState) {
            this.Manager.Comment("checking step \'event OnLeaseBreakNotification(0,None,1,0)\'");
            try {
                TestManagerHelpers.AssertAreEqual<ushort>(this.Manager, 0, newEpoch, "newEpoch of OnLeaseBreakNotification, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LEASE_BREAK_Notification_Packet_Flags_Values)(0)), flags, "flags of OnLeaseBreakNotification, state S139");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, currentLeaseState, "currentLeaseState of OnLeaseBreakNotification, state S139");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, newLeaseState, "newLeaseState of OnLeaseBreakNotification, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. "", ""[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.""");
                throw;
            }
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.4.7: If Lease.LeaseState is SMB2_LEASE_READ_CACHING, the server MUST set the Flags field of the message to zero and MUST set Open.OplockState to None for all opens in Lease.LeaseOpens. The server MUST set Lease.Breaking to FALSE, and the LeaseKey field MUST be set to Lease.LeaseKey. """);
            this.Manager.Checkpoint("\"[TestInfo] Lease.LeaseState is SMB2_LEASE_READ_CACHING.\"");
        }
        
        private void BreakReadLeaseV1TestCaseS130CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S136");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S136");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S136");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS143() {
            this.Manager.Comment("reaching state \'S143\'");
        }
        
        private void BreakReadLeaseV1TestCaseS130ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S131");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS147() {
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS130CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S148\'");
            int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker3)));
            if ((temp19 == 0)) {
                this.Manager.Comment("reaching state \'S149\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp18;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                        "fferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp18);
                this.Manager.Comment("reaching state \'S150\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp18, "c of FileOperationToBreakLeaseRequest, state S150");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS65();
                goto label9;
            }
            if ((temp19 == 1)) {
                BreakReadLeaseV1TestCaseS69();
                goto label9;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS130CreateResponseChecker3)));
        label9:
;
        }
        
        private void BreakReadLeaseV1TestCaseS130CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS130CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S148");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS130CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S148");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S148");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS130ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S131");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS130ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S131");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S151
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS151() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS151");
            this.Manager.Comment("reaching state \'S151\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp21;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp21);
            this.Manager.AddReturn(ReadConfigInfo, null, temp21);
            this.Manager.Comment("reaching state \'S152\'");
            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS151ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS151ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS151ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS151ReadConfigChecker3)));
            if ((temp24 == 0)) {
                this.Manager.Comment("reaching state \'S153\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S154\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S155\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S156\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S157\'");
                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS151CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS151CreateResponseChecker1)));
                if ((temp23 == 0)) {
                    BreakReadLeaseV1TestCaseS143();
                    goto label11;
                }
                if ((temp23 == 1)) {
                    this.Manager.Comment("reaching state \'S158\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp22;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp22);
                    this.Manager.Comment("reaching state \'S159\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp22, "c of FileOperationToBreakLeaseRequest, state S159");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS139();
                    goto label11;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS151CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS151CreateResponseChecker1)));
            label11:
;
                goto label12;
            }
            if ((temp24 == 1)) {
                this.Manager.Comment("reaching state \'S160\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S161\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S162\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS147();
                goto label12;
            }
            if ((temp24 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label12;
            }
            if ((temp24 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label12;
            }
            throw new InvalidOperationException("never reached");
        label12:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS151ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS151CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S157");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS151CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S157");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S157");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S157");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S157");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S157");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS151ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS151ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S152");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS151ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S152");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S163
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS163() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS163");
            this.Manager.Comment("reaching state \'S163\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp25;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp25);
            this.Manager.AddReturn(ReadConfigInfo, null, temp25);
            this.Manager.Comment("reaching state \'S164\'");
            int temp30 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS163ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS163ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS163ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS163ReadConfigChecker3)));
            if ((temp30 == 0)) {
                this.Manager.Comment("reaching state \'S165\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S166\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S167\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S168\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S169\'");
                int temp27 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker1)));
                if ((temp27 == 0)) {
                    BreakReadLeaseV1TestCaseS143();
                    goto label13;
                }
                if ((temp27 == 1)) {
                    this.Manager.Comment("reaching state \'S170\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp26;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp26);
                    this.Manager.Comment("reaching state \'S171\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp26, "c of FileOperationToBreakLeaseRequest, state S171");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS139();
                    goto label13;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker1)));
            label13:
;
                goto label15;
            }
            if ((temp30 == 1)) {
                this.Manager.Comment("reaching state \'S172\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S173\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS175();
                goto label15;
            }
            if ((temp30 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label15;
            }
            if ((temp30 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS163ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S164");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS163CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS163CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S169");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S169");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S169");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS163ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S164");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS175() {
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS163CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S176\'");
            int temp29 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker3)));
            if ((temp29 == 0)) {
                this.Manager.Comment("reaching state \'S177\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp28;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp28);
                this.Manager.Comment("reaching state \'S178\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp28, "c of FileOperationToBreakLeaseRequest, state S178");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS65();
                goto label14;
            }
            if ((temp29 == 1)) {
                BreakReadLeaseV1TestCaseS69();
                goto label14;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS163CreateResponseChecker3)));
        label14:
;
        }
        
        private void BreakReadLeaseV1TestCaseS163CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS163CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S176");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS163CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS163ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S164");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS163ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S164");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S179
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS179() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS179");
            this.Manager.Comment("reaching state \'S179\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp31;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp31);
            this.Manager.AddReturn(ReadConfigInfo, null, temp31);
            this.Manager.Comment("reaching state \'S180\'");
            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS179ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS179ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS179ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS179ReadConfigChecker3)));
            if ((temp36 == 0)) {
                this.Manager.Comment("reaching state \'S181\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S182\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S183\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS184();
                goto label18;
            }
            if ((temp36 == 1)) {
                this.Manager.Comment("reaching state \'S188\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S189\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S190\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS191();
                goto label18;
            }
            if ((temp36 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label18;
            }
            if ((temp36 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS179ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS184() {
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS179CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S185\'");
            int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker1)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S186\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp32;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp32);
                this.Manager.Comment("reaching state \'S187\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp32, "c of FileOperationToBreakLeaseRequest, state S187");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS65();
                goto label16;
            }
            if ((temp33 == 1)) {
                BreakReadLeaseV1TestCaseS69();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker1)));
        label16:
;
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S185");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S185");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S185");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S185");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS179ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS191() {
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS179CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S192\'");
            int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker3)));
            if ((temp35 == 0)) {
                this.Manager.Comment("reaching state \'S193\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp34;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                        "mb2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp34);
                this.Manager.Comment("reaching state \'S194\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp34, "c of FileOperationToBreakLeaseRequest, state S194");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS53();
                goto label17;
            }
            if ((temp35 == 1)) {
                BreakReadLeaseV1TestCaseS57();
                goto label17;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS179CreateResponseChecker3)));
        label17:
;
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS179CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S192");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S192");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S192");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S192");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS179ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S180");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS179ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S180");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S195
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS195() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS195");
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp37;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp37);
            this.Manager.AddReturn(ReadConfigInfo, null, temp37);
            this.Manager.Comment("reaching state \'S196\'");
            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS195ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS195ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS195ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS195ReadConfigChecker3)));
            if ((temp40 == 0)) {
                this.Manager.Comment("reaching state \'S197\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S198\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S199\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS184();
                goto label20;
            }
            if ((temp40 == 1)) {
                this.Manager.Comment("reaching state \'S200\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S201\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S202\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS203();
                goto label20;
            }
            if ((temp40 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label20;
            }
            if ((temp40 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS195ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS195ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS203() {
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS195CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S204\'");
            int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS195CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS195CreateResponseChecker1)));
            if ((temp39 == 0)) {
                this.Manager.Comment("reaching state \'S205\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp38;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                        "fferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp38);
                this.Manager.Comment("reaching state \'S206\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp38, "c of FileOperationToBreakLeaseRequest, state S206");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS53();
                goto label19;
            }
            if ((temp39 == 1)) {
                BreakReadLeaseV1TestCaseS57();
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS195CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS195CreateResponseChecker1)));
        label19:
;
        }
        
        private void BreakReadLeaseV1TestCaseS195CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS195CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S204");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS195CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS195ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S196");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS195ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S196");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S207
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS207() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS207");
            this.Manager.Comment("reaching state \'S207\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp41;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp41);
            this.Manager.AddReturn(ReadConfigInfo, null, temp41);
            this.Manager.Comment("reaching state \'S208\'");
            int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS207ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS207ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS207ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS207ReadConfigChecker3)));
            if ((temp46 == 0)) {
                this.Manager.Comment("reaching state \'S209\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S210\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S211\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS212();
                goto label23;
            }
            if ((temp46 == 1)) {
                this.Manager.Comment("reaching state \'S216\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S217\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S218\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS219();
                goto label23;
            }
            if ((temp46 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label23;
            }
            if ((temp46 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS207ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S208");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS212() {
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS207CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S213\'");
            int temp43 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker1)));
            if ((temp43 == 0)) {
                this.Manager.Comment("reaching state \'S214\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp42;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                        "mb2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp42);
                this.Manager.Comment("reaching state \'S215\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp42, "c of FileOperationToBreakLeaseRequest, state S215");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS65();
                goto label21;
            }
            if ((temp43 == 1)) {
                BreakReadLeaseV1TestCaseS69();
                goto label21;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker1)));
        label21:
;
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S213");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S213");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS207ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S208");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS219() {
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS207CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S220\'");
            int temp45 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker3)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S221\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp44;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                        "DifferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp44);
                this.Manager.Comment("reaching state \'S222\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp44, "c of FileOperationToBreakLeaseRequest, state S222");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS53();
                goto label22;
            }
            if ((temp45 == 1)) {
                BreakReadLeaseV1TestCaseS57();
                goto label22;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS207CreateResponseChecker3)));
        label22:
;
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS207CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S220");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS207ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S208");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS207ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S208");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S223
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS223() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS223");
            this.Manager.Comment("reaching state \'S223\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp47;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp47);
            this.Manager.AddReturn(ReadConfigInfo, null, temp47);
            this.Manager.Comment("reaching state \'S224\'");
            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS223ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS223ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS223ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS223ReadConfigChecker3)));
            if ((temp48 == 0)) {
                this.Manager.Comment("reaching state \'S225\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S226\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S227\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS212();
                goto label24;
            }
            if ((temp48 == 1)) {
                this.Manager.Comment("reaching state \'S228\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S229\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S230\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS219();
                goto label24;
            }
            if ((temp48 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label24;
            }
            if ((temp48 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label24;
            }
            throw new InvalidOperationException("never reached");
        label24:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS223ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S224");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS223ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S224");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS223ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S224");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS223ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S224");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S231
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS231() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS231");
            this.Manager.Comment("reaching state \'S231\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp49;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp49);
            this.Manager.AddReturn(ReadConfigInfo, null, temp49);
            this.Manager.Comment("reaching state \'S232\'");
            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS231ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS231ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS231ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS231ReadConfigChecker3)));
            if ((temp54 == 0)) {
                this.Manager.Comment("reaching state \'S233\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S234\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S235\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S236\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S237\'");
                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker1)));
                if ((temp51 == 0)) {
                    BreakReadLeaseV1TestCaseS13();
                    goto label25;
                }
                if ((temp51 == 1)) {
                    this.Manager.Comment("reaching state \'S238\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp50;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp50);
                    this.Manager.Comment("reaching state \'S239\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp50, "c of FileOperationToBreakLeaseRequest, state S239");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS9();
                    goto label25;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker1)));
            label25:
;
                goto label27;
            }
            if ((temp54 == 1)) {
                this.Manager.Comment("reaching state \'S240\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S241\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S242\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS243();
                goto label27;
            }
            if ((temp54 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label27;
            }
            if ((temp54 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label27;
            }
            throw new InvalidOperationException("never reached");
        label27:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS231ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S232");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS231CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S237");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S237");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S237");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS231CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S237");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S237");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S237");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS231ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S232");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS243() {
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS231CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S244\'");
            int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker3)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S245\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp52;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                        "fferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp52);
                this.Manager.Comment("reaching state \'S246\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp52, "c of FileOperationToBreakLeaseRequest, state S246");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS53();
                goto label26;
            }
            if ((temp53 == 1)) {
                BreakReadLeaseV1TestCaseS57();
                goto label26;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS231CreateResponseChecker3)));
        label26:
;
        }
        
        private void BreakReadLeaseV1TestCaseS231CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS231CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S244");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS231CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S244");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S244");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS231ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S232");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS231ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S232");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S247
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS247() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS247");
            this.Manager.Comment("reaching state \'S247\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp55;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp55);
            this.Manager.AddReturn(ReadConfigInfo, null, temp55);
            this.Manager.Comment("reaching state \'S248\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS247ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS247ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS247ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS247ReadConfigChecker3)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S249\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S250\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S251\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S252\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S253\'");
                int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS247CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS247CreateResponseChecker1)));
                if ((temp57 == 0)) {
                    BreakReadLeaseV1TestCaseS13();
                    goto label28;
                }
                if ((temp57 == 1)) {
                    this.Manager.Comment("reaching state \'S254\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp56;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp56);
                    this.Manager.Comment("reaching state \'S255\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp56, "c of FileOperationToBreakLeaseRequest, state S255");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS9();
                    goto label28;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS247CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS247CreateResponseChecker1)));
            label28:
;
                goto label29;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S256\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S257\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S258\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS191();
                goto label29;
            }
            if ((temp58 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label29;
            }
            if ((temp58 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label29;
            }
            throw new InvalidOperationException("never reached");
        label29:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS247ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS247CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS247CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S253");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S253");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS247ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS247ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S248");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS247ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S248");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S259
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS259() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS259");
            this.Manager.Comment("reaching state \'S259\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp59;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp59);
            this.Manager.AddReturn(ReadConfigInfo, null, temp59);
            this.Manager.Comment("reaching state \'S260\'");
            int temp62 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS259ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS259ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS259ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS259ReadConfigChecker3)));
            if ((temp62 == 0)) {
                this.Manager.Comment("reaching state \'S261\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S262\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S263\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S264\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S265\'");
                int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS259CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS259CreateResponseChecker1)));
                if ((temp61 == 0)) {
                    BreakReadLeaseV1TestCaseS13();
                    goto label30;
                }
                if ((temp61 == 1)) {
                    this.Manager.Comment("reaching state \'S266\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp60;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                            "DifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp60);
                    this.Manager.Comment("reaching state \'S267\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp60, "c of FileOperationToBreakLeaseRequest, state S267");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS9();
                    goto label30;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS259CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS259CreateResponseChecker1)));
            label30:
;
                goto label31;
            }
            if ((temp62 == 1)) {
                this.Manager.Comment("reaching state \'S268\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S269\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S270\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS243();
                goto label31;
            }
            if ((temp62 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label31;
            }
            if ((temp62 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS259ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS259CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S265");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S265");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S265");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS259CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S265");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S265");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S265");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S265");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS259ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS259ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S260");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS259ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S260");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S271
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS271() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS271");
            this.Manager.Comment("reaching state \'S271\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp63;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp63);
            this.Manager.AddReturn(ReadConfigInfo, null, temp63);
            this.Manager.Comment("reaching state \'S272\'");
            int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS271ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS271ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS271ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS271ReadConfigChecker3)));
            if ((temp66 == 0)) {
                this.Manager.Comment("reaching state \'S273\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS276();
                goto label34;
            }
            if ((temp66 == 1)) {
                BreakReadLeaseV1TestCaseS278();
                goto label34;
            }
            if ((temp66 == 2)) {
                BreakReadLeaseV1TestCaseS285();
                goto label34;
            }
            if ((temp66 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label34;
            }
            throw new InvalidOperationException("never reached");
        label34:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS271ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S272");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS276() {
            this.Manager.Comment("reaching state \'S276\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS271CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S277\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker))) != -1)) {
                BreakReadLeaseV1TestCaseS43();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S277");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S277");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S277");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of CreateResponse, state S277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS271ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS278() {
            this.Manager.Comment("reaching state \'S278\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S280\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                    "NONE,EmptyParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.AddReturn(CreateRequestInfo, null);
            BreakReadLeaseV1TestCaseS281();
        }
        
        private void BreakReadLeaseV1TestCaseS281() {
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS271CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S282\'");
            int temp64 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker2)));
            if ((temp64 == 0)) {
                BreakReadLeaseV1TestCaseS283();
                goto label32;
            }
            if ((temp64 == 1)) {
                BreakReadLeaseV1TestCaseS284();
                goto label32;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker2)));
        label32:
;
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S282");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S282");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S282");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS283() {
            this.Manager.Comment("reaching state \'S283\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S282");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S282");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S282");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S282");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S282");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS284() {
            this.Manager.Comment("reaching state \'S284\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS285() {
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
            this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
            this.Manager.Comment("reaching state \'S286\'");
            this.Manager.Comment("checking step \'return SetupConnection\'");
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                    "NONE,EmptyParentLeaseKey)\'");
            this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.AddReturn(CreateRequestInfo, null);
            BreakReadLeaseV1TestCaseS288();
        }
        
        private void BreakReadLeaseV1TestCaseS288() {
            this.Manager.Comment("reaching state \'S288\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS271CreateRequestChecker2)));
            this.Manager.Comment("reaching state \'S289\'");
            int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker4)));
            if ((temp65 == 0)) {
                BreakReadLeaseV1TestCaseS290();
                goto label33;
            }
            if ((temp65 == 1)) {
                BreakReadLeaseV1TestCaseS291();
                goto label33;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker3)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS271CreateResponseChecker4)));
        label33:
;
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateRequestChecker2() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S289");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S289");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S289");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S289");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S289");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS290() {
            this.Manager.Comment("reaching state \'S290\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271CreateResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S289");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S289");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S289");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS291() {
            this.Manager.Comment("reaching state \'S291\'");
        }
        
        private void BreakReadLeaseV1TestCaseS271ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S272");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS292() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS292");
            this.Manager.Comment("reaching state \'S292\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp67;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp67);
            this.Manager.AddReturn(ReadConfigInfo, null, temp67);
            this.Manager.Comment("reaching state \'S293\'");
            int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS292ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS292ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS292ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS292ReadConfigChecker3)));
            if ((temp69 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label36;
            }
            if ((temp69 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label36;
            }
            if ((temp69 == 2)) {
                this.Manager.Comment("reaching state \'S294\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S295\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S296\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS297();
                goto label36;
            }
            if ((temp69 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label36;
            }
            throw new InvalidOperationException("never reached");
        label36:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS292ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S293");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS292ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S293");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS292ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S293");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS297() {
            this.Manager.Comment("reaching state \'S297\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS292CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S298\'");
            int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS292CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS292CreateResponseChecker1)));
            if ((temp68 == 0)) {
                BreakReadLeaseV1TestCaseS80();
                goto label35;
            }
            if ((temp68 == 1)) {
                BreakReadLeaseV1TestCaseS81();
                goto label35;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS292CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS292CreateResponseChecker1)));
        label35:
;
        }
        
        private void BreakReadLeaseV1TestCaseS292CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS292CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S298");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S298");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S298");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S298");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS292CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S298");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S298");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S298");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS292ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S293");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S299
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS299() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS299");
            this.Manager.Comment("reaching state \'S299\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp70;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp70);
            this.Manager.AddReturn(ReadConfigInfo, null, temp70);
            this.Manager.Comment("reaching state \'S300\'");
            int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS299ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS299ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS299ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS299ReadConfigChecker3)));
            if ((temp72 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label38;
            }
            if ((temp72 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label38;
            }
            if ((temp72 == 2)) {
                this.Manager.Comment("reaching state \'S301\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S302\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S303\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS41();
                goto label38;
            }
            if ((temp72 == 3)) {
                this.Manager.Comment("reaching state \'S304\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S305\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S306\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS307();
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS299ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S300");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS299ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S300");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS299ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S300");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS299ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S300");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS307() {
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS299CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S308\'");
            int temp71 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS299CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS299CreateResponseChecker1)));
            if ((temp71 == 0)) {
                BreakReadLeaseV1TestCaseS80();
                goto label37;
            }
            if ((temp71 == 1)) {
                BreakReadLeaseV1TestCaseS81();
                goto label37;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS299CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS299CreateResponseChecker1)));
        label37:
;
        }
        
        private void BreakReadLeaseV1TestCaseS299CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS299CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S308");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S308");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S308");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S308");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS299CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S308");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S308");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S308");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S309
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS309() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS309");
            this.Manager.Comment("reaching state \'S309\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp73;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp73);
            this.Manager.AddReturn(ReadConfigInfo, null, temp73);
            this.Manager.Comment("reaching state \'S310\'");
            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS309ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS309ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS309ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS309ReadConfigChecker3)));
            if ((temp74 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label39;
            }
            if ((temp74 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label39;
            }
            if ((temp74 == 2)) {
                this.Manager.Comment("reaching state \'S311\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S312\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S313\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS276();
                goto label39;
            }
            if ((temp74 == 3)) {
                this.Manager.Comment("reaching state \'S314\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S315\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S316\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS307();
                goto label39;
            }
            throw new InvalidOperationException("never reached");
        label39:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS309ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S310");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS309ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S310");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS309ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S310");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS309ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S310");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S317
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS317() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS317");
            this.Manager.Comment("reaching state \'S317\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp75;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp75);
            this.Manager.AddReturn(ReadConfigInfo, null, temp75);
            this.Manager.Comment("reaching state \'S318\'");
            int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS317ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS317ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS317ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS317ReadConfigChecker3)));
            if ((temp77 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label41;
            }
            if ((temp77 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label41;
            }
            if ((temp77 == 2)) {
                this.Manager.Comment("reaching state \'S319\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S320\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S321\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS322();
                goto label41;
            }
            if ((temp77 == 3)) {
                this.Manager.Comment("reaching state \'S324\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S325\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S326\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS327();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS317ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS317ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS317ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S318");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS322() {
            this.Manager.Comment("reaching state \'S322\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS317CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S323\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker))) != -1)) {
                BreakReadLeaseV1TestCaseS43();
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker)));
            }
        }
        
        private void BreakReadLeaseV1TestCaseS317CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS317CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S323");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S323");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S323");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S323");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of CreateResponse, state S323");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v\'");
            this.v.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS317ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S318");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS327() {
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS317CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S328\'");
            int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker2)));
            if ((temp76 == 0)) {
                BreakReadLeaseV1TestCaseS80();
                goto label40;
            }
            if ((temp76 == 1)) {
                BreakReadLeaseV1TestCaseS81();
                goto label40;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker1)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS317CreateResponseChecker2)));
        label40:
;
        }
        
        private void BreakReadLeaseV1TestCaseS317CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS317CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S328");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S328");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S328");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S328");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS317CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S328");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S329
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS329() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS329");
            this.Manager.Comment("reaching state \'S329\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp78;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp78);
            this.Manager.AddReturn(ReadConfigInfo, null, temp78);
            this.Manager.Comment("reaching state \'S330\'");
            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS329ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS329ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS329ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS329ReadConfigChecker3)));
            if ((temp79 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label42;
            }
            if ((temp79 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label42;
            }
            if ((temp79 == 2)) {
                this.Manager.Comment("reaching state \'S331\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S332\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S333\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS73();
                goto label42;
            }
            if ((temp79 == 3)) {
                this.Manager.Comment("reaching state \'S334\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S335\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S336\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS78();
                goto label42;
            }
            throw new InvalidOperationException("never reached");
        label42:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS329ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S330");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS329ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S330");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS329ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S330");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS329ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S330");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S337
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS337() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS337");
            this.Manager.Comment("reaching state \'S337\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp80;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp80);
            this.Manager.AddReturn(ReadConfigInfo, null, temp80);
            this.Manager.Comment("reaching state \'S338\'");
            int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS337ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS337ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS337ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS337ReadConfigChecker3)));
            if ((temp81 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label43;
            }
            if ((temp81 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label43;
            }
            if ((temp81 == 2)) {
                this.Manager.Comment("reaching state \'S339\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S340\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S341\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS322();
                goto label43;
            }
            if ((temp81 == 3)) {
                this.Manager.Comment("reaching state \'S342\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S343\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S344\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS327();
                goto label43;
            }
            throw new InvalidOperationException("never reached");
        label43:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS337ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S338");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS337ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S338");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS337ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S338");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS337ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S338");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S345
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS345() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS345");
            this.Manager.Comment("reaching state \'S345\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp82;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp82);
            this.Manager.AddReturn(ReadConfigInfo, null, temp82);
            this.Manager.Comment("reaching state \'S346\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS345ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS345ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS345ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS345ReadConfigChecker3)));
            if ((temp83 == 0)) {
                BreakReadLeaseV1TestCaseS278();
                goto label44;
            }
            if ((temp83 == 1)) {
                BreakReadLeaseV1TestCaseS285();
                goto label44;
            }
            if ((temp83 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label44;
            }
            if ((temp83 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label44;
            }
            throw new InvalidOperationException("never reached");
        label44:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS345ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S346");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS345ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S346");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS345ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S346");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS345ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S346");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S347
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS347() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS347");
            this.Manager.Comment("reaching state \'S347\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp84;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp84);
            this.Manager.AddReturn(ReadConfigInfo, null, temp84);
            this.Manager.Comment("reaching state \'S348\'");
            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS347ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS347ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS347ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS347ReadConfigChecker3)));
            if ((temp87 == 0)) {
                this.Manager.Comment("reaching state \'S349\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S350\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S351\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS352();
                goto label47;
            }
            if ((temp87 == 1)) {
                this.Manager.Comment("reaching state \'S354\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S355\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S356\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS357();
                goto label47;
            }
            if ((temp87 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label47;
            }
            if ((temp87 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS347ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S348");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS352() {
            this.Manager.Comment("reaching state \'S352\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS347CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S353\'");
            int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker1)));
            if ((temp85 == 0)) {
                BreakReadLeaseV1TestCaseS283();
                goto label45;
            }
            if ((temp85 == 1)) {
                BreakReadLeaseV1TestCaseS284();
                goto label45;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker1)));
        label45:
;
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S353");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S353");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S353");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S353");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S353");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S353");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS347ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S348");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS357() {
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS347CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S358\'");
            int temp86 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker3)));
            if ((temp86 == 0)) {
                BreakReadLeaseV1TestCaseS290();
                goto label46;
            }
            if ((temp86 == 1)) {
                BreakReadLeaseV1TestCaseS291();
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS347CreateResponseChecker3)));
        label46:
;
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S358");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S358");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S358");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S358");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS347CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S358");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S358");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S358");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S358");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS347ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S348");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS347ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S348");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S359
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS359() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS359");
            this.Manager.Comment("reaching state \'S359\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp88;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp88);
            this.Manager.AddReturn(ReadConfigInfo, null, temp88);
            this.Manager.Comment("reaching state \'S360\'");
            int temp91 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS359ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS359ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS359ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS359ReadConfigChecker3)));
            if ((temp91 == 0)) {
                this.Manager.Comment("reaching state \'S361\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S362\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S363\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS364();
                goto label50;
            }
            if ((temp91 == 1)) {
                this.Manager.Comment("reaching state \'S366\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S367\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S368\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS369();
                goto label50;
            }
            if ((temp91 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label50;
            }
            if ((temp91 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS359ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS364() {
            this.Manager.Comment("reaching state \'S364\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS359CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S365\'");
            int temp89 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker1)));
            if ((temp89 == 0)) {
                BreakReadLeaseV1TestCaseS283();
                goto label48;
            }
            if ((temp89 == 1)) {
                BreakReadLeaseV1TestCaseS284();
                goto label48;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker1)));
        label48:
;
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S365");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S365");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S365");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S365");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S365");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS359ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS369() {
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS359CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S370\'");
            int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker3)));
            if ((temp90 == 0)) {
                BreakReadLeaseV1TestCaseS290();
                goto label49;
            }
            if ((temp90 == 1)) {
                BreakReadLeaseV1TestCaseS291();
                goto label49;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS359CreateResponseChecker3)));
        label49:
;
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S370");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S370");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S370");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S370");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS359CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S370");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S370");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S370");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS359ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S360");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS359ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S360");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S371
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS371() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS371");
            this.Manager.Comment("reaching state \'S371\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp92;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp92);
            this.Manager.AddReturn(ReadConfigInfo, null, temp92);
            this.Manager.Comment("reaching state \'S372\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS371ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS371ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS371ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS371ReadConfigChecker3)));
            if ((temp93 == 0)) {
                this.Manager.Comment("reaching state \'S373\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S374\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS364();
                goto label51;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S377\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S378\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS369();
                goto label51;
            }
            if ((temp93 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label51;
            }
            if ((temp93 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS371ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS371ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS371ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S372");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS371ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S372");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S379
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS379() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS379");
            this.Manager.Comment("reaching state \'S379\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S380\'");
            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS379ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS379ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS379ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS379ReadConfigChecker3)));
            if ((temp97 == 0)) {
                this.Manager.Comment("reaching state \'S381\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S382\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS384();
                goto label54;
            }
            if ((temp97 == 1)) {
                this.Manager.Comment("reaching state \'S386\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S387\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S388\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS389();
                goto label54;
            }
            if ((temp97 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label54;
            }
            if ((temp97 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label54;
            }
            throw new InvalidOperationException("never reached");
        label54:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS379ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS384() {
            this.Manager.Comment("reaching state \'S384\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS379CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S385\'");
            int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker1)));
            if ((temp95 == 0)) {
                BreakReadLeaseV1TestCaseS283();
                goto label52;
            }
            if ((temp95 == 1)) {
                BreakReadLeaseV1TestCaseS284();
                goto label52;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker1)));
        label52:
;
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S385");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S385");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S385");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S385");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS379ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS389() {
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS379CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S390\'");
            int temp96 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker3)));
            if ((temp96 == 0)) {
                BreakReadLeaseV1TestCaseS290();
                goto label53;
            }
            if ((temp96 == 1)) {
                BreakReadLeaseV1TestCaseS291();
                goto label53;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS379CreateResponseChecker3)));
        label53:
;
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextNotIncluded," +
                    "0,NONE,c1)\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S390");
            TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 0u, leaseState, "leaseState of CreateResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues>(this.Manager, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), leaseFlags, "leaseFlags of CreateResponse, state S390");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S390");
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS379CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S390");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S390");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S390");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S390");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS379ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S380");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS379ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S380");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S391
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS391() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS391");
            this.Manager.Comment("reaching state \'S391\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp98;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp98);
            this.Manager.AddReturn(ReadConfigInfo, null, temp98);
            this.Manager.Comment("reaching state \'S392\'");
            int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS391ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS391ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS391ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS391ReadConfigChecker3)));
            if ((temp99 == 0)) {
                this.Manager.Comment("reaching state \'S393\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S394\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S395\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS281();
                goto label55;
            }
            if ((temp99 == 1)) {
                this.Manager.Comment("reaching state \'S396\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S397\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S398\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS288();
                goto label55;
            }
            if ((temp99 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label55;
            }
            if ((temp99 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label55;
            }
            throw new InvalidOperationException("never reached");
        label55:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS391ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S392");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS391ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S392");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS391ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S392");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS391ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S392");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S399
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS399() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS399");
            this.Manager.Comment("reaching state \'S399\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp100;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp100);
            this.Manager.AddReturn(ReadConfigInfo, null, temp100);
            this.Manager.Comment("reaching state \'S400\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS399ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS399ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS399ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS399ReadConfigChecker3)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S401\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S402\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S403\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS384();
                goto label56;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S404\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S405\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S406\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS389();
                goto label56;
            }
            if ((temp101 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label56;
            }
            if ((temp101 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS399ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS399ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS399ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S400");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS399ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S400");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S407
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS407() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS407");
            this.Manager.Comment("reaching state \'S407\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp102;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp102);
            this.Manager.AddReturn(ReadConfigInfo, null, temp102);
            this.Manager.Comment("reaching state \'S408\'");
            int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS407ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS407ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS407ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS407ReadConfigChecker3)));
            if ((temp107 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label59;
            }
            if ((temp107 == 1)) {
                this.Manager.Comment("reaching state \'S409\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S410\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S411\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S412\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S413\'");
                int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker1)));
                if ((temp104 == 0)) {
                    BreakReadLeaseV1TestCaseS143();
                    goto label57;
                }
                if ((temp104 == 1)) {
                    this.Manager.Comment("reaching state \'S414\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp103;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp103);
                    this.Manager.Comment("reaching state \'S415\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp103, "c of FileOperationToBreakLeaseRequest, state S415");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS139();
                    goto label57;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker1)));
            label57:
;
                goto label59;
            }
            if ((temp107 == 2)) {
                this.Manager.Comment("reaching state \'S416\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S417\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S418\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S419\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S420\'");
                int temp106 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker3)));
                if ((temp106 == 0)) {
                    BreakReadLeaseV1TestCaseS37();
                    goto label58;
                }
                if ((temp106 == 1)) {
                    this.Manager.Comment("reaching state \'S421\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp105;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp105);
                    this.Manager.Comment("reaching state \'S422\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp105, "c of FileOperationToBreakLeaseRequest, state S422");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS33();
                    goto label58;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS407CreateResponseChecker3)));
            label58:
;
                goto label59;
            }
            if ((temp107 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label59;
            }
            throw new InvalidOperationException("never reached");
        label59:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS407ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS407ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS407CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S413");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS407CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S413");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S413");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS407ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S408");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS407CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS407CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S420");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S420");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS407ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S408");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S423
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS423() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS423");
            this.Manager.Comment("reaching state \'S423\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp108;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp108);
            this.Manager.AddReturn(ReadConfigInfo, null, temp108);
            this.Manager.Comment("reaching state \'S424\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS423ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS423ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS423ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS423ReadConfigChecker3)));
            if ((temp113 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label62;
            }
            if ((temp113 == 1)) {
                this.Manager.Comment("reaching state \'S425\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S426\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S427\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS428();
                goto label62;
            }
            if ((temp113 == 2)) {
                this.Manager.Comment("reaching state \'S432\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S433\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S434\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S435\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S436\'");
                int temp112 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker3)));
                if ((temp112 == 0)) {
                    BreakReadLeaseV1TestCaseS37();
                    goto label61;
                }
                if ((temp112 == 1)) {
                    this.Manager.Comment("reaching state \'S437\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp111;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp111);
                    this.Manager.Comment("reaching state \'S438\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp111, "c of FileOperationToBreakLeaseRequest, state S438");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS33();
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker3)));
            label61:
;
                goto label62;
            }
            if ((temp113 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label62;
            }
            throw new InvalidOperationException("never reached");
        label62:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS423ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS423ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS428() {
            this.Manager.Comment("reaching state \'S428\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS423CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S429\'");
            int temp110 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker1)));
            if ((temp110 == 0)) {
                BreakReadLeaseV1TestCaseS143();
                goto label60;
            }
            if ((temp110 == 1)) {
                this.Manager.Comment("reaching state \'S430\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp109;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                        "fferentLeaseKey,Smb30,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp109);
                this.Manager.Comment("reaching state \'S431\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp109, "c of FileOperationToBreakLeaseRequest, state S431");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS139();
                goto label60;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS423CreateResponseChecker1)));
        label60:
;
        }
        
        private void BreakReadLeaseV1TestCaseS423CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS423CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS423CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S429");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S429");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S429");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S429");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS423ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS423CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S436");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S436");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS423CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S436");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S436");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S436");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S436");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS423ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S424");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S439
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS439() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS439");
            this.Manager.Comment("reaching state \'S439\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp114;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp114);
            this.Manager.AddReturn(ReadConfigInfo, null, temp114);
            this.Manager.Comment("reaching state \'S440\'");
            int temp119 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS439ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS439ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS439ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS439ReadConfigChecker3)));
            if ((temp119 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label65;
            }
            if ((temp119 == 1)) {
                this.Manager.Comment("reaching state \'S441\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S442\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S443\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS444();
                goto label65;
            }
            if ((temp119 == 2)) {
                this.Manager.Comment("reaching state \'S448\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S449\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S450\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S451\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S452\'");
                int temp118 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker3)));
                if ((temp118 == 0)) {
                    BreakReadLeaseV1TestCaseS37();
                    goto label64;
                }
                if ((temp118 == 1)) {
                    this.Manager.Comment("reaching state \'S453\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp117;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp117);
                    this.Manager.Comment("reaching state \'S454\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp117, "c of FileOperationToBreakLeaseRequest, state S454");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS33();
                    goto label64;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker3)));
            label64:
;
                goto label65;
            }
            if ((temp119 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label65;
            }
            throw new InvalidOperationException("never reached");
        label65:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS439ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS439ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS444() {
            this.Manager.Comment("reaching state \'S444\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS439CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S445\'");
            int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker1)));
            if ((temp116 == 0)) {
                BreakReadLeaseV1TestCaseS143();
                goto label63;
            }
            if ((temp116 == 1)) {
                this.Manager.Comment("reaching state \'S446\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp115;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                        "fferentLeaseKey,Smb30,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp115);
                this.Manager.Comment("reaching state \'S447\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp115, "c of FileOperationToBreakLeaseRequest, state S447");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS139();
                goto label63;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS439CreateResponseChecker1)));
        label63:
;
        }
        
        private void BreakReadLeaseV1TestCaseS439CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS439CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS439CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S445");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S445");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S445");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS439ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S440");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS439CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S452");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S452");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S452");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S452");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S452");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS439CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S452");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S452");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S452");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S452");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S452");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS439ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S440");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS44() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS44");
            this.Manager.Comment("reaching state \'S44\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp120;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp120);
            this.Manager.AddReturn(ReadConfigInfo, null, temp120);
            this.Manager.Comment("reaching state \'S45\'");
            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS44ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS44ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS44ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS44ReadConfigChecker3)));
            if ((temp125 == 0)) {
                this.Manager.Comment("reaching state \'S46\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S47\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S50\'");
                int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker1)));
                if ((temp122 == 0)) {
                    this.Manager.Comment("reaching state \'S51\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp121;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp121);
                    this.Manager.Comment("reaching state \'S52\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp121, "c of FileOperationToBreakLeaseRequest, state S52");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS53();
                    goto label66;
                }
                if ((temp122 == 1)) {
                    BreakReadLeaseV1TestCaseS57();
                    goto label66;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker1)));
            label66:
;
                goto label68;
            }
            if ((temp125 == 1)) {
                this.Manager.Comment("reaching state \'S58\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S59\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S60\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S61\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S62\'");
                int temp124 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker3)));
                if ((temp124 == 0)) {
                    this.Manager.Comment("reaching state \'S63\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp123;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp123);
                    this.Manager.Comment("reaching state \'S64\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp123, "c of FileOperationToBreakLeaseRequest, state S64");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS65();
                    goto label67;
                }
                if ((temp124 == 1)) {
                    BreakReadLeaseV1TestCaseS69();
                    goto label67;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS44CreateResponseChecker3)));
            label67:
;
                goto label68;
            }
            if ((temp125 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label68;
            }
            if ((temp125 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label68;
            }
            throw new InvalidOperationException("never reached");
        label68:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS44ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S45");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS44CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S50");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS44CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S50");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS44ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S45");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS44CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS44CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S62");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS44ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S45");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS44ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S45");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S455
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS455() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS455");
            this.Manager.Comment("reaching state \'S455\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp126;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp126);
            this.Manager.AddReturn(ReadConfigInfo, null, temp126);
            this.Manager.Comment("reaching state \'S456\'");
            int temp131 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS455ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS455ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS455ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS455ReadConfigChecker3)));
            if ((temp131 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label71;
            }
            if ((temp131 == 1)) {
                this.Manager.Comment("reaching state \'S457\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S458\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S459\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S460\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S461\'");
                int temp128 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker1)));
                if ((temp128 == 0)) {
                    BreakReadLeaseV1TestCaseS143();
                    goto label69;
                }
                if ((temp128 == 1)) {
                    this.Manager.Comment("reaching state \'S462\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp127;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp127);
                    this.Manager.Comment("reaching state \'S463\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp127, "c of FileOperationToBreakLeaseRequest, state S463");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS139();
                    goto label69;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker1)));
            label69:
;
                goto label71;
            }
            if ((temp131 == 2)) {
                this.Manager.Comment("reaching state \'S464\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S465\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S466\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S467\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S468\'");
                int temp130 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker3)));
                if ((temp130 == 0)) {
                    BreakReadLeaseV1TestCaseS37();
                    goto label70;
                }
                if ((temp130 == 1)) {
                    this.Manager.Comment("reaching state \'S469\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp129;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp129);
                    this.Manager.Comment("reaching state \'S470\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: False \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                        this.c.Value.IsLeasingSupported,
                                        false}), temp129, "c of FileOperationToBreakLeaseRequest, state S470");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS33();
                    goto label70;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS455CreateResponseChecker3)));
            label70:
;
                goto label71;
            }
            if ((temp131 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS455ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S456");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS455ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S456");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS455CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS455CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S461");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S461");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S461");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS455ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S456");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS455CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S468");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S468");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S468");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S468");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S468");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS455CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S468");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S468");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S468");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S468");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S468");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS455ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S456");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S471
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS471() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS471");
            this.Manager.Comment("reaching state \'S471\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp132;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp132);
            this.Manager.AddReturn(ReadConfigInfo, null, temp132);
            this.Manager.Comment("reaching state \'S472\'");
            int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS471ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS471ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS471ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS471ReadConfigChecker3)));
            if ((temp135 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label73;
            }
            if ((temp135 == 1)) {
                this.Manager.Comment("reaching state \'S473\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S474\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S475\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS444();
                goto label73;
            }
            if ((temp135 == 2)) {
                this.Manager.Comment("reaching state \'S476\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S477\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S478\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS479();
                goto label73;
            }
            if ((temp135 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label73;
            }
            throw new InvalidOperationException("never reached");
        label73:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS471ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS471ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS471ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S472");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS479() {
            this.Manager.Comment("reaching state \'S479\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS471CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S480\'");
            int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS471CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS471CreateResponseChecker1)));
            if ((temp134 == 0)) {
                BreakReadLeaseV1TestCaseS37();
                goto label72;
            }
            if ((temp134 == 1)) {
                this.Manager.Comment("reaching state \'S481\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp133;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp133);
                this.Manager.Comment("reaching state \'S482\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: False \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp133, "c of FileOperationToBreakLeaseRequest, state S482");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS33();
                goto label72;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS471CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS471CreateResponseChecker1)));
        label72:
;
        }
        
        private void BreakReadLeaseV1TestCaseS471CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS471CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S480");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S480");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S480");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S480");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S480");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS471CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S480");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S480");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S480");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S480");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S480");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS471ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S472");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S483
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS483() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS483");
            this.Manager.Comment("reaching state \'S483\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp136;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp136);
            this.Manager.AddReturn(ReadConfigInfo, null, temp136);
            this.Manager.Comment("reaching state \'S484\'");
            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS483ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS483ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS483ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS483ReadConfigChecker3)));
            if ((temp141 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label76;
            }
            if ((temp141 == 1)) {
                this.Manager.Comment("reaching state \'S485\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S486\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S487\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS488();
                goto label76;
            }
            if ((temp141 == 2)) {
                this.Manager.Comment("reaching state \'S492\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S493\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S494\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS495();
                goto label76;
            }
            if ((temp141 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label76;
            }
            throw new InvalidOperationException("never reached");
        label76:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS483ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS483ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS488() {
            this.Manager.Comment("reaching state \'S488\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS483CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S489\'");
            int temp138 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker1)));
            if ((temp138 == 0)) {
                BreakReadLeaseV1TestCaseS143();
                goto label74;
            }
            if ((temp138 == 1)) {
                this.Manager.Comment("reaching state \'S490\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp137;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                        "mb2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp137);
                this.Manager.Comment("reaching state \'S491\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp137, "c of FileOperationToBreakLeaseRequest, state S491");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS139();
                goto label74;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker1)));
        label74:
;
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S489");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S489");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S489");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S489");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S489");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS483ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS495() {
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS483CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S496\'");
            int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker3)));
            if ((temp140 == 0)) {
                BreakReadLeaseV1TestCaseS37();
                goto label75;
            }
            if ((temp140 == 1)) {
                this.Manager.Comment("reaching state \'S497\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp139;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                        "DifferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp139);
                this.Manager.Comment("reaching state \'S498\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: False \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp139, "c of FileOperationToBreakLeaseRequest, state S498");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS33();
                goto label75;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS483CreateResponseChecker3)));
        label75:
;
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S496");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S496");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S496");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S496");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S496");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS483CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S496");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S496");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S496");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S496");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S496");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS483ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S484");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S499
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS499() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS499");
            this.Manager.Comment("reaching state \'S499\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp142;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp142);
            this.Manager.AddReturn(ReadConfigInfo, null, temp142);
            this.Manager.Comment("reaching state \'S500\'");
            int temp143 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS499ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS499ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS499ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS499ReadConfigChecker3)));
            if ((temp143 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label77;
            }
            if ((temp143 == 1)) {
                this.Manager.Comment("reaching state \'S501\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S502\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S503\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS488();
                goto label77;
            }
            if ((temp143 == 2)) {
                this.Manager.Comment("reaching state \'S504\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S505\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S506\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS495();
                goto label77;
            }
            if ((temp143 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label77;
            }
            throw new InvalidOperationException("never reached");
        label77:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS499ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S500");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS499ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S500");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS499ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S500");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS499ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S500");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S507
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS507() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS507");
            this.Manager.Comment("reaching state \'S507\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp144;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp144);
            this.Manager.AddReturn(ReadConfigInfo, null, temp144);
            this.Manager.Comment("reaching state \'S508\'");
            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS507ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS507ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS507ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS507ReadConfigChecker3)));
            if ((temp149 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label80;
            }
            if ((temp149 == 1)) {
                this.Manager.Comment("reaching state \'S509\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS512();
                goto label80;
            }
            if ((temp149 == 2)) {
                this.Manager.Comment("reaching state \'S516\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S517\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S518\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S519\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S520\'");
                int temp148 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker3)));
                if ((temp148 == 0)) {
                    BreakReadLeaseV1TestCaseS25();
                    goto label79;
                }
                if ((temp148 == 1)) {
                    this.Manager.Comment("reaching state \'S521\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp147;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SecondClient" +
                            ",Smb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp147);
                    this.Manager.Comment("reaching state \'S522\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp147, "c of FileOperationToBreakLeaseRequest, state S522");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS21();
                    goto label79;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker3)));
            label79:
;
                goto label80;
            }
            if ((temp149 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label80;
            }
            throw new InvalidOperationException("never reached");
        label80:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS507ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S508");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS507ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S508");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS512() {
            this.Manager.Comment("reaching state \'S512\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS507CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S513\'");
            int temp146 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker1)));
            if ((temp146 == 0)) {
                BreakReadLeaseV1TestCaseS37();
                goto label78;
            }
            if ((temp146 == 1)) {
                this.Manager.Comment("reaching state \'S514\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp145;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                        "fferentLeaseKey,Smb21,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp145);
                this.Manager.Comment("reaching state \'S515\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: False \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                    this.c.Value.IsLeasingSupported,
                                    false}), temp145, "c of FileOperationToBreakLeaseRequest, state S515");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : c.MaxSmbVersionSupported == 528");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21,
                                this.c.Value.IsLeasingSupported,
                                false}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb21 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: False \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 528");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS33();
                goto label78;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS507CreateResponseChecker1)));
        label78:
;
        }
        
        private void BreakReadLeaseV1TestCaseS507CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS507CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S513");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S513");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S513");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S513");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S513");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS507CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S513");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S513");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S513");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S513");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S513");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS507ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S508");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS507CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S520");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S520");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S520");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS507CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S520");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S520");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S520");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S520");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S520");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS507ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S508");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S523
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS523() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS523");
            this.Manager.Comment("reaching state \'S523\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp150;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp150);
            this.Manager.AddReturn(ReadConfigInfo, null, temp150);
            this.Manager.Comment("reaching state \'S524\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS523ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS523ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS523ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS523ReadConfigChecker3)));
            if ((temp153 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label82;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S525\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S526\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S527\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS512();
                goto label82;
            }
            if ((temp153 == 2)) {
                this.Manager.Comment("reaching state \'S528\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S529\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S530\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S531\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S532\'");
                int temp152 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS523CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS523CreateResponseChecker1)));
                if ((temp152 == 0)) {
                    BreakReadLeaseV1TestCaseS25();
                    goto label81;
                }
                if ((temp152 == 1)) {
                    this.Manager.Comment("reaching state \'S533\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp151;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp151);
                    this.Manager.Comment("reaching state \'S534\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp151, "c of FileOperationToBreakLeaseRequest, state S534");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS21();
                    goto label81;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS523CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS523CreateResponseChecker1)));
            label81:
;
                goto label82;
            }
            if ((temp153 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label82;
            }
            throw new InvalidOperationException("never reached");
        label82:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS523ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S524");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS523ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S524");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS523ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S524");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS523CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S532");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S532");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S532");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S532");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS523CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S532");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S532");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S532");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S532");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S532");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS523ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S524");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S535
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS535() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS535");
            this.Manager.Comment("reaching state \'S535\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp154;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp154);
            this.Manager.AddReturn(ReadConfigInfo, null, temp154);
            this.Manager.Comment("reaching state \'S536\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS535ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS535ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS535ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS535ReadConfigChecker3)));
            if ((temp157 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label84;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S537\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S538\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S539\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS479();
                goto label84;
            }
            if ((temp157 == 2)) {
                this.Manager.Comment("reaching state \'S540\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S541\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S542\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S543\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S544\'");
                int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS535CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS535CreateResponseChecker1)));
                if ((temp156 == 0)) {
                    BreakReadLeaseV1TestCaseS25();
                    goto label83;
                }
                if ((temp156 == 1)) {
                    this.Manager.Comment("reaching state \'S545\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp155;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp155);
                    this.Manager.Comment("reaching state \'S546\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp155, "c of FileOperationToBreakLeaseRequest, state S546");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS21();
                    goto label83;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS535CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS535CreateResponseChecker1)));
            label83:
;
                goto label84;
            }
            if ((temp157 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS535ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S536");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS535ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S536");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS535ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S536");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS535CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S544");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S544");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S544");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S544");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS535CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S544");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S544");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S544");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S544");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S544");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS535ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S536");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S547
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS547() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS547");
            this.Manager.Comment("reaching state \'S547\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp158);
            this.Manager.AddReturn(ReadConfigInfo, null, temp158);
            this.Manager.Comment("reaching state \'S548\'");
            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS547ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS547ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS547ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS547ReadConfigChecker3)));
            if ((temp161 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label86;
            }
            if ((temp161 == 1)) {
                this.Manager.Comment("reaching state \'S549\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S550\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S551\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS297();
                goto label86;
            }
            if ((temp161 == 2)) {
                this.Manager.Comment("reaching state \'S552\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S553\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S554\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S555\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S556\'");
                int temp160 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS547CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS547CreateResponseChecker1)));
                if ((temp160 == 0)) {
                    BreakReadLeaseV1TestCaseS25();
                    goto label85;
                }
                if ((temp160 == 1)) {
                    this.Manager.Comment("reaching state \'S557\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp159;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SameClientGuidDi" +
                            "fferentLeaseKey,Smb302,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp159);
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp159, "c of FileOperationToBreakLeaseRequest, state S558");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS21();
                    goto label85;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS547CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS547CreateResponseChecker1)));
            label85:
;
                goto label86;
            }
            if ((temp161 == 3)) {
                BreakReadLeaseV1TestCaseS70();
                goto label86;
            }
            throw new InvalidOperationException("never reached");
        label86:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS547ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS547ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS547ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S548");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS547CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S556");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S556");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S556");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S556");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S556");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS547CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S556");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S556");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S556");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S556");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S556");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS547ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S548");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        #endregion
        
        #region Test Starting in S559
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS559() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS559");
            this.Manager.Comment("reaching state \'S559\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp162;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp162);
            this.Manager.AddReturn(ReadConfigInfo, null, temp162);
            this.Manager.Comment("reaching state \'S560\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS559ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS559ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS559ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS559ReadConfigChecker3)));
            if ((temp167 == 0)) {
                this.Manager.Comment("reaching state \'S561\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S562\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S563\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS564();
                goto label89;
            }
            if ((temp167 == 1)) {
                this.Manager.Comment("reaching state \'S568\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S569\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S570\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S571\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S572\'");
                int temp166 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker3)));
                if ((temp166 == 0)) {
                    BreakReadLeaseV1TestCaseS13();
                    goto label88;
                }
                if ((temp166 == 1)) {
                    this.Manager.Comment("reaching state \'S573\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp165;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb30,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, out temp165);
                    this.Manager.Comment("reaching state \'S574\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp165, "c of FileOperationToBreakLeaseRequest, state S574");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS9();
                    goto label88;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker3)));
            label88:
;
                goto label89;
            }
            if ((temp167 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label89;
            }
            if ((temp167 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label89;
            }
            throw new InvalidOperationException("never reached");
        label89:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS559ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S560");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS564() {
            this.Manager.Comment("reaching state \'S564\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS559CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S565\'");
            int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker1)));
            if ((temp164 == 0)) {
                BreakReadLeaseV1TestCaseS25();
                goto label87;
            }
            if ((temp164 == 1)) {
                this.Manager.Comment("reaching state \'S566\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp163;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp163);
                this.Manager.Comment("reaching state \'S567\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp163, "c of FileOperationToBreakLeaseRequest, state S567");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS21();
                goto label87;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS559CreateResponseChecker1)));
        label87:
;
        }
        
        private void BreakReadLeaseV1TestCaseS559CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS559CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S565");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS559CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S565");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S565");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS559ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S560");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS559CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S572");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S572");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S572");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S572");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS559CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S572");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S572");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S572");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S572");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S572");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS559ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S560");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS559ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S560");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S575
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS575() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS575");
            this.Manager.Comment("reaching state \'S575\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp168;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp168);
            this.Manager.AddReturn(ReadConfigInfo, null, temp168);
            this.Manager.Comment("reaching state \'S576\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS575ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS575ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS575ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS575ReadConfigChecker3)));
            if ((temp169 == 0)) {
                this.Manager.Comment("reaching state \'S577\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S578\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S579\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS17();
                goto label90;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S580\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S581\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S582\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS5();
                goto label90;
            }
            if ((temp169 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label90;
            }
            if ((temp169 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label90;
            }
            throw new InvalidOperationException("never reached");
        label90:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS575ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S576");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS575ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S576");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS575ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S576");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS575ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S576");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S583
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS583() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS583");
            this.Manager.Comment("reaching state \'S583\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp170;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp170);
            this.Manager.AddReturn(ReadConfigInfo, null, temp170);
            this.Manager.Comment("reaching state \'S584\'");
            int temp175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS583ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS583ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS583ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS583ReadConfigChecker3)));
            if ((temp175 == 0)) {
                this.Manager.Comment("reaching state \'S585\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S586\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S587\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS588();
                goto label93;
            }
            if ((temp175 == 1)) {
                this.Manager.Comment("reaching state \'S592\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S593\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S594\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS595();
                goto label93;
            }
            if ((temp175 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label93;
            }
            if ((temp175 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label93;
            }
            throw new InvalidOperationException("never reached");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS583ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS588() {
            this.Manager.Comment("reaching state \'S588\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS583CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S589\'");
            int temp172 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker1)));
            if ((temp172 == 0)) {
                BreakReadLeaseV1TestCaseS25();
                goto label91;
            }
            if ((temp172 == 1)) {
                this.Manager.Comment("reaching state \'S590\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp171;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SameClientGuid" +
                        "DifferentLeaseKey,Smb302,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, out temp171);
                this.Manager.Comment("reaching state \'S591\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp171, "c of FileOperationToBreakLeaseRequest, state S591");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS21();
                goto label91;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker1)));
        label91:
;
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S589");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S589");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S589");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S589");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S589");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S589");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S589");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S589");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S589");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS583ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS595() {
            this.Manager.Comment("reaching state \'S595\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS583CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S596\'");
            int temp174 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker3)));
            if ((temp174 == 0)) {
                BreakReadLeaseV1TestCaseS13();
                goto label92;
            }
            if ((temp174 == 1)) {
                this.Manager.Comment("reaching state \'S597\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp173;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp173);
                this.Manager.Comment("reaching state \'S598\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp173, "c of FileOperationToBreakLeaseRequest, state S598");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS9();
                goto label92;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS583CreateResponseChecker3)));
        label92:
;
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS583CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S596");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S596");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S596");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S596");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S596");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS583ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S584");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS583ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S584");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S599
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS599() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS599");
            this.Manager.Comment("reaching state \'S599\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp176;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp176);
            this.Manager.AddReturn(ReadConfigInfo, null, temp176);
            this.Manager.Comment("reaching state \'S600\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS599ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS599ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS599ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS599ReadConfigChecker3)));
            if ((temp177 == 0)) {
                this.Manager.Comment("reaching state \'S601\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S602\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S603\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS588();
                goto label94;
            }
            if ((temp177 == 1)) {
                this.Manager.Comment("reaching state \'S604\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S605\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S606\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "NONE,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS595();
                goto label94;
            }
            if ((temp177 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label94;
            }
            if ((temp177 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label94;
            }
            throw new InvalidOperationException("never reached");
        label94:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS599ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S600");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS599ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S600");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS599ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S600");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS599ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S600");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S607
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS607() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS607");
            this.Manager.Comment("reaching state \'S607\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp178;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp178);
            this.Manager.AddReturn(ReadConfigInfo, null, temp178);
            this.Manager.Comment("reaching state \'S608\'");
            int temp183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS607ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS607ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS607ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS607ReadConfigChecker3)));
            if ((temp183 == 0)) {
                this.Manager.Comment("reaching state \'S609\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S610\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S611\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS612();
                goto label97;
            }
            if ((temp183 == 1)) {
                this.Manager.Comment("reaching state \'S616\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S617\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S618\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,EmptyParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS619();
                goto label97;
            }
            if ((temp183 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label97;
            }
            if ((temp183 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label97;
            }
            throw new InvalidOperationException("never reached");
        label97:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS607ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S608");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS612() {
            this.Manager.Comment("reaching state \'S612\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS607CreateRequestChecker)));
            this.Manager.Comment("reaching state \'S613\'");
            int temp180 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker1)));
            if ((temp180 == 0)) {
                BreakReadLeaseV1TestCaseS25();
                goto label95;
            }
            if ((temp180 == 1)) {
                this.Manager.Comment("reaching state \'S614\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp179;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp179);
                this.Manager.Comment("reaching state \'S615\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                        "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp179, "c of FileOperationToBreakLeaseRequest, state S615");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                        " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                        "ed \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS21();
                goto label95;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker1)));
        label95:
;
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateRequestChecker() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S613");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S613");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S613");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S613");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S613");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S613");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S613");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S613");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S613");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS607ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S608");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS619() {
            this.Manager.Comment("reaching state \'S619\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.CreateRequestInfo, null, new CreateRequestDelegate1(this.BreakReadLeaseV1TestCaseS607CreateRequestChecker1)));
            this.Manager.Comment("reaching state \'S620\'");
            int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker3)));
            if ((temp182 == 0)) {
                BreakReadLeaseV1TestCaseS13();
                goto label96;
            }
            if ((temp182 == 1)) {
                this.Manager.Comment("reaching state \'S621\'");
                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp181;
                this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(RANGE_LOCK,SecondClient,Smb" +
                        "2002,out _)\'");
                this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.RANGE_LOCK, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp181);
                this.Manager.Comment("reaching state \'S622\'");
                this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                        "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                        "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                try {
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), temp181, "c of FileOperationToBreakLeaseRequest, state S622");
                }
                catch (TransactionFailedException ) {
                    this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                    throw;
                }
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                "MaxSmbVersionSupported",
                                "IsLeasingSupported",
                                "IsDirectoryLeasingSupported"}, new object[] {
                                Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                this.c.Value.IsLeasingSupported,
                                this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                        "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                        "d \r\n");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                        "singSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                this.Manager.Comment("Unbinding variable \'c1\'");
                this.c1.Unbind();
                this.Manager.Comment("Unbinding variable \'v4\'");
                this.v4.Unbind();
                BreakReadLeaseV1TestCaseS9();
                goto label96;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS607CreateResponseChecker3)));
        label96:
;
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateRequestChecker1() {
            this.Manager.Comment("checking step \'return CreateRequest\'");
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S620");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S620");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S620");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS607CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S620");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S620");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S620");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S620");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S620");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS607ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S608");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS607ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S608");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S623
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS623() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS623");
            this.Manager.Comment("reaching state \'S623\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp184;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp184);
            this.Manager.AddReturn(ReadConfigInfo, null, temp184);
            this.Manager.Comment("reaching state \'S624\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS623ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS623ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS623ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS623ReadConfigChecker3)));
            if ((temp185 == 0)) {
                this.Manager.Comment("reaching state \'S625\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S626\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S627\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS564();
                goto label98;
            }
            if ((temp185 == 1)) {
                this.Manager.Comment("reaching state \'S628\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S629\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S630\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS619();
                goto label98;
            }
            if ((temp185 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label98;
            }
            if ((temp185 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS623ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S624");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS623ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S624");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS623ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S624");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS623ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S624");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S631
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS631() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS631");
            this.Manager.Comment("reaching state \'S631\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp186);
            this.Manager.AddReturn(ReadConfigInfo, null, temp186);
            this.Manager.Comment("reaching state \'S632\'");
            int temp189 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS631ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS631ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS631ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS631ReadConfigChecker3)));
            if ((temp189 == 0)) {
                this.Manager.Comment("reaching state \'S633\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb302,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S634\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S635\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS612();
                goto label100;
            }
            if ((temp189 == 1)) {
                this.Manager.Comment("reaching state \'S636\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S637\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S638\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S639\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S640\'");
                int temp188 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS631CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS631CreateResponseChecker1)));
                if ((temp188 == 0)) {
                    BreakReadLeaseV1TestCaseS13();
                    goto label99;
                }
                if ((temp188 == 1)) {
                    this.Manager.Comment("reaching state \'S641\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp187;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(SIZE_CHANGED,SecondClient,S" +
                            "mb2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.SIZE_CHANGED, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp187);
                    this.Manager.Comment("reaching state \'S642\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp187, "c of FileOperationToBreakLeaseRequest, state S642");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS9();
                    goto label99;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS631CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS631CreateResponseChecker1)));
            label99:
;
                goto label100;
            }
            if ((temp189 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label100;
            }
            if ((temp189 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label100;
            }
            throw new InvalidOperationException("never reached");
        label100:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS631ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S632");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS631ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S632");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS631CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S640");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S640");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S640");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S640");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S640");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS631CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S640");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S640");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S640");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S640");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S640");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family, Lease.Version is set to 1."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If Connection.Dialect belongs to the SMB 3.x dialect family" +
                    ", Lease.Version is set to 1.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS631ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S632");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS631ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S632");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S643
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS643() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS643");
            this.Manager.Comment("reaching state \'S643\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp190;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp190);
            this.Manager.AddReturn(ReadConfigInfo, null, temp190);
            this.Manager.Comment("reaching state \'S644\'");
            int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS643ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS643ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS643ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS643ReadConfigChecker3)));
            if ((temp191 == 0)) {
                this.Manager.Comment("reaching state \'S645\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S646\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S647\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS203();
                goto label101;
            }
            if ((temp191 == 1)) {
                this.Manager.Comment("reaching state \'S648\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S649\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S650\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS175();
                goto label101;
            }
            if ((temp191 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label101;
            }
            if ((temp191 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label101;
            }
            throw new InvalidOperationException("never reached");
        label101:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS643ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS643ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS643ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S644");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS643ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S644");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S651
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS651() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS651");
            this.Manager.Comment("reaching state \'S651\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp192;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp192);
            this.Manager.AddReturn(ReadConfigInfo, null, temp192);
            this.Manager.Comment("reaching state \'S652\'");
            int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS651ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS651ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS651ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS651ReadConfigChecker3)));
            if ((temp193 == 0)) {
                this.Manager.Comment("reaching state \'S653\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S654\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S655\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS352();
                goto label102;
            }
            if ((temp193 == 1)) {
                this.Manager.Comment("reaching state \'S656\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb2002,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S657\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S658\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.LEASE_FLAG_BREAK_IN_PROGRESS, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS357();
                goto label102;
            }
            if ((temp193 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label102;
            }
            if ((temp193 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label102;
            }
            throw new InvalidOperationException("never reached");
        label102:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS651ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS651ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS651ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S652");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS651ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S652");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S659
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS659() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS659");
            this.Manager.Comment("reaching state \'S659\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp194;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp194);
            this.Manager.AddReturn(ReadConfigInfo, null, temp194);
            this.Manager.Comment("reaching state \'S660\'");
            int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS659ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS659ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS659ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS659ReadConfigChecker3)));
            if ((temp195 == 0)) {
                BreakReadLeaseV1TestCaseS285();
                goto label103;
            }
            if ((temp195 == 1)) {
                this.Manager.Comment("reaching state \'S661\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb30,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S662\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S663\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,ValidParentLeaseKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues.SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(1)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.AddReturn(CreateRequestInfo, null);
                BreakReadLeaseV1TestCaseS428();
                goto label103;
            }
            if ((temp195 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label103;
            }
            if ((temp195 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label103;
            }
            throw new InvalidOperationException("never reached");
        label103:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS659ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S660");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS659ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S660");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS659ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S660");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS659ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S660");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS82() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS82");
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp196;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp196);
            this.Manager.AddReturn(ReadConfigInfo, null, temp196);
            this.Manager.Comment("reaching state \'S83\'");
            int temp201 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS82ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS82ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS82ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS82ReadConfigChecker3)));
            if ((temp201 == 0)) {
                BreakReadLeaseV1TestCaseS70();
                goto label106;
            }
            if ((temp201 == 1)) {
                BreakReadLeaseV1TestCaseS75();
                goto label106;
            }
            if ((temp201 == 2)) {
                this.Manager.Comment("reaching state \'S84\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S85\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S86\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S87\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S88\'");
                int temp198 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker1)));
                if ((temp198 == 0)) {
                    BreakReadLeaseV1TestCaseS57();
                    goto label104;
                }
                if ((temp198 == 1)) {
                    this.Manager.Comment("reaching state \'S89\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp197;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp197);
                    this.Manager.Comment("reaching state \'S90\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp197, "c of FileOperationToBreakLeaseRequest, state S90");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS53();
                    goto label104;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker1)));
            label104:
;
                goto label106;
            }
            if ((temp201 == 3)) {
                this.Manager.Comment("reaching state \'S91\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S92\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S95\'");
                int temp200 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker3)));
                if ((temp200 == 0)) {
                    BreakReadLeaseV1TestCaseS69();
                    goto label105;
                }
                if ((temp200 == 1)) {
                    this.Manager.Comment("reaching state \'S96\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp199;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(OPEN_OVERWRITE,SameClientGu" +
                            "idDifferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp199);
                    this.Manager.Comment("reaching state \'S97\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp199, "c of FileOperationToBreakLeaseRequest, state S97");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS65();
                    goto label105;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS82CreateResponseChecker3)));
            label105:
;
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS82ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S83");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS82ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S83");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void BreakReadLeaseV1TestCaseS82ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S83");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS82CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S88");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS82CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S88");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S88");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S88");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS82ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S83");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS82CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS82CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S95");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb21)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.LeaseV1)]
        public void BreakReadLeaseV1TestCaseS98() {
            this.Manager.BeginTest("BreakReadLeaseV1TestCaseS98");
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp202;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.ILeasingAdapterInstance.ReadConfig(out temp202);
            this.Manager.AddReturn(ReadConfigInfo, null, temp202);
            this.Manager.Comment("reaching state \'S99\'");
            int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS98ReadConfigChecker)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS98ReadConfigChecker1)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS98ReadConfigChecker2)), new ExpectedReturn(BreakReadLeaseV1TestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.BreakReadLeaseV1TestCaseS98ReadConfigChecker3)));
            if ((temp207 == 0)) {
                this.Manager.Comment("reaching state \'S100\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S101\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S102\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S103\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S104\'");
                int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker1)));
                if ((temp204 == 0)) {
                    this.Manager.Comment("reaching state \'S105\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp203;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SecondClient,Smb" +
                            "2002,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType.SecondClient, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002, out temp203);
                    this.Manager.Comment("reaching state \'S106\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIs" +
                            "DirectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp203, "c of FileOperationToBreakLeaseRequest, state S106");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : c.MaxSmbVersionSupported == 770");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb302 \r\nIsLeasingSupported:" +
                            " c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupport" +
                            "ed \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 770");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS53();
                    goto label107;
                }
                if ((temp204 == 1)) {
                    BreakReadLeaseV1TestCaseS57();
                    goto label107;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker1)));
            label107:
;
                goto label109;
            }
            if ((temp207 == 1)) {
                this.Manager.Comment("reaching state \'S107\'");
                this.Manager.Comment("executing step \'call SetupConnection(Smb21,ClientNotSupportDirectoryLeasing)\'");
                this.ILeasingAdapterInstance.SetupConnection(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ClientSupportDirectoryLeasingType)(1)));
                this.Manager.Comment("reaching state \'S108\'");
                this.Manager.Comment("checking step \'return SetupConnection\'");
                this.Manager.Comment("reaching state \'S109\'");
                this.Manager.Comment("executing step \'call CreateRequest(ConnectToNonDirectory,LeaseV1,ValidLeaseKey,1," +
                        "LEASE_FLAG_BREAK_IN_PROGRESS|SMB2_LEASE_FLAG_PARENT_LEASE_KEY_SET,EmptyParentLea" +
                        "seKey)\'");
                this.ILeasingAdapterInstance.CreateRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ConnectTargetType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseContextType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeaseKeyType)(1)), 1u, ((Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues)(6)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ParentLeaseKeyType)(0)));
                this.Manager.Comment("Unbinding variable \'leaseFlags\'");
                this.leaseFlags.Unbind();
                this.Manager.Comment("Unbinding variable \'leaseState\'");
                this.leaseState.Unbind();
                this.Manager.Comment("reaching state \'S110\'");
                this.Manager.Comment("checking step \'return CreateRequest\'");
                this.Manager.Comment("reaching state \'S111\'");
                int temp206 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker3)));
                if ((temp206 == 0)) {
                    this.Manager.Comment("reaching state \'S112\'");
                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig temp205;
                    this.Manager.Comment("executing step \'call FileOperationToBreakLeaseRequest(WRITE_DATA,SameClientGuidDi" +
                            "fferentLeaseKey,Smb21,out _)\'");
                    this.ILeasingAdapterInstance.FileOperationToBreakLeaseRequest(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.FileOperation.WRITE_DATA, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.OperatorType)(1)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb21, out temp205);
                    this.Manager.Comment("reaching state \'S113\'");
                    this.Manager.Comment("checking step \'return FileOperationToBreakLeaseRequest/[out LeasingConfig State: " +
                            "\r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: c.IsLeasingSupported \r\nIsD" +
                            "irectoryLeasingSupported: c.IsDirectoryLeasingSupported \r\n]\'");
                    try {
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                        "MaxSmbVersionSupported",
                                        "IsLeasingSupported",
                                        "IsDirectoryLeasingSupported"}, new object[] {
                                        Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                        this.c.Value.IsLeasingSupported,
                                        this.c.Value.IsDirectoryLeasingSupported}), temp205, "c of FileOperationToBreakLeaseRequest, state S113");
                    }
                    catch (TransactionFailedException ) {
                        this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:"", ""[MS-SMB2] READ caching on a file:"", ""[MS-SMB2] 	The file is opened in a manner that overwrites the existing file."", ""[MS-SMB2] 	Data is written to the file."", ""[MS-SMB2] 	The file size is changed."", ""[MS-SMB2] 	A byte range lock is requested for the file."", ""[TestInfo] READ caching lease state is broken."", ""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:"", ""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:"", ""[TestInfo] Lease state is set to No caching.""");
                        throw;
                    }
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : c.MaxSmbVersionSupported == 768");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "c1 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                                    "MaxSmbVersionSupported",
                                    "IsLeasingSupported",
                                    "IsDirectoryLeasingSupported"}, new object[] {
                                    Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30,
                                    this.c.Value.IsLeasingSupported,
                                    this.c.Value.IsDirectoryLeasingSupported}), "v4 == LeasingConfig State: \r\nMaxSmbVersionSupported: Smb30 \r\nIsLeasingSupported: " +
                            "c.IsLeasingSupported \r\nIsDirectoryLeasingSupported: c.IsDirectoryLeasingSupporte" +
                            "d \r\n");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                            "singSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
                    this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v4.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v4.MaxSmbVersionSupported == 768");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.1.4: READ caching permits the SMB2 client to cache data read from the object. Before processing one of the following operations from a client with a different ClientId, the object store MUST request that the server revoke READ caching. The object store is not required to wait for acknowledgment:""");
                    this.Manager.Checkpoint("\"[MS-SMB2] READ caching on a file:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file is opened in a manner that overwrites the existing file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tData is written to the file.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tThe file size is changed.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tA byte range lock is requested for the file.\"");
                    this.Manager.Checkpoint("\"[TestInfo] READ caching lease state is broken.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] WRITE caching permits the SMB2 client to cache writes and byte-range locks on an object. Before processing one of the following operations, the underlying object store MUST request that the server revoke WRITE caching, and the object store MUST wait for acknowledgment from the server before proceeding with the operation:""");
                    this.Manager.Checkpoint(@"""[MS-SMB2] HANDLE caching permits one or more SMB2 clients to delay closing handles it holds open, or to defer sending opens. Before processing one of the following operations, the underlying object store MUST request that the server revoke HANDLE caching, and the object store MUST wait for acknowledgment before proceeding with the operation:""");
                    this.Manager.Checkpoint("\"[TestInfo] Lease state is set to No caching.\"");
                    this.Manager.Comment("Unbinding variable \'c1\'");
                    this.c1.Unbind();
                    this.Manager.Comment("Unbinding variable \'v4\'");
                    this.v4.Unbind();
                    BreakReadLeaseV1TestCaseS65();
                    goto label108;
                }
                if ((temp206 == 1)) {
                    BreakReadLeaseV1TestCaseS69();
                    goto label108;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker2)), new ExpectedEvent(BreakReadLeaseV1TestCase.CreateResponseInfo, null, new CreateResponseDelegate1(this.BreakReadLeaseV1TestCaseS98CreateResponseChecker3)));
            label108:
;
                goto label109;
            }
            if ((temp207 == 2)) {
                BreakReadLeaseV1TestCaseS70();
                goto label109;
            }
            if ((temp207 == 3)) {
                BreakReadLeaseV1TestCaseS75();
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void BreakReadLeaseV1TestCaseS98ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void BreakReadLeaseV1TestCaseS98CreateResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S104");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS98CreateResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S104");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S104");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S104");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS98ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void BreakReadLeaseV1TestCaseS98CreateResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(STATUS_SUCCESS,ReturnLeaseContextIncluded,1,l" +
                    "easeFlags,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(0)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<uint>(this.Manager, 1u, leaseState, "leaseState of CreateResponse, state S111");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S111");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create context is ""RqLs"" as defined in section 2.2.13.2, and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:"", ""[MS-SMB2] 	If Connection.Dialect is ""2.100"" or belongs to the ""3.x"" dialect family, and the DataLength field equals 0x20, the server MUST attempt to acquire a lease on the open from the underlying object store as described in section 3.3.5.9.8."", ""[TestInfo] All the above conditions are met."", ""[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseState and Lease.Breaking is FALSE, the server MUST request promotion of the lease state from the underlying object store to the new caching state."", ""[TestInfo] The above conditions are met.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v4.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server supports leasing, the name of the create contex" +
                    "t is \"RqLs\" as defined in section 2.2.13.2, and RequestedOplockLevel is set to S" +
                    "MB2_OPLOCK_LEVEL_LEASE, the server MUST do the following:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tIf Connection.Dialect is \"2.100\" or belongs to the \"3.x\" dialect fami" +
                    "ly, and the DataLength field equals 0x20, the server MUST attempt to acquire a l" +
                    "ease on the open from the underlying object store as described in section 3.3.5." +
                    "9.8.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.8: If the lease state requested is a superset of Lease.LeaseSt" +
                    "ate and Lease.Breaking is FALSE, the server MUST request promotion of the lease " +
                    "state from the underlying object store to the new caching state.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS98CreateResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType returnLeaseContextType, uint leaseState, Microsoft.Protocols.TestTools.StackSdk.FileAccessService.Smb2.LeaseFlagsValues leaseFlags, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'event CreateResponse(status,ReturnLeaseContextNotIncluded,leaseSta" +
                    "te,leaseFlags,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of CreateResponse, state S111");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.ReturnLeaseContextType)(1)), returnLeaseContextType, "returnLeaseContextType of CreateResponse, state S111");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseState, (System.Int32)leaseState, "leaseState of CreateResponse, state S111");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseFlags, (System.Int32)leaseFlags, "leaseFlags of CreateResponse, state S111");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c1, c, "c of CreateResponse, state S111");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLevel is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the ""RqLs"" create context."", ""[TestInfo] The above conditions are met."", ""[TestTag] Compatibility""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.status, "v1 == status");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseState, "v2 == leaseState");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v3, this.leaseFlags, "v3 == leaseFlags");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v4, this.c1, "v4 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v4.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v4.Value.IsLeasingSupported))), ((object)(0))), "Fail to check the assumption : v4.IsLeasingSupported == 0");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9: If the server does not support leasing and RequestedOplockLev" +
                    "el is set to SMB2_OPLOCK_LEVEL_LEASE, the server MUST ignore the \"RqLs\" create c" +
                    "ontext.\"");
            this.Manager.Checkpoint("\"[TestInfo] The above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] Compatibility\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseFlags\'");
            this.leaseFlags.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseState\'");
            this.leaseState.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS98ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out LeasingConfig State: \r\nMaxSmbVersionSupport" +
                    "ed: Smb2002 \r\nIsLeasingSupported: False \r\nIsDirectoryLeasingSupported: False \r\n]" +
                    "\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.Make<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(new string[] {
                            "MaxSmbVersionSupported",
                            "IsLeasingSupported",
                            "IsDirectoryLeasingSupported"}, new object[] {
                            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb2002,
                            false,
                            false}), c, "c of ReadConfig, state S99");
            this.Manager.Comment("Unbinding variable \'c\'");
            this.c.Unbind();
        }
        
        private void BreakReadLeaseV1TestCaseS98ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.c, c, "c of ReadConfig, state S99");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Leasing.LeasingConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
    }
}
