// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.TestSuite {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3146.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PersistentHandleReconnectTestCase : PtfTestClassBase {
        
        public PersistentHandleReconnectTestCase() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "30000");
        }
        
        #region Expect Delegates
        public delegate void ReadConfigDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void OpenResponseDelegate1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c);
        
        public delegate void PreConstraintDelegate1();
        
        public delegate void PrepareOpenDelegate1();
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase ReadConfigInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "ReadConfig", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig).MakeByRefType());
        
        static System.Reflection.EventInfo OpenResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "OpenResponse");
        
        static System.Reflection.MethodBase PrepareOpenInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter), "PrepareOpen", typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType), typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType));
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter IHandleAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> c1;
        
        private IVariable<int> durableHandleResponseContext;
        
        private IVariable<int> leaseResponseContext;
        
        private IVariable<int> status;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v;
        
        private IVariable<int> v1;
        
        private IVariable<int> v2;
        
        private IVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig> v3;
        
        private IVariable<int> v4;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IHandleAdapterInstance = ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.IHandleAdapter))));
            this.Manager.Subscribe(OpenResponseInfo, this.IHandleAdapterInstance);
            this.c = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c");
            this.c1 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("c1");
            this.durableHandleResponseContext = this.Manager.CreateVariable<int>("durableHandleResponseContext");
            this.leaseResponseContext = this.Manager.CreateVariable<int>("leaseResponseContext");
            this.status = this.Manager.CreateVariable<int>("status");
            this.v = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v");
            this.v1 = this.Manager.CreateVariable<int>("v1");
            this.v2 = this.Manager.CreateVariable<int>("v2");
            this.v3 = this.Manager.CreateVariable<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>("v3");
            this.v4 = this.Manager.CreateVariable<int>("v4");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS0() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS0");
            this.Manager.Comment("reaching state \'S0\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp0;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp0);
            this.Manager.AddReturn(ReadConfigInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS0ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS0ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS0ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS0ReadConfigChecker3)));
            if ((temp11 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                int temp5 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker2)));
                if ((temp5 == 0)) {
                    this.Manager.Comment("reaching state \'S16\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S17\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S18\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S19\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS20();
                    goto label4;
                }
                if ((temp5 == 1)) {
                    this.Manager.Comment("reaching state \'S3\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S4\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S5\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S6\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS7();
                    goto label4;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S2\'.");
            label4:
;
                goto label10;
            }
            if ((temp11 == 1)) {
                this.Manager.Comment("reaching state \'S29\'");
                int temp10 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker4)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker6)));
                if ((temp10 == 0)) {
                    this.Manager.Comment("reaching state \'S30\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S32\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S34\'");
                    int temp7 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker5)));
                    if ((temp7 == 0)) {
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S36\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S37\'");
                        int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker14)));
                        if ((temp6 == 0)) {
                            PersistentHandleReconnectTestCaseS38();
                            goto label5;
                        }
                        if ((temp6 == 1)) {
                            PersistentHandleReconnectTestCaseS39();
                            goto label5;
                        }
                        if ((temp6 == 2)) {
                            PersistentHandleReconnectTestCaseS40();
                            goto label5;
                        }
                        if ((temp6 == 3)) {
                            PersistentHandleReconnectTestCaseS41();
                            goto label5;
                        }
                        if ((temp6 == 4)) {
                            PersistentHandleReconnectTestCaseS42();
                            goto label5;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker14)));
                    label5:
;
                        goto label6;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S34\'.");
                label6:
;
                    goto label9;
                }
                if ((temp10 == 1)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS47();
                    goto label9;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S29\'.");
            label9:
;
                goto label10;
            }
            if ((temp11 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label10;
            }
            if ((temp11 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS0ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS20() {
            this.Manager.Comment("reaching state \'S20\'");
            int temp2 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker1)));
            if ((temp2 == 0)) {
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S23\'");
                int temp1 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker4)));
                if ((temp1 == 0)) {
                    PersistentHandleReconnectTestCaseS24();
                    goto label0;
                }
                if ((temp1 == 1)) {
                    PersistentHandleReconnectTestCaseS25();
                    goto label0;
                }
                if ((temp1 == 2)) {
                    PersistentHandleReconnectTestCaseS26();
                    goto label0;
                }
                if ((temp1 == 3)) {
                    PersistentHandleReconnectTestCaseS27();
                    goto label0;
                }
                if ((temp1 == 4)) {
                    PersistentHandleReconnectTestCaseS28();
                    goto label0;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker4)));
            label0:
;
                goto label1;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S20\'.");
        label1:
;
        }
        
        private void PreConstraintChecker1() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS24() {
            this.Manager.Comment("reaching state \'S24\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS25() {
            this.Manager.Comment("reaching state \'S25\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS27() {
            this.Manager.Comment("reaching state \'S27\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S23");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS28() {
            this.Manager.Comment("reaching state \'S28\'");
        }
        
        private void PreConstraintChecker2() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS7() {
            this.Manager.Comment("reaching state \'S7\'");
            int temp4 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker3)));
            if ((temp4 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S10\'");
                int temp3 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker9)));
                if ((temp3 == 0)) {
                    PersistentHandleReconnectTestCaseS11();
                    goto label2;
                }
                if ((temp3 == 1)) {
                    PersistentHandleReconnectTestCaseS12();
                    goto label2;
                }
                if ((temp3 == 2)) {
                    PersistentHandleReconnectTestCaseS13();
                    goto label2;
                }
                if ((temp3 == 3)) {
                    PersistentHandleReconnectTestCaseS14();
                    goto label2;
                }
                if ((temp3 == 4)) {
                    PersistentHandleReconnectTestCaseS15();
                    goto label2;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker9)));
            label2:
;
                goto label3;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S7\'.");
        label3:
;
        }
        
        private void PreConstraintChecker3() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS11() {
            this.Manager.Comment("reaching state \'S11\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS12() {
            this.Manager.Comment("reaching state \'S12\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS13() {
            this.Manager.Comment("reaching state \'S13\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS14() {
            this.Manager.Comment("reaching state \'S14\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S10");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S10");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS15() {
            this.Manager.Comment("reaching state \'S15\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker4() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker5() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS38() {
            this.Manager.Comment("reaching state \'S38\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS39() {
            this.Manager.Comment("reaching state \'S39\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS40() {
            this.Manager.Comment("reaching state \'S40\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS41() {
            this.Manager.Comment("reaching state \'S41\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S37");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS42() {
            this.Manager.Comment("reaching state \'S42\'");
        }
        
        private void PreConstraintChecker6() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS47() {
            this.Manager.Comment("reaching state \'S47\'");
            int temp9 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker7)));
            if ((temp9 == 0)) {
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                        "SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S50\'");
                int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker15)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker16)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker17)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker18)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker19)));
                if ((temp8 == 0)) {
                    PersistentHandleReconnectTestCaseS51();
                    goto label7;
                }
                if ((temp8 == 1)) {
                    PersistentHandleReconnectTestCaseS52();
                    goto label7;
                }
                if ((temp8 == 2)) {
                    PersistentHandleReconnectTestCaseS53();
                    goto label7;
                }
                if ((temp8 == 3)) {
                    PersistentHandleReconnectTestCaseS54();
                    goto label7;
                }
                if ((temp8 == 4)) {
                    PersistentHandleReconnectTestCaseS55();
                    goto label7;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker15)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker16)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker17)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker18)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS0OpenResponseChecker19)));
            label7:
;
                goto label8;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S47\'.");
        label8:
;
        }
        
        private void PreConstraintChecker7() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker15(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS51() {
            this.Manager.Comment("reaching state \'S51\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker16(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS52() {
            this.Manager.Comment("reaching state \'S52\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker17(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS53() {
            this.Manager.Comment("reaching state \'S53\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker18(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS54() {
            this.Manager.Comment("reaching state \'S54\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0OpenResponseChecker19(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S50");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S50");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS55() {
            this.Manager.Comment("reaching state \'S55\'");
        }
        
        private void PersistentHandleReconnectTestCaseS0ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS56() {
            this.Manager.Comment("reaching state \'S56\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S56\'.");
        }
        
        private void PersistentHandleReconnectTestCaseS0ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S1");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS57() {
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Assert(false, "reached non-accepting end state \'S57\'.");
        }
        #endregion
        
        #region Test Starting in S139
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS139() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS139");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp12;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp12);
            this.Manager.AddReturn(ReadConfigInfo, null, temp12);
            this.Manager.Comment("reaching state \'S140\'");
            int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS139ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS139ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS139ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS139ReadConfigChecker3)));
            if ((temp22 == 0)) {
                this.Manager.Comment("reaching state \'S141\'");
                int temp17 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker8)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker10)));
                if ((temp17 == 0)) {
                    this.Manager.Comment("reaching state \'S142\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S143\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S144\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S145\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S146\'");
                    int temp14 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker9)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S147\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S148\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S149\'");
                        int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker1)));
                        if ((temp13 == 0)) {
                            PersistentHandleReconnectTestCaseS150();
                            goto label11;
                        }
                        if ((temp13 == 1)) {
                            PersistentHandleReconnectTestCaseS151();
                            goto label11;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker1)));
                    label11:
;
                        goto label12;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S146\'.");
                label12:
;
                    goto label15;
                }
                if ((temp17 == 1)) {
                    this.Manager.Comment("reaching state \'S152\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S153\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S154\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S155\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S156\'");
                    int temp16 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker11)));
                    if ((temp16 == 0)) {
                        this.Manager.Comment("reaching state \'S157\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S158\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S159\'");
                        int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker6)));
                        if ((temp15 == 0)) {
                            PersistentHandleReconnectTestCaseS11();
                            goto label13;
                        }
                        if ((temp15 == 1)) {
                            PersistentHandleReconnectTestCaseS12();
                            goto label13;
                        }
                        if ((temp15 == 2)) {
                            PersistentHandleReconnectTestCaseS13();
                            goto label13;
                        }
                        if ((temp15 == 3)) {
                            PersistentHandleReconnectTestCaseS14();
                            goto label13;
                        }
                        if ((temp15 == 4)) {
                            PersistentHandleReconnectTestCaseS15();
                            goto label13;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker6)));
                    label13:
;
                        goto label14;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S156\'.");
                label14:
;
                    goto label15;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S141\'.");
            label15:
;
                goto label20;
            }
            if ((temp22 == 1)) {
                this.Manager.Comment("reaching state \'S160\'");
                int temp21 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker12)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker14)));
                if ((temp21 == 0)) {
                    this.Manager.Comment("reaching state \'S161\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S162\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S163\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S164\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S165\'");
                    int temp18 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker13)));
                    if ((temp18 == 0)) {
                        this.Manager.Comment("reaching state \'S166\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S167\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S168\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker7))) != -1)) {
                            PersistentHandleReconnectTestCaseS87();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker7)));
                        }
                        goto label16;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S165\'.");
                label16:
;
                    goto label19;
                }
                if ((temp21 == 1)) {
                    this.Manager.Comment("reaching state \'S169\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.AddReturn(PrepareOpenInfo, null);
                    PersistentHandleReconnectTestCaseS170();
                    goto label19;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S160\'.");
            label19:
;
                goto label20;
            }
            if ((temp22 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label20;
            }
            if ((temp22 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label20;
            }
            throw new InvalidOperationException("never reached");
        label20:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS139ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker8() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker9() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS150() {
            this.Manager.Comment("reaching state \'S150\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S149");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS151() {
            this.Manager.Comment("reaching state \'S151\'");
        }
        
        private void PreConstraintChecker10() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker11() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S159");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S159");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS139ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker12() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker13() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S168");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S168");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS87() {
            this.Manager.Comment("reaching state \'S87\'");
        }
        
        private void PreConstraintChecker14() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS170() {
            this.Manager.Comment("reaching state \'S170\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.PrepareOpenInfo, null, new PrepareOpenDelegate1(this.PersistentHandleReconnectTestCaseS139PrepareOpenChecker)));
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("executing step \'call LogOff()\'");
            this.IHandleAdapterInstance.LogOff();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                    "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                    "cified in section 3.3.4.17. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                    " closed.\"");
            this.Manager.Comment("reaching state \'S172\'");
            this.Manager.Comment("checking step \'return LogOff\'");
            this.Manager.Comment("reaching state \'S173\'");
            int temp20 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker15)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S174\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                        "nt,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S175\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S176\'");
                int temp19 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker12)));
                if ((temp19 == 0)) {
                    PersistentHandleReconnectTestCaseS134();
                    goto label17;
                }
                if ((temp19 == 1)) {
                    PersistentHandleReconnectTestCaseS135();
                    goto label17;
                }
                if ((temp19 == 2)) {
                    PersistentHandleReconnectTestCaseS136();
                    goto label17;
                }
                if ((temp19 == 3)) {
                    PersistentHandleReconnectTestCaseS137();
                    goto label17;
                }
                if ((temp19 == 4)) {
                    PersistentHandleReconnectTestCaseS138();
                    goto label17;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS139OpenResponseChecker12)));
            label17:
;
                goto label18;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S173\'.");
        label18:
;
        }
        
        private void PersistentHandleReconnectTestCaseS139PrepareOpenChecker() {
            this.Manager.Comment("checking step \'return PrepareOpen\'");
        }
        
        private void PreConstraintChecker15() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS134() {
            this.Manager.Comment("reaching state \'S134\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS135() {
            this.Manager.Comment("reaching state \'S135\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS136() {
            this.Manager.Comment("reaching state \'S136\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS137() {
            this.Manager.Comment("reaching state \'S137\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S176");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS138() {
            this.Manager.Comment("reaching state \'S138\'");
        }
        
        private void PersistentHandleReconnectTestCaseS139ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS139ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S140");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S177
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS177() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS177");
            this.Manager.Comment("reaching state \'S177\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp23;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp23);
            this.Manager.AddReturn(ReadConfigInfo, null, temp23);
            this.Manager.Comment("reaching state \'S178\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS177ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS177ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS177ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS177ReadConfigChecker3)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S179\'");
                int temp27 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker16)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker18)));
                if ((temp27 == 0)) {
                    this.Manager.Comment("reaching state \'S180\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S181\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S182\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S183\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S184\'");
                    int temp24 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker17)));
                    if ((temp24 == 0)) {
                        this.Manager.Comment("reaching state \'S185\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S186\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S187\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker))) != -1)) {
                            PersistentHandleReconnectTestCaseS77();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker)));
                        }
                        goto label21;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S184\'.");
                label21:
;
                    goto label24;
                }
                if ((temp27 == 1)) {
                    this.Manager.Comment("reaching state \'S188\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S189\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S190\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S191\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S192\'");
                    int temp26 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker19)));
                    if ((temp26 == 0)) {
                        this.Manager.Comment("reaching state \'S193\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S194\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S195\'");
                        int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker5)));
                        if ((temp25 == 0)) {
                            PersistentHandleReconnectTestCaseS11();
                            goto label22;
                        }
                        if ((temp25 == 1)) {
                            PersistentHandleReconnectTestCaseS12();
                            goto label22;
                        }
                        if ((temp25 == 2)) {
                            PersistentHandleReconnectTestCaseS13();
                            goto label22;
                        }
                        if ((temp25 == 3)) {
                            PersistentHandleReconnectTestCaseS14();
                            goto label22;
                        }
                        if ((temp25 == 4)) {
                            PersistentHandleReconnectTestCaseS15();
                            goto label22;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker5)));
                    label22:
;
                        goto label23;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S192\'.");
                label23:
;
                    goto label24;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S179\'.");
            label24:
;
                goto label30;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S196\'");
                int temp32 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker20)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker22)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S197\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S198\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S199\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S200\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S201\'");
                    int temp29 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker21)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S202\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S203\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S204\'");
                        int temp28 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker7)));
                        if ((temp28 == 0)) {
                            this.Manager.Comment("reaching state \'S205\'");
                            goto label25;
                        }
                        if ((temp28 == 1)) {
                            this.Manager.Comment("reaching state \'S206\'");
                            goto label25;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker7)));
                    label25:
;
                        goto label26;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S201\'.");
                label26:
;
                    goto label29;
                }
                if ((temp32 == 1)) {
                    this.Manager.Comment("reaching state \'S207\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S208\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S209\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S210\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S211\'");
                    int temp31 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker23)));
                    if ((temp31 == 0)) {
                        this.Manager.Comment("reaching state \'S212\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S213\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S214\'");
                        int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker12)));
                        if ((temp30 == 0)) {
                            PersistentHandleReconnectTestCaseS134();
                            goto label27;
                        }
                        if ((temp30 == 1)) {
                            PersistentHandleReconnectTestCaseS135();
                            goto label27;
                        }
                        if ((temp30 == 2)) {
                            PersistentHandleReconnectTestCaseS136();
                            goto label27;
                        }
                        if ((temp30 == 3)) {
                            PersistentHandleReconnectTestCaseS137();
                            goto label27;
                        }
                        if ((temp30 == 4)) {
                            PersistentHandleReconnectTestCaseS138();
                            goto label27;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS177OpenResponseChecker12)));
                    label27:
;
                        goto label28;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S211\'.");
                label28:
;
                    goto label29;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S196\'.");
            label29:
;
                goto label30;
            }
            if ((temp33 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label30;
            }
            if ((temp33 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label30;
            }
            throw new InvalidOperationException("never reached");
        label30:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS177ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S178");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker16() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker17() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S187");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S187");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S187");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS77() {
            this.Manager.Comment("reaching state \'S77\'");
        }
        
        private void PreConstraintChecker18() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker19() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S195");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S178");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker20() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker21() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S204");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PreConstraintChecker22() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker23() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S214");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS177ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S178");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS177ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S178");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S215
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS215() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS215");
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp34;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp34);
            this.Manager.AddReturn(ReadConfigInfo, null, temp34);
            this.Manager.Comment("reaching state \'S216\'");
            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS215ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS215ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS215ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS215ReadConfigChecker3)));
            if ((temp45 == 0)) {
                this.Manager.Comment("reaching state \'S217\'");
                int temp39 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker24)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker26)));
                if ((temp39 == 0)) {
                    this.Manager.Comment("reaching state \'S218\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S219\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S220\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S221\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS222();
                    goto label35;
                }
                if ((temp39 == 1)) {
                    this.Manager.Comment("reaching state \'S226\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S227\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S228\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S229\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S230\'");
                    int temp38 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker27)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S231\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S232\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S233\'");
                        int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker6)));
                        if ((temp37 == 0)) {
                            PersistentHandleReconnectTestCaseS11();
                            goto label33;
                        }
                        if ((temp37 == 1)) {
                            PersistentHandleReconnectTestCaseS12();
                            goto label33;
                        }
                        if ((temp37 == 2)) {
                            PersistentHandleReconnectTestCaseS13();
                            goto label33;
                        }
                        if ((temp37 == 3)) {
                            PersistentHandleReconnectTestCaseS14();
                            goto label33;
                        }
                        if ((temp37 == 4)) {
                            PersistentHandleReconnectTestCaseS15();
                            goto label33;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker6)));
                    label33:
;
                        goto label34;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S230\'.");
                label34:
;
                    goto label35;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S217\'.");
            label35:
;
                goto label41;
            }
            if ((temp45 == 1)) {
                this.Manager.Comment("reaching state \'S234\'");
                int temp44 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker28)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker30)));
                if ((temp44 == 0)) {
                    this.Manager.Comment("reaching state \'S235\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S236\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S237\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S238\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S239\'");
                    int temp41 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker29)));
                    if ((temp41 == 0)) {
                        this.Manager.Comment("reaching state \'S240\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S241\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S242\'");
                        int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker8)));
                        if ((temp40 == 0)) {
                            PersistentHandleReconnectTestCaseS243();
                            goto label36;
                        }
                        if ((temp40 == 1)) {
                            PersistentHandleReconnectTestCaseS244();
                            goto label36;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker8)));
                    label36:
;
                        goto label37;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S239\'.");
                label37:
;
                    goto label40;
                }
                if ((temp44 == 1)) {
                    this.Manager.Comment("reaching state \'S245\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S246\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S247\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S248\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S249\'");
                    int temp43 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker31)));
                    if ((temp43 == 0)) {
                        this.Manager.Comment("reaching state \'S250\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                                "DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S251\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S252\'");
                        int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker13)));
                        if ((temp42 == 0)) {
                            PersistentHandleReconnectTestCaseS134();
                            goto label38;
                        }
                        if ((temp42 == 1)) {
                            PersistentHandleReconnectTestCaseS135();
                            goto label38;
                        }
                        if ((temp42 == 2)) {
                            PersistentHandleReconnectTestCaseS136();
                            goto label38;
                        }
                        if ((temp42 == 3)) {
                            PersistentHandleReconnectTestCaseS137();
                            goto label38;
                        }
                        if ((temp42 == 4)) {
                            PersistentHandleReconnectTestCaseS138();
                            goto label38;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker13)));
                    label38:
;
                        goto label39;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S249\'.");
                label39:
;
                    goto label40;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S234\'.");
            label40:
;
                goto label41;
            }
            if ((temp45 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label41;
            }
            if ((temp45 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label41;
            }
            throw new InvalidOperationException("never reached");
        label41:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS215ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker24() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS222() {
            this.Manager.Comment("reaching state \'S222\'");
            int temp36 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker25)));
            if ((temp36 == 0)) {
                this.Manager.Comment("reaching state \'S223\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                        "SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S224\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S225\'");
                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker1)));
                if ((temp35 == 0)) {
                    PersistentHandleReconnectTestCaseS150();
                    goto label31;
                }
                if ((temp35 == 1)) {
                    PersistentHandleReconnectTestCaseS151();
                    goto label31;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS215OpenResponseChecker1)));
            label31:
;
                goto label32;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S222\'.");
        label32:
;
        }
        
        private void PreConstraintChecker25() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S225");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker26() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker27() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S233");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker28() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker29() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS243() {
            this.Manager.Comment("reaching state \'S243\'");
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S242");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS244() {
            this.Manager.Comment("reaching state \'S244\'");
        }
        
        private void PreConstraintChecker30() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker31() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S252");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS215ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS215ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S216");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S253
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS253() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS253");
            this.Manager.Comment("reaching state \'S253\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp46;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp46);
            this.Manager.AddReturn(ReadConfigInfo, null, temp46);
            this.Manager.Comment("reaching state \'S254\'");
            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS253ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS253ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS253ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS253ReadConfigChecker3)));
            if ((temp55 == 0)) {
                this.Manager.Comment("reaching state \'S255\'");
                int temp49 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker32)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker33)));
                if ((temp49 == 0)) {
                    this.Manager.Comment("reaching state \'S256\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S257\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S258\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S259\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS222();
                    goto label44;
                }
                if ((temp49 == 1)) {
                    this.Manager.Comment("reaching state \'S260\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S261\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S262\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S263\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S264\'");
                    int temp48 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker34)));
                    if ((temp48 == 0)) {
                        this.Manager.Comment("reaching state \'S265\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                                "SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S266\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S267\'");
                        int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker4)));
                        if ((temp47 == 0)) {
                            PersistentHandleReconnectTestCaseS11();
                            goto label42;
                        }
                        if ((temp47 == 1)) {
                            PersistentHandleReconnectTestCaseS12();
                            goto label42;
                        }
                        if ((temp47 == 2)) {
                            PersistentHandleReconnectTestCaseS13();
                            goto label42;
                        }
                        if ((temp47 == 3)) {
                            PersistentHandleReconnectTestCaseS14();
                            goto label42;
                        }
                        if ((temp47 == 4)) {
                            PersistentHandleReconnectTestCaseS15();
                            goto label42;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker4)));
                    label42:
;
                        goto label43;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S264\'.");
                label43:
;
                    goto label44;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S255\'.");
            label44:
;
                goto label50;
            }
            if ((temp55 == 1)) {
                this.Manager.Comment("reaching state \'S268\'");
                int temp54 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker35)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker37)));
                if ((temp54 == 0)) {
                    this.Manager.Comment("reaching state \'S269\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S270\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S271\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S272\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS273();
                    goto label49;
                }
                if ((temp54 == 1)) {
                    this.Manager.Comment("reaching state \'S277\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S278\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S279\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S280\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS281();
                    goto label49;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S268\'.");
            label49:
;
                goto label50;
            }
            if ((temp55 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label50;
            }
            if ((temp55 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS253ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S254");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker32() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker33() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker34() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S267");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S267");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S254");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker35() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS273() {
            this.Manager.Comment("reaching state \'S273\'");
            int temp51 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker36)));
            if ((temp51 == 0)) {
                this.Manager.Comment("reaching state \'S274\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                        "SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S275\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S276\'");
                int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker6)));
                if ((temp50 == 0)) {
                    PersistentHandleReconnectTestCaseS243();
                    goto label45;
                }
                if ((temp50 == 1)) {
                    PersistentHandleReconnectTestCaseS244();
                    goto label45;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker6)));
            label45:
;
                goto label46;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S273\'.");
        label46:
;
        }
        
        private void PreConstraintChecker36() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S276");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker37() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS281() {
            this.Manager.Comment("reaching state \'S281\'");
            int temp53 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker38)));
            if ((temp53 == 0)) {
                this.Manager.Comment("reaching state \'S282\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S283\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S284\'");
                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker11)));
                if ((temp52 == 0)) {
                    PersistentHandleReconnectTestCaseS134();
                    goto label47;
                }
                if ((temp52 == 1)) {
                    PersistentHandleReconnectTestCaseS135();
                    goto label47;
                }
                if ((temp52 == 2)) {
                    PersistentHandleReconnectTestCaseS136();
                    goto label47;
                }
                if ((temp52 == 3)) {
                    PersistentHandleReconnectTestCaseS137();
                    goto label47;
                }
                if ((temp52 == 4)) {
                    PersistentHandleReconnectTestCaseS138();
                    goto label47;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker9)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS253OpenResponseChecker11)));
            label47:
;
                goto label48;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S281\'.");
        label48:
;
        }
        
        private void PreConstraintChecker38() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S284");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS253ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S254");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS253ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S254");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S285
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS285() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS285");
            this.Manager.Comment("reaching state \'S285\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp56;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp56);
            this.Manager.AddReturn(ReadConfigInfo, null, temp56);
            this.Manager.Comment("reaching state \'S286\'");
            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS285ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS285ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS285ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS285ReadConfigChecker3)));
            if ((temp63 == 0)) {
                this.Manager.Comment("reaching state \'S287\'");
                int temp59 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker39)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker41)));
                if ((temp59 == 0)) {
                    this.Manager.Comment("reaching state \'S288\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S289\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S290\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S291\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S292\'");
                    int temp58 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker40)));
                    if ((temp58 == 0)) {
                        this.Manager.Comment("reaching state \'S293\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S294\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S295\'");
                        int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker4)));
                        if ((temp57 == 0)) {
                            PersistentHandleReconnectTestCaseS296();
                            goto label51;
                        }
                        if ((temp57 == 1)) {
                            PersistentHandleReconnectTestCaseS297();
                            goto label51;
                        }
                        if ((temp57 == 2)) {
                            PersistentHandleReconnectTestCaseS298();
                            goto label51;
                        }
                        if ((temp57 == 3)) {
                            PersistentHandleReconnectTestCaseS299();
                            goto label51;
                        }
                        if ((temp57 == 4)) {
                            PersistentHandleReconnectTestCaseS300();
                            goto label51;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker4)));
                    label51:
;
                        goto label52;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S292\'.");
                label52:
;
                    goto label53;
                }
                if ((temp59 == 1)) {
                    this.Manager.Comment("reaching state \'S301\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S302\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S303\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S304\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS281();
                    goto label53;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S287\'.");
            label53:
;
                goto label57;
            }
            if ((temp63 == 1)) {
                this.Manager.Comment("reaching state \'S305\'");
                int temp62 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker42)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker44)));
                if ((temp62 == 0)) {
                    this.Manager.Comment("reaching state \'S306\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S307\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S308\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S309\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S310\'");
                    int temp61 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker43)));
                    if ((temp61 == 0)) {
                        this.Manager.Comment("reaching state \'S311\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                                "DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S312\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S313\'");
                        int temp60 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker9)));
                        if ((temp60 == 0)) {
                            PersistentHandleReconnectTestCaseS24();
                            goto label54;
                        }
                        if ((temp60 == 1)) {
                            PersistentHandleReconnectTestCaseS25();
                            goto label54;
                        }
                        if ((temp60 == 2)) {
                            PersistentHandleReconnectTestCaseS26();
                            goto label54;
                        }
                        if ((temp60 == 3)) {
                            PersistentHandleReconnectTestCaseS27();
                            goto label54;
                        }
                        if ((temp60 == 4)) {
                            PersistentHandleReconnectTestCaseS28();
                            goto label54;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS285OpenResponseChecker9)));
                    label54:
;
                        goto label55;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S310\'.");
                label55:
;
                    goto label56;
                }
                if ((temp62 == 1)) {
                    this.Manager.Comment("reaching state \'S314\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S315\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S316\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S317\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS7();
                    goto label56;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S305\'.");
            label56:
;
                goto label57;
            }
            if ((temp63 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label57;
            }
            if ((temp63 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label57;
            }
            throw new InvalidOperationException("never reached");
        label57:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS285ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker39() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker40() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS296() {
            this.Manager.Comment("reaching state \'S296\'");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS297() {
            this.Manager.Comment("reaching state \'S297\'");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS298() {
            this.Manager.Comment("reaching state \'S298\'");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS299() {
            this.Manager.Comment("reaching state \'S299\'");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S295");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S295");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS300() {
            this.Manager.Comment("reaching state \'S300\'");
        }
        
        private void PreConstraintChecker41() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS285ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker42() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker43() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS285OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S313");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S313");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker44() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS285ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS285ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S286");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS318() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS318");
            this.Manager.Comment("reaching state \'S318\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp64;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp64);
            this.Manager.AddReturn(ReadConfigInfo, null, temp64);
            this.Manager.Comment("reaching state \'S319\'");
            int temp73 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS318ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS318ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS318ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS318ReadConfigChecker3)));
            if ((temp73 == 0)) {
                this.Manager.Comment("reaching state \'S320\'");
                int temp67 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker45)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker47)));
                if ((temp67 == 0)) {
                    this.Manager.Comment("reaching state \'S321\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S322\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S323\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S324\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S325\'");
                    int temp66 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker46)));
                    if ((temp66 == 0)) {
                        this.Manager.Comment("reaching state \'S326\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S327\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S328\'");
                        int temp65 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker4)));
                        if ((temp65 == 0)) {
                            PersistentHandleReconnectTestCaseS296();
                            goto label58;
                        }
                        if ((temp65 == 1)) {
                            PersistentHandleReconnectTestCaseS297();
                            goto label58;
                        }
                        if ((temp65 == 2)) {
                            PersistentHandleReconnectTestCaseS298();
                            goto label58;
                        }
                        if ((temp65 == 3)) {
                            PersistentHandleReconnectTestCaseS299();
                            goto label58;
                        }
                        if ((temp65 == 4)) {
                            PersistentHandleReconnectTestCaseS300();
                            goto label58;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker4)));
                    label58:
;
                        goto label59;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S325\'.");
                label59:
;
                    goto label60;
                }
                if ((temp67 == 1)) {
                    this.Manager.Comment("reaching state \'S329\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.AddReturn(PrepareOpenInfo, null);
                    PersistentHandleReconnectTestCaseS170();
                    goto label60;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S320\'.");
            label60:
;
                goto label66;
            }
            if ((temp73 == 1)) {
                this.Manager.Comment("reaching state \'S330\'");
                int temp72 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker48)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker50)));
                if ((temp72 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label65;
                }
                if ((temp72 == 1)) {
                    this.Manager.Comment("reaching state \'S331\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S332\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S333\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S334\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S335\'");
                    int temp71 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker51)));
                    if ((temp71 == 0)) {
                        this.Manager.Comment("reaching state \'S336\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S337\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S338\'");
                        int temp70 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker14)));
                        if ((temp70 == 0)) {
                            PersistentHandleReconnectTestCaseS24();
                            goto label63;
                        }
                        if ((temp70 == 1)) {
                            PersistentHandleReconnectTestCaseS25();
                            goto label63;
                        }
                        if ((temp70 == 2)) {
                            PersistentHandleReconnectTestCaseS26();
                            goto label63;
                        }
                        if ((temp70 == 3)) {
                            PersistentHandleReconnectTestCaseS27();
                            goto label63;
                        }
                        if ((temp70 == 4)) {
                            PersistentHandleReconnectTestCaseS28();
                            goto label63;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker14)));
                    label63:
;
                        goto label64;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S335\'.");
                label64:
;
                    goto label65;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S330\'.");
            label65:
;
                goto label66;
            }
            if ((temp73 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label66;
            }
            if ((temp73 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label66;
            }
            throw new InvalidOperationException("never reached");
        label66:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS318ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker45() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker46() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S328");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S328");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker47() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS318ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker48() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS109() {
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                    "NoOplockOrLease)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                    "B 3.x dialect family. \"");
            this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                    "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
            this.Manager.Comment("reaching state \'S110\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("executing step \'call LogOff()\'");
            this.IHandleAdapterInstance.LogOff();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                    "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                    "cified in section 3.3.4.17. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                    " closed.\"");
            this.Manager.Comment("reaching state \'S112\'");
            this.Manager.Comment("checking step \'return LogOff\'");
            this.Manager.Comment("reaching state \'S113\'");
            int temp69 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker49)));
            if ((temp69 == 0)) {
                this.Manager.Comment("reaching state \'S114\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                        "nt,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S115\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S116\'");
                int temp68 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker9)));
                if ((temp68 == 0)) {
                    PersistentHandleReconnectTestCaseS11();
                    goto label61;
                }
                if ((temp68 == 1)) {
                    PersistentHandleReconnectTestCaseS12();
                    goto label61;
                }
                if ((temp68 == 2)) {
                    PersistentHandleReconnectTestCaseS13();
                    goto label61;
                }
                if ((temp68 == 3)) {
                    PersistentHandleReconnectTestCaseS14();
                    goto label61;
                }
                if ((temp68 == 4)) {
                    PersistentHandleReconnectTestCaseS15();
                    goto label61;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS318OpenResponseChecker9)));
            label61:
;
                goto label62;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S113\'.");
        label62:
;
        }
        
        private void PreConstraintChecker49() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S116");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S116");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PreConstraintChecker50() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker51() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S338");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS318ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS318ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S319");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S339
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS339() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS339");
            this.Manager.Comment("reaching state \'S339\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp74;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp74);
            this.Manager.AddReturn(ReadConfigInfo, null, temp74);
            this.Manager.Comment("reaching state \'S340\'");
            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS339ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS339ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS339ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS339ReadConfigChecker3)));
            if ((temp83 == 0)) {
                this.Manager.Comment("reaching state \'S341\'");
                int temp79 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker52)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker54)));
                if ((temp79 == 0)) {
                    this.Manager.Comment("reaching state \'S342\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S343\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S344\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S345\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S346\'");
                    int temp76 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker53)));
                    if ((temp76 == 0)) {
                        this.Manager.Comment("reaching state \'S347\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                                "DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S348\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S349\'");
                        int temp75 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker4)));
                        if ((temp75 == 0)) {
                            PersistentHandleReconnectTestCaseS296();
                            goto label67;
                        }
                        if ((temp75 == 1)) {
                            PersistentHandleReconnectTestCaseS297();
                            goto label67;
                        }
                        if ((temp75 == 2)) {
                            PersistentHandleReconnectTestCaseS298();
                            goto label67;
                        }
                        if ((temp75 == 3)) {
                            PersistentHandleReconnectTestCaseS299();
                            goto label67;
                        }
                        if ((temp75 == 4)) {
                            PersistentHandleReconnectTestCaseS300();
                            goto label67;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker4)));
                    label67:
;
                        goto label68;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S346\'.");
                label68:
;
                    goto label71;
                }
                if ((temp79 == 1)) {
                    this.Manager.Comment("reaching state \'S350\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S351\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S352\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S353\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S354\'");
                    int temp78 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker55)));
                    if ((temp78 == 0)) {
                        this.Manager.Comment("reaching state \'S355\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S356\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S357\'");
                        int temp77 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker9)));
                        if ((temp77 == 0)) {
                            PersistentHandleReconnectTestCaseS38();
                            goto label69;
                        }
                        if ((temp77 == 1)) {
                            PersistentHandleReconnectTestCaseS39();
                            goto label69;
                        }
                        if ((temp77 == 2)) {
                            PersistentHandleReconnectTestCaseS40();
                            goto label69;
                        }
                        if ((temp77 == 3)) {
                            PersistentHandleReconnectTestCaseS41();
                            goto label69;
                        }
                        if ((temp77 == 4)) {
                            PersistentHandleReconnectTestCaseS42();
                            goto label69;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker9)));
                    label69:
;
                        goto label70;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S354\'.");
                label70:
;
                    goto label71;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S341\'.");
            label71:
;
                goto label75;
            }
            if ((temp83 == 1)) {
                this.Manager.Comment("reaching state \'S358\'");
                int temp82 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker56)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker57)));
                if ((temp82 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label74;
                }
                if ((temp82 == 1)) {
                    this.Manager.Comment("reaching state \'S359\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S360\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S361\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S362\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S363\'");
                    int temp81 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker58)));
                    if ((temp81 == 0)) {
                        this.Manager.Comment("reaching state \'S364\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S365\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S366\'");
                        int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker14)));
                        if ((temp80 == 0)) {
                            PersistentHandleReconnectTestCaseS24();
                            goto label72;
                        }
                        if ((temp80 == 1)) {
                            PersistentHandleReconnectTestCaseS25();
                            goto label72;
                        }
                        if ((temp80 == 2)) {
                            PersistentHandleReconnectTestCaseS26();
                            goto label72;
                        }
                        if ((temp80 == 3)) {
                            PersistentHandleReconnectTestCaseS27();
                            goto label72;
                        }
                        if ((temp80 == 4)) {
                            PersistentHandleReconnectTestCaseS28();
                            goto label72;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS339OpenResponseChecker14)));
                    label72:
;
                        goto label73;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S363\'.");
                label73:
;
                    goto label74;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S358\'.");
            label74:
;
                goto label75;
            }
            if ((temp83 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label75;
            }
            if ((temp83 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS339ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker52() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker53() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S349");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker54() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker55() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S357");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker56() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker57() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker58() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S366");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS339ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS339ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S340");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S367
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS367() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS367");
            this.Manager.Comment("reaching state \'S367\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp84;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp84);
            this.Manager.AddReturn(ReadConfigInfo, null, temp84);
            this.Manager.Comment("reaching state \'S368\'");
            int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS367ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS367ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS367ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS367ReadConfigChecker3)));
            if ((temp93 == 0)) {
                this.Manager.Comment("reaching state \'S369\'");
                int temp89 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker59)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker61)));
                if ((temp89 == 0)) {
                    this.Manager.Comment("reaching state \'S370\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S371\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S372\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S373\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS374();
                    goto label80;
                }
                if ((temp89 == 1)) {
                    this.Manager.Comment("reaching state \'S378\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S379\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S380\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S381\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS382();
                    goto label80;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S369\'.");
            label80:
;
                goto label84;
            }
            if ((temp93 == 1)) {
                this.Manager.Comment("reaching state \'S386\'");
                int temp92 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker63)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker64)));
                if ((temp92 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label83;
                }
                if ((temp92 == 1)) {
                    this.Manager.Comment("reaching state \'S387\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S388\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S389\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S390\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S391\'");
                    int temp91 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker65)));
                    if ((temp91 == 0)) {
                        this.Manager.Comment("reaching state \'S392\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S393\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S394\'");
                        int temp90 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker14)));
                        if ((temp90 == 0)) {
                            PersistentHandleReconnectTestCaseS24();
                            goto label81;
                        }
                        if ((temp90 == 1)) {
                            PersistentHandleReconnectTestCaseS25();
                            goto label81;
                        }
                        if ((temp90 == 2)) {
                            PersistentHandleReconnectTestCaseS26();
                            goto label81;
                        }
                        if ((temp90 == 3)) {
                            PersistentHandleReconnectTestCaseS27();
                            goto label81;
                        }
                        if ((temp90 == 4)) {
                            PersistentHandleReconnectTestCaseS28();
                            goto label81;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker14)));
                    label81:
;
                        goto label82;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S391\'.");
                label82:
;
                    goto label83;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S386\'.");
            label83:
;
                goto label84;
            }
            if ((temp93 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label84;
            }
            if ((temp93 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label84;
            }
            throw new InvalidOperationException("never reached");
        label84:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS367ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker59() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS374() {
            this.Manager.Comment("reaching state \'S374\'");
            int temp86 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker60)));
            if ((temp86 == 0)) {
                this.Manager.Comment("reaching state \'S375\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                        "tClient,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S376\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S377\'");
                int temp85 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker4)));
                if ((temp85 == 0)) {
                    PersistentHandleReconnectTestCaseS296();
                    goto label76;
                }
                if ((temp85 == 1)) {
                    PersistentHandleReconnectTestCaseS297();
                    goto label76;
                }
                if ((temp85 == 2)) {
                    PersistentHandleReconnectTestCaseS298();
                    goto label76;
                }
                if ((temp85 == 3)) {
                    PersistentHandleReconnectTestCaseS299();
                    goto label76;
                }
                if ((temp85 == 4)) {
                    PersistentHandleReconnectTestCaseS300();
                    goto label76;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker4)));
            label76:
;
                goto label77;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S374\'.");
        label77:
;
        }
        
        private void PreConstraintChecker60() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S377");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker61() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS382() {
            this.Manager.Comment("reaching state \'S382\'");
            int temp88 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker62)));
            if ((temp88 == 0)) {
                this.Manager.Comment("reaching state \'S383\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                        "SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S384\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S385\'");
                int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker9)));
                if ((temp87 == 0)) {
                    PersistentHandleReconnectTestCaseS38();
                    goto label78;
                }
                if ((temp87 == 1)) {
                    PersistentHandleReconnectTestCaseS39();
                    goto label78;
                }
                if ((temp87 == 2)) {
                    PersistentHandleReconnectTestCaseS40();
                    goto label78;
                }
                if ((temp87 == 3)) {
                    PersistentHandleReconnectTestCaseS41();
                    goto label78;
                }
                if ((temp87 == 4)) {
                    PersistentHandleReconnectTestCaseS42();
                    goto label78;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS367OpenResponseChecker9)));
            label78:
;
                goto label79;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S382\'.");
        label79:
;
        }
        
        private void PreConstraintChecker62() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S385");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker63() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker64() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker65() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S394");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS367ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS367ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S368");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S395
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS395() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS395");
            this.Manager.Comment("reaching state \'S395\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp94;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp94);
            this.Manager.AddReturn(ReadConfigInfo, null, temp94);
            this.Manager.Comment("reaching state \'S396\'");
            int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS395ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS395ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS395ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS395ReadConfigChecker3)));
            if ((temp103 == 0)) {
                this.Manager.Comment("reaching state \'S397\'");
                int temp99 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker66)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker68)));
                if ((temp99 == 0)) {
                    this.Manager.Comment("reaching state \'S398\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S399\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S400\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S401\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S402\'");
                    int temp96 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker67)));
                    if ((temp96 == 0)) {
                        this.Manager.Comment("reaching state \'S403\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S404\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S405\'");
                        int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker4)));
                        if ((temp95 == 0)) {
                            PersistentHandleReconnectTestCaseS296();
                            goto label85;
                        }
                        if ((temp95 == 1)) {
                            PersistentHandleReconnectTestCaseS297();
                            goto label85;
                        }
                        if ((temp95 == 2)) {
                            PersistentHandleReconnectTestCaseS298();
                            goto label85;
                        }
                        if ((temp95 == 3)) {
                            PersistentHandleReconnectTestCaseS299();
                            goto label85;
                        }
                        if ((temp95 == 4)) {
                            PersistentHandleReconnectTestCaseS300();
                            goto label85;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker4)));
                    label85:
;
                        goto label86;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S402\'.");
                label86:
;
                    goto label89;
                }
                if ((temp99 == 1)) {
                    this.Manager.Comment("reaching state \'S406\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S407\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S408\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S409\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S410\'");
                    int temp98 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker69)));
                    if ((temp98 == 0)) {
                        this.Manager.Comment("reaching state \'S411\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S412\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S413\'");
                        int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker9)));
                        if ((temp97 == 0)) {
                            PersistentHandleReconnectTestCaseS38();
                            goto label87;
                        }
                        if ((temp97 == 1)) {
                            PersistentHandleReconnectTestCaseS39();
                            goto label87;
                        }
                        if ((temp97 == 2)) {
                            PersistentHandleReconnectTestCaseS40();
                            goto label87;
                        }
                        if ((temp97 == 3)) {
                            PersistentHandleReconnectTestCaseS41();
                            goto label87;
                        }
                        if ((temp97 == 4)) {
                            PersistentHandleReconnectTestCaseS42();
                            goto label87;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker7)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker8)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker9)));
                    label87:
;
                        goto label88;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S410\'.");
                label88:
;
                    goto label89;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S397\'.");
            label89:
;
                goto label93;
            }
            if ((temp103 == 1)) {
                this.Manager.Comment("reaching state \'S414\'");
                int temp102 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker70)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker71)));
                if ((temp102 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label92;
                }
                if ((temp102 == 1)) {
                    this.Manager.Comment("reaching state \'S415\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S416\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S417\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S418\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S419\'");
                    int temp101 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker72)));
                    if ((temp101 == 0)) {
                        this.Manager.Comment("reaching state \'S420\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S421\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S422\'");
                        int temp100 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker14)));
                        if ((temp100 == 0)) {
                            PersistentHandleReconnectTestCaseS24();
                            goto label90;
                        }
                        if ((temp100 == 1)) {
                            PersistentHandleReconnectTestCaseS25();
                            goto label90;
                        }
                        if ((temp100 == 2)) {
                            PersistentHandleReconnectTestCaseS26();
                            goto label90;
                        }
                        if ((temp100 == 3)) {
                            PersistentHandleReconnectTestCaseS27();
                            goto label90;
                        }
                        if ((temp100 == 4)) {
                            PersistentHandleReconnectTestCaseS28();
                            goto label90;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker10)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker11)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker12)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker13)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS395OpenResponseChecker14)));
                    label90:
;
                        goto label91;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S419\'.");
                label91:
;
                    goto label92;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S414\'.");
            label92:
;
                goto label93;
            }
            if ((temp103 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label93;
            }
            if ((temp103 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label93;
            }
            throw new InvalidOperationException("never reached");
        label93:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS395ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S396");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker66() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker67() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S405");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker68() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker69() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker8(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker9(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S413");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S396");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker70() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker71() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker72() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker10(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker11(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker12(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker13(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395OpenResponseChecker14(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S422");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS395ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S396");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS395ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S396");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S423
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS423() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS423");
            this.Manager.Comment("reaching state \'S423\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp104;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp104);
            this.Manager.AddReturn(ReadConfigInfo, null, temp104);
            this.Manager.Comment("reaching state \'S424\'");
            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS423ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS423ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS423ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS423ReadConfigChecker3)));
            if ((temp109 == 0)) {
                this.Manager.Comment("reaching state \'S425\'");
                int temp107 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker73)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker74)));
                if ((temp107 == 0)) {
                    this.Manager.Comment("reaching state \'S426\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S427\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S428\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S429\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS374();
                    goto label96;
                }
                if ((temp107 == 1)) {
                    this.Manager.Comment("reaching state \'S430\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.AddReturn(PrepareOpenInfo, null);
                    PersistentHandleReconnectTestCaseS89();
                    goto label96;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S425\'.");
            label96:
;
                goto label98;
            }
            if ((temp109 == 1)) {
                this.Manager.Comment("reaching state \'S431\'");
                int temp108 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker76)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker77)));
                if ((temp108 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label97;
                }
                if ((temp108 == 1)) {
                    this.Manager.Comment("reaching state \'S432\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S433\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S434\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S435\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS20();
                    goto label97;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S431\'.");
            label97:
;
                goto label98;
            }
            if ((temp109 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label98;
            }
            if ((temp109 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label98;
            }
            throw new InvalidOperationException("never reached");
        label98:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS423ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker73() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker74() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS89() {
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.PrepareOpenInfo, null, new PrepareOpenDelegate1(this.PersistentHandleReconnectTestCaseS423PrepareOpenChecker)));
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("executing step \'call LogOff()\'");
            this.IHandleAdapterInstance.LogOff();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                    "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                    "cified in section 3.3.4.17. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                    " closed.\"");
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return LogOff\'");
            this.Manager.Comment("reaching state \'S92\'");
            int temp106 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker75)));
            if ((temp106 == 0)) {
                this.Manager.Comment("reaching state \'S93\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                        "nt,DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S94\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S95\'");
                int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker4)));
                if ((temp105 == 0)) {
                    PersistentHandleReconnectTestCaseS38();
                    goto label94;
                }
                if ((temp105 == 1)) {
                    PersistentHandleReconnectTestCaseS39();
                    goto label94;
                }
                if ((temp105 == 2)) {
                    PersistentHandleReconnectTestCaseS40();
                    goto label94;
                }
                if ((temp105 == 3)) {
                    PersistentHandleReconnectTestCaseS41();
                    goto label94;
                }
                if ((temp105 == 4)) {
                    PersistentHandleReconnectTestCaseS42();
                    goto label94;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS423OpenResponseChecker4)));
            label94:
;
                goto label95;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S92\'.");
        label95:
;
        }
        
        private void PersistentHandleReconnectTestCaseS423PrepareOpenChecker() {
            this.Manager.Comment("checking step \'return PrepareOpen\'");
        }
        
        private void PreConstraintChecker75() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS423OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS423OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS423OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS423OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS423OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S95");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS423ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker76() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker77() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS423ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS423ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S424");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS436() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS436");
            this.Manager.Comment("reaching state \'S436\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp110;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp110);
            this.Manager.AddReturn(ReadConfigInfo, null, temp110);
            this.Manager.Comment("reaching state \'S437\'");
            int temp118 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS436ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS436ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS436ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS436ReadConfigChecker3)));
            if ((temp118 == 0)) {
                this.Manager.Comment("reaching state \'S438\'");
                int temp115 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker78)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker80)));
                if ((temp115 == 0)) {
                    this.Manager.Comment("reaching state \'S439\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S440\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S441\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S442\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S443\'");
                    int temp112 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker79)));
                    if ((temp112 == 0)) {
                        this.Manager.Comment("reaching state \'S444\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S445\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S446\'");
                        int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker1)));
                        if ((temp111 == 0)) {
                            this.Manager.Comment("reaching state \'S447\'");
                            goto label99;
                        }
                        if ((temp111 == 1)) {
                            this.Manager.Comment("reaching state \'S448\'");
                            goto label99;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker1)));
                    label99:
;
                        goto label100;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S443\'.");
                label100:
;
                    goto label103;
                }
                if ((temp115 == 1)) {
                    this.Manager.Comment("reaching state \'S449\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S450\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S451\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S452\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S453\'");
                    int temp114 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker81)));
                    if ((temp114 == 0)) {
                        this.Manager.Comment("reaching state \'S454\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S455\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S456\'");
                        int temp113 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker6)));
                        if ((temp113 == 0)) {
                            PersistentHandleReconnectTestCaseS38();
                            goto label101;
                        }
                        if ((temp113 == 1)) {
                            PersistentHandleReconnectTestCaseS39();
                            goto label101;
                        }
                        if ((temp113 == 2)) {
                            PersistentHandleReconnectTestCaseS40();
                            goto label101;
                        }
                        if ((temp113 == 3)) {
                            PersistentHandleReconnectTestCaseS41();
                            goto label101;
                        }
                        if ((temp113 == 4)) {
                            PersistentHandleReconnectTestCaseS42();
                            goto label101;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker5)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker6)));
                    label101:
;
                        goto label102;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S453\'.");
                label102:
;
                    goto label103;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S438\'.");
            label103:
;
                goto label106;
            }
            if ((temp118 == 1)) {
                this.Manager.Comment("reaching state \'S457\'");
                int temp117 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker82)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker83)));
                if ((temp117 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label105;
                }
                if ((temp117 == 1)) {
                    this.Manager.Comment("reaching state \'S458\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S459\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S460\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S461\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S462\'");
                    int temp116 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker84)));
                    if ((temp116 == 0)) {
                        this.Manager.Comment("reaching state \'S463\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S464\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S465\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker7))) != -1)) {
                            PersistentHandleReconnectTestCaseS77();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS436OpenResponseChecker7)));
                        }
                        goto label104;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S462\'.");
                label104:
;
                    goto label105;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S457\'.");
            label105:
;
                goto label106;
            }
            if ((temp118 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label106;
            }
            if ((temp118 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label106;
            }
            throw new InvalidOperationException("never reached");
        label106:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS436ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker78() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker79() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S446");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : c.IsDirectoryLeasingSupported == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(0))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == 0");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_SUCCESS,durableHandleResponseContext,lea" +
                    "seResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status)(0)), status, "status of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S446");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S446");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] In the ""Response Construction"" phase:""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported))), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(c.IsDirectoryLeasingSupported == 0)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Response Construction\" phase:\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker80() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker81() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S456");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S456");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker82() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker83() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker84() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS436OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S465");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S465");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S465");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S465");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS436ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS436ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S437");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS466() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS466");
            this.Manager.Comment("reaching state \'S466\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp119;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp119);
            this.Manager.AddReturn(ReadConfigInfo, null, temp119);
            this.Manager.Comment("reaching state \'S467\'");
            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS466ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS466ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS466ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS466ReadConfigChecker3)));
            if ((temp124 == 0)) {
                this.Manager.Comment("reaching state \'S468\'");
                int temp121 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker85)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker87)));
                if ((temp121 == 0)) {
                    this.Manager.Comment("reaching state \'S469\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S470\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S471\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S472\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S473\'");
                    int temp120 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker86)));
                    if ((temp120 == 0)) {
                        this.Manager.Comment("reaching state \'S474\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S475\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S476\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS466OpenResponseChecker))) != -1)) {
                            PersistentHandleReconnectTestCaseS477();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS466OpenResponseChecker)));
                        }
                        goto label107;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S473\'.");
                label107:
;
                    goto label108;
                }
                if ((temp121 == 1)) {
                    this.Manager.Comment("reaching state \'S478\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S479\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S480\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S481\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS382();
                    goto label108;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S468\'.");
            label108:
;
                goto label111;
            }
            if ((temp124 == 1)) {
                PersistentHandleReconnectTestCaseS482();
                goto label111;
            }
            if ((temp124 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label111;
            }
            if ((temp124 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label111;
            }
            throw new InvalidOperationException("never reached");
        label111:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS466ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker85() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker86() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS466OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S476");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S476");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS477() {
            this.Manager.Comment("reaching state \'S477\'");
        }
        
        private void PreConstraintChecker87() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS466ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS482() {
            this.Manager.Comment("reaching state \'S482\'");
            int temp123 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker88)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker89)));
            if ((temp123 == 0)) {
                PersistentHandleReconnectTestCaseS109();
                goto label110;
            }
            if ((temp123 == 1)) {
                PersistentHandleReconnectTestCaseS69();
                goto label110;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S482\'.");
        label110:
;
        }
        
        private void PreConstraintChecker88() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker89() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS69() {
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                    "NoOplockOrLease)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                    "B 3.x dialect family. \"");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                    "r more of the following bit values, as specified in section 2.2.4:\"");
            this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                    "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                    "bilities field of the request, and the server supports persistent handles.\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                    " is set in Connection.ServerCapabilities.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                    "n.IsDurable to TRUE. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
            this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                    ".\"");
            this.Manager.Comment("reaching state \'S70\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("executing step \'call LogOff()\'");
            this.IHandleAdapterInstance.LogOff();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                    "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                    "n, and Open.TreeConnect to NULL. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                    "LL.\"");
            this.Manager.Comment("reaching state \'S72\'");
            this.Manager.Comment("checking step \'return LogOff\'");
            this.Manager.Comment("reaching state \'S73\'");
            int temp122 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker90)));
            if ((temp122 == 0)) {
                this.Manager.Comment("reaching state \'S74\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                        "nt,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S75\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S76\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS466OpenResponseChecker1))) != -1)) {
                    PersistentHandleReconnectTestCaseS77();
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS466OpenResponseChecker1)));
                }
                goto label109;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S73\'.");
        label109:
;
        }
        
        private void PreConstraintChecker90() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS466OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S76");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S76");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S76");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS466ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS466ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S467");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S483
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS483() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS483");
            this.Manager.Comment("reaching state \'S483\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp125;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp125);
            this.Manager.AddReturn(ReadConfigInfo, null, temp125);
            this.Manager.Comment("reaching state \'S484\'");
            int temp130 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS483ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS483ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS483ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS483ReadConfigChecker3)));
            if ((temp130 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label116;
            }
            if ((temp130 == 1)) {
                this.Manager.Comment("reaching state \'S485\'");
                int temp129 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker91)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker93)));
                if ((temp129 == 0)) {
                    this.Manager.Comment("reaching state \'S486\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S487\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S488\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S489\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S490\'");
                    int temp126 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker92)));
                    if ((temp126 == 0)) {
                        this.Manager.Comment("reaching state \'S491\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S492\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S493\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker))) != -1)) {
                            PersistentHandleReconnectTestCaseS477();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker)));
                        }
                        goto label112;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S490\'.");
                label112:
;
                    goto label115;
                }
                if ((temp129 == 1)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label115;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S485\'.");
            label115:
;
                goto label116;
            }
            if ((temp130 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label116;
            }
            if ((temp130 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label116;
            }
            throw new InvalidOperationException("never reached");
        label116:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS483ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS483ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker91() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker92() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S493");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S493");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S493");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S493");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker93() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PersistentHandleReconnectTestCaseS494() {
            this.Manager.Comment("reaching state \'S494\'");
            this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                    "NoOplockOrLease)\'");
            this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                    "B 3.x dialect family. \"");
            this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                    "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return PrepareOpen\'");
            this.Manager.Comment("reaching state \'S496\'");
            this.Manager.Comment("executing step \'call LogOff()\'");
            this.IHandleAdapterInstance.LogOff();
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                    "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                    "cified in section 3.3.4.17. \"");
            this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                    " closed.\"");
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return LogOff\'");
            this.Manager.Comment("reaching state \'S498\'");
            int temp128 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker94)));
            if ((temp128 == 0)) {
                this.Manager.Comment("reaching state \'S499\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                        "nt,SameCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                this.Manager.Comment("reaching state \'S500\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S501\'");
                int temp127 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker5)));
                if ((temp127 == 0)) {
                    PersistentHandleReconnectTestCaseS134();
                    goto label113;
                }
                if ((temp127 == 1)) {
                    PersistentHandleReconnectTestCaseS135();
                    goto label113;
                }
                if ((temp127 == 2)) {
                    PersistentHandleReconnectTestCaseS136();
                    goto label113;
                }
                if ((temp127 == 3)) {
                    PersistentHandleReconnectTestCaseS137();
                    goto label113;
                }
                if ((temp127 == 4)) {
                    PersistentHandleReconnectTestCaseS138();
                    goto label113;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS483OpenResponseChecker5)));
            label113:
;
                goto label114;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S498\'.");
        label114:
;
        }
        
        private void PreConstraintChecker94() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS483OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S501");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S501");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS483ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS483ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S484");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS502() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS502");
            this.Manager.Comment("reaching state \'S502\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp131;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp131);
            this.Manager.AddReturn(ReadConfigInfo, null, temp131);
            this.Manager.Comment("reaching state \'S503\'");
            int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS502ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS502ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS502ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS502ReadConfigChecker3)));
            if ((temp135 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label120;
            }
            if ((temp135 == 1)) {
                this.Manager.Comment("reaching state \'S504\'");
                int temp134 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker95)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker96)));
                if ((temp134 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label119;
                }
                if ((temp134 == 1)) {
                    this.Manager.Comment("reaching state \'S505\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S506\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S507\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S508\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    PersistentHandleReconnectTestCaseS509();
                    goto label119;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S504\'.");
            label119:
;
                goto label120;
            }
            if ((temp135 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label120;
            }
            if ((temp135 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label120;
            }
            throw new InvalidOperationException("never reached");
        label120:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS502ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS502ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker95() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker96() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS509() {
            this.Manager.Comment("reaching state \'S509\'");
            int temp133 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker97)));
            if ((temp133 == 0)) {
                this.Manager.Comment("reaching state \'S510\'");
                this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                        "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                        "DifferentCreateGuid)\'");
                this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                this.Manager.Comment("reaching state \'S511\'");
                this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                this.Manager.Comment("reaching state \'S512\'");
                int temp132 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS502OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS502OpenResponseChecker1)));
                if ((temp132 == 0)) {
                    PersistentHandleReconnectTestCaseS513();
                    goto label117;
                }
                if ((temp132 == 1)) {
                    PersistentHandleReconnectTestCaseS514();
                    goto label117;
                }
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS502OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS502OpenResponseChecker1)));
            label117:
;
                goto label118;
            }
            this.Manager.Assert(false, "reached non-accepting end state \'S509\'.");
        label118:
;
        }
        
        private void PreConstraintChecker97() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS502OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS513() {
            this.Manager.Comment("reaching state \'S513\'");
        }
        
        private void PersistentHandleReconnectTestCaseS502OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S512");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S512");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS514() {
            this.Manager.Comment("reaching state \'S514\'");
        }
        
        private void PersistentHandleReconnectTestCaseS502ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS502ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S503");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S515
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS515() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS515");
            this.Manager.Comment("reaching state \'S515\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp136;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp136);
            this.Manager.AddReturn(ReadConfigInfo, null, temp136);
            this.Manager.Comment("reaching state \'S516\'");
            int temp139 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS515ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS515ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS515ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS515ReadConfigChecker3)));
            if ((temp139 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label123;
            }
            if ((temp139 == 1)) {
                this.Manager.Comment("reaching state \'S517\'");
                int temp138 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker98)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker99)));
                if ((temp138 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label122;
                }
                if ((temp138 == 1)) {
                    this.Manager.Comment("reaching state \'S518\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S519\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S520\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S521\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S522\'");
                    int temp137 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker100)));
                    if ((temp137 == 0)) {
                        this.Manager.Comment("reaching state \'S523\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S524\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S525\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS515OpenResponseChecker))) != -1)) {
                            PersistentHandleReconnectTestCaseS477();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS515OpenResponseChecker)));
                        }
                        goto label121;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S522\'.");
                label121:
;
                    goto label122;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S517\'.");
            label122:
;
                goto label123;
            }
            if ((temp139 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label123;
            }
            if ((temp139 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label123;
            }
            throw new InvalidOperationException("never reached");
        label123:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS515ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS515ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker98() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker99() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker100() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS515OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S525");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S525");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S525");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S525");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS515ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS515ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S516");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS526() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS526");
            this.Manager.Comment("reaching state \'S526\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp140;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp140);
            this.Manager.AddReturn(ReadConfigInfo, null, temp140);
            this.Manager.Comment("reaching state \'S527\'");
            int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS526ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS526ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS526ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS526ReadConfigChecker3)));
            if ((temp142 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label125;
            }
            if ((temp142 == 1)) {
                this.Manager.Comment("reaching state \'S528\'");
                int temp141 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker101)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker102)));
                if ((temp141 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label124;
                }
                if ((temp141 == 1)) {
                    this.Manager.Comment("reaching state \'S529\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S530\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S531\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S532\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS509();
                    goto label124;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S528\'.");
            label124:
;
                goto label125;
            }
            if ((temp142 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label125;
            }
            if ((temp142 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label125;
            }
            throw new InvalidOperationException("never reached");
        label125:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS526ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S527");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS526ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S527");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker101() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker102() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS526ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S527");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS526ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S527");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S533
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS533() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS533");
            this.Manager.Comment("reaching state \'S533\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp143;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp143);
            this.Manager.AddReturn(ReadConfigInfo, null, temp143);
            this.Manager.Comment("reaching state \'S534\'");
            int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS533ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS533ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS533ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS533ReadConfigChecker3)));
            if ((temp147 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label129;
            }
            if ((temp147 == 1)) {
                this.Manager.Comment("reaching state \'S535\'");
                int temp146 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker103)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker104)));
                if ((temp146 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label128;
                }
                if ((temp146 == 1)) {
                    this.Manager.Comment("reaching state \'S536\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S537\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S538\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S539\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S540\'");
                    int temp145 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker105)));
                    if ((temp145 == 0)) {
                        this.Manager.Comment("reaching state \'S541\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S542\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S543\'");
                        int temp144 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker4)));
                        if ((temp144 == 0)) {
                            PersistentHandleReconnectTestCaseS51();
                            goto label126;
                        }
                        if ((temp144 == 1)) {
                            PersistentHandleReconnectTestCaseS52();
                            goto label126;
                        }
                        if ((temp144 == 2)) {
                            PersistentHandleReconnectTestCaseS53();
                            goto label126;
                        }
                        if ((temp144 == 3)) {
                            PersistentHandleReconnectTestCaseS54();
                            goto label126;
                        }
                        if ((temp144 == 4)) {
                            PersistentHandleReconnectTestCaseS55();
                            goto label126;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS533OpenResponseChecker4)));
                    label126:
;
                        goto label127;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S540\'.");
                label127:
;
                    goto label128;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S535\'.");
            label128:
;
                goto label129;
            }
            if ((temp147 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label129;
            }
            if ((temp147 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label129;
            }
            throw new InvalidOperationException("never reached");
        label129:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS533ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S534");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS533ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S534");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker103() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker104() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker105() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS533OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS533OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS533OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS533OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS533OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S543");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S543");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS533ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S534");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS533ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S534");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS544() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS544");
            this.Manager.Comment("reaching state \'S544\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp148;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp148);
            this.Manager.AddReturn(ReadConfigInfo, null, temp148);
            this.Manager.Comment("reaching state \'S545\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS544ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS544ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS544ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS544ReadConfigChecker3)));
            if ((temp152 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label133;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S546\'");
                int temp151 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker106)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker107)));
                if ((temp151 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label132;
                }
                if ((temp151 == 1)) {
                    this.Manager.Comment("reaching state \'S547\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S548\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S549\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S550\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S551\'");
                    int temp150 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker108)));
                    if ((temp150 == 0)) {
                        this.Manager.Comment("reaching state \'S552\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S553\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S554\'");
                        int temp149 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker4)));
                        if ((temp149 == 0)) {
                            PersistentHandleReconnectTestCaseS51();
                            goto label130;
                        }
                        if ((temp149 == 1)) {
                            PersistentHandleReconnectTestCaseS52();
                            goto label130;
                        }
                        if ((temp149 == 2)) {
                            PersistentHandleReconnectTestCaseS53();
                            goto label130;
                        }
                        if ((temp149 == 3)) {
                            PersistentHandleReconnectTestCaseS54();
                            goto label130;
                        }
                        if ((temp149 == 4)) {
                            PersistentHandleReconnectTestCaseS55();
                            goto label130;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS544OpenResponseChecker4)));
                    label130:
;
                        goto label131;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S551\'.");
                label131:
;
                    goto label132;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S546\'.");
            label132:
;
                goto label133;
            }
            if ((temp152 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label133;
            }
            if ((temp152 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label133;
            }
            throw new InvalidOperationException("never reached");
        label133:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS544ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS544ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker106() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker107() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker108() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS544OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS544OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS544OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS544OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS544OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S554");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S554");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS544ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS544ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S545");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S555
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS555() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS555");
            this.Manager.Comment("reaching state \'S555\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp153;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp153);
            this.Manager.AddReturn(ReadConfigInfo, null, temp153);
            this.Manager.Comment("reaching state \'S556\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS555ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS555ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS555ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS555ReadConfigChecker3)));
            if ((temp157 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label137;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S557\'");
                int temp156 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker109)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker110)));
                if ((temp156 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label136;
                }
                if ((temp156 == 1)) {
                    this.Manager.Comment("reaching state \'S558\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S559\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S560\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S561\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S562\'");
                    int temp155 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker111)));
                    if ((temp155 == 0)) {
                        this.Manager.Comment("reaching state \'S563\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S564\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S565\'");
                        int temp154 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker4)));
                        if ((temp154 == 0)) {
                            PersistentHandleReconnectTestCaseS51();
                            goto label134;
                        }
                        if ((temp154 == 1)) {
                            PersistentHandleReconnectTestCaseS52();
                            goto label134;
                        }
                        if ((temp154 == 2)) {
                            PersistentHandleReconnectTestCaseS53();
                            goto label134;
                        }
                        if ((temp154 == 3)) {
                            PersistentHandleReconnectTestCaseS54();
                            goto label134;
                        }
                        if ((temp154 == 4)) {
                            PersistentHandleReconnectTestCaseS55();
                            goto label134;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS555OpenResponseChecker4)));
                    label134:
;
                        goto label135;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S562\'.");
                label135:
;
                    goto label136;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S557\'.");
            label136:
;
                goto label137;
            }
            if ((temp157 == 2)) {
                PersistentHandleReconnectTestCaseS56();
                goto label137;
            }
            if ((temp157 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label137;
            }
            throw new InvalidOperationException("never reached");
        label137:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS555ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S556");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS555ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S556");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker109() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker110() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker111() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS555OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS555OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS555OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS555OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS555OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S565");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S565");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS555ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S556");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS555ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S556");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS566() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS566");
            this.Manager.Comment("reaching state \'S566\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp158;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp158);
            this.Manager.AddReturn(ReadConfigInfo, null, temp158);
            this.Manager.Comment("reaching state \'S567\'");
            int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS566ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS566ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS566ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS566ReadConfigChecker3)));
            if ((temp162 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label141;
            }
            if ((temp162 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label141;
            }
            if ((temp162 == 2)) {
                this.Manager.Comment("reaching state \'S568\'");
                int temp161 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker112)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker113)));
                if ((temp161 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label140;
                }
                if ((temp161 == 1)) {
                    this.Manager.Comment("reaching state \'S569\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S570\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S571\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S572\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S573\'");
                    int temp160 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker114)));
                    if ((temp160 == 0)) {
                        this.Manager.Comment("reaching state \'S574\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S575\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S576\'");
                        int temp159 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker4)));
                        if ((temp159 == 0)) {
                            PersistentHandleReconnectTestCaseS51();
                            goto label138;
                        }
                        if ((temp159 == 1)) {
                            PersistentHandleReconnectTestCaseS52();
                            goto label138;
                        }
                        if ((temp159 == 2)) {
                            PersistentHandleReconnectTestCaseS53();
                            goto label138;
                        }
                        if ((temp159 == 3)) {
                            PersistentHandleReconnectTestCaseS54();
                            goto label138;
                        }
                        if ((temp159 == 4)) {
                            PersistentHandleReconnectTestCaseS55();
                            goto label138;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS566OpenResponseChecker4)));
                    label138:
;
                        goto label139;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S573\'.");
                label139:
;
                    goto label140;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S568\'.");
            label140:
;
                goto label141;
            }
            if ((temp162 == 3)) {
                PersistentHandleReconnectTestCaseS57();
                goto label141;
            }
            throw new InvalidOperationException("never reached");
        label141:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS566ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S567");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS566ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S567");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS566ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S567");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker112() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker113() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker114() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS566OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS566OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS566OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS566OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS566OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S576");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S576");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS566ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S567");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        #endregion
        
        #region Test Starting in S577
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS577() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS577");
            this.Manager.Comment("reaching state \'S577\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp163;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp163);
            this.Manager.AddReturn(ReadConfigInfo, null, temp163);
            this.Manager.Comment("reaching state \'S578\'");
            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS577ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS577ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS577ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS577ReadConfigChecker3)));
            if ((temp167 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label145;
            }
            if ((temp167 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label145;
            }
            if ((temp167 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label145;
            }
            if ((temp167 == 3)) {
                this.Manager.Comment("reaching state \'S579\'");
                int temp166 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker115)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker116)));
                if ((temp166 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label144;
                }
                if ((temp166 == 1)) {
                    this.Manager.Comment("reaching state \'S580\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S581\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S582\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S583\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S584\'");
                    int temp165 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker117)));
                    if ((temp165 == 0)) {
                        this.Manager.Comment("reaching state \'S585\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,Differen" +
                                "tClient,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S586\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S587\'");
                        int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker4)));
                        if ((temp164 == 0)) {
                            PersistentHandleReconnectTestCaseS51();
                            goto label142;
                        }
                        if ((temp164 == 1)) {
                            PersistentHandleReconnectTestCaseS52();
                            goto label142;
                        }
                        if ((temp164 == 2)) {
                            PersistentHandleReconnectTestCaseS53();
                            goto label142;
                        }
                        if ((temp164 == 3)) {
                            PersistentHandleReconnectTestCaseS54();
                            goto label142;
                        }
                        if ((temp164 == 4)) {
                            PersistentHandleReconnectTestCaseS55();
                            goto label142;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS577OpenResponseChecker4)));
                    label142:
;
                        goto label143;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S584\'.");
                label143:
;
                    goto label144;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S579\'.");
            label144:
;
                goto label145;
            }
            throw new InvalidOperationException("never reached");
        label145:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS577ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S578");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS577ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S578");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS577ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S578");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS577ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S578");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker115() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker116() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker117() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS577OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS577OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS577OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS577OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS577OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S587");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S587");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS58() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS58");
            this.Manager.Comment("reaching state \'S58\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp168;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp168);
            this.Manager.AddReturn(ReadConfigInfo, null, temp168);
            this.Manager.Comment("reaching state \'S59\'");
            int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS58ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS58ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS58ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS58ReadConfigChecker3)));
            if ((temp174 == 0)) {
                PersistentHandleReconnectTestCaseS56();
                goto label151;
            }
            if ((temp174 == 1)) {
                PersistentHandleReconnectTestCaseS57();
                goto label151;
            }
            if ((temp174 == 2)) {
                this.Manager.Comment("reaching state \'S60\'");
                int temp171 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker118)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker120)));
                if ((temp171 == 0)) {
                    this.Manager.Comment("reaching state \'S61\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S62\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S63\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S64\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S65\'");
                    int temp170 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker119)));
                    if ((temp170 == 0)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,SameClient," +
                                "DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S67\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S68\'");
                        int temp169 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker4)));
                        if ((temp169 == 0)) {
                            PersistentHandleReconnectTestCaseS11();
                            goto label146;
                        }
                        if ((temp169 == 1)) {
                            PersistentHandleReconnectTestCaseS12();
                            goto label146;
                        }
                        if ((temp169 == 2)) {
                            PersistentHandleReconnectTestCaseS13();
                            goto label146;
                        }
                        if ((temp169 == 3)) {
                            PersistentHandleReconnectTestCaseS14();
                            goto label146;
                        }
                        if ((temp169 == 4)) {
                            PersistentHandleReconnectTestCaseS15();
                            goto label146;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker4)));
                    label146:
;
                        goto label147;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S65\'.");
                label147:
;
                    goto label148;
                }
                if ((temp171 == 1)) {
                    PersistentHandleReconnectTestCaseS69();
                    goto label148;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S60\'.");
            label148:
;
                goto label151;
            }
            if ((temp174 == 3)) {
                this.Manager.Comment("reaching state \'S78\'");
                int temp173 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker121)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker123)));
                if ((temp173 == 0)) {
                    this.Manager.Comment("reaching state \'S79\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S80\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S81\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S82\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S83\'");
                    int temp172 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker122)));
                    if ((temp172 == 0)) {
                        this.Manager.Comment("reaching state \'S84\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,SameCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(0)));
                        this.Manager.Comment("reaching state \'S85\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S86\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker5))) != -1)) {
                            PersistentHandleReconnectTestCaseS87();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS58OpenResponseChecker5)));
                        }
                        goto label149;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S83\'.");
                label149:
;
                    goto label150;
                }
                if ((temp173 == 1)) {
                    this.Manager.Comment("reaching state \'S88\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.AddReturn(PrepareOpenInfo, null);
                    PersistentHandleReconnectTestCaseS89();
                    goto label150;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S78\'.");
            label150:
;
                goto label151;
            }
            throw new InvalidOperationException("never reached");
        label151:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS58ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S59");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS58ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S59");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS58ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S59");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker118() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker119() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S68");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PreConstraintChecker120() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS58ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S59");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker121() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker122() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS58OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S86");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker123() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        #endregion
        
        #region Test Starting in S588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS588() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS588");
            this.Manager.Comment("reaching state \'S588\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp175;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp175);
            this.Manager.AddReturn(ReadConfigInfo, null, temp175);
            this.Manager.Comment("reaching state \'S589\'");
            int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS588ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS588ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS588ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS588ReadConfigChecker3)));
            if ((temp177 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label153;
            }
            if ((temp177 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label153;
            }
            if ((temp177 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label153;
            }
            if ((temp177 == 3)) {
                this.Manager.Comment("reaching state \'S590\'");
                int temp176 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker124)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker125)));
                if ((temp176 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label152;
                }
                if ((temp176 == 1)) {
                    this.Manager.Comment("reaching state \'S591\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitNotSet,CAShare,PersistentHand" +
                            "le,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S592\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S593\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: If the Open is not to be preserved for reconnect, the server " +
                            "MUST close the Open as specified in section 3.3.4.17.\"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is closed.\"");
                    this.Manager.Comment("reaching state \'S594\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS47();
                    goto label152;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S590\'.");
            label152:
;
                goto label153;
            }
            throw new InvalidOperationException("never reached");
        label153:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS588ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S589");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS588ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S589");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS588ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S589");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS588ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S589");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker124() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker125() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        #endregion
        
        #region Test Starting in S595
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS595() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS595");
            this.Manager.Comment("reaching state \'S595\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp178;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp178);
            this.Manager.AddReturn(ReadConfigInfo, null, temp178);
            this.Manager.Comment("reaching state \'S596\'");
            int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS595ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS595ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS595ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS595ReadConfigChecker3)));
            if ((temp180 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label155;
            }
            if ((temp180 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label155;
            }
            if ((temp180 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label155;
            }
            if ((temp180 == 3)) {
                this.Manager.Comment("reaching state \'S597\'");
                int temp179 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker126)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker127)));
                if ((temp179 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label154;
                }
                if ((temp179 == 1)) {
                    this.Manager.Comment("reaching state \'S598\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S599\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S600\'");
                    this.Manager.Comment("executing step \'call Disconnect()\'");
                    this.IHandleAdapterInstance.Disconnect();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.7.1: The server MUST iterate over the Session.OpenTable and determ" +
                            "ine whether each Open is to be preserved for reconnect. If any of the following " +
                            "conditions is satisfied, it indicates that the Open is to be preserved for recon" +
                            "nect. \"");
                    this.Manager.Checkpoint("\"[TestInfo] The Open is to be preserved.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] If the Open is to be preserved for reconnect, perform the following ac" +
                            "tions: \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSet Open.Connection to NULL, Open.Session to NULL, Open.TreeConnect t" +
                            "o NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.Connection and Open.Session are set to NULL.\"");
                    this.Manager.Comment("reaching state \'S601\'");
                    this.Manager.Comment("checking step \'return Disconnect\'");
                    PersistentHandleReconnectTestCaseS273();
                    goto label154;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S597\'.");
            label154:
;
                goto label155;
            }
            throw new InvalidOperationException("never reached");
        label155:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS595ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS595ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS595ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS595ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S596");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker126() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker127() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        #endregion
        
        #region Test Starting in S602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS602() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS602");
            this.Manager.Comment("reaching state \'S602\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp181;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp181);
            this.Manager.AddReturn(ReadConfigInfo, null, temp181);
            this.Manager.Comment("reaching state \'S603\'");
            int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS602ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS602ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS602ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS602ReadConfigChecker3)));
            if ((temp185 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label159;
            }
            if ((temp185 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label159;
            }
            if ((temp185 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label159;
            }
            if ((temp185 == 3)) {
                this.Manager.Comment("reaching state \'S604\'");
                int temp184 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker128)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker129)));
                if ((temp184 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label158;
                }
                if ((temp184 == 1)) {
                    this.Manager.Comment("reaching state \'S605\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitNotSet,CAShare,PersistentHan" +
                            "dle,NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S606\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S607\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S608\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S609\'");
                    int temp183 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker130)));
                    if ((temp183 == 0)) {
                        this.Manager.Comment("reaching state \'S610\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S611\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S612\'");
                        int temp182 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker4)));
                        if ((temp182 == 0)) {
                            PersistentHandleReconnectTestCaseS296();
                            goto label156;
                        }
                        if ((temp182 == 1)) {
                            PersistentHandleReconnectTestCaseS297();
                            goto label156;
                        }
                        if ((temp182 == 2)) {
                            PersistentHandleReconnectTestCaseS298();
                            goto label156;
                        }
                        if ((temp182 == 3)) {
                            PersistentHandleReconnectTestCaseS299();
                            goto label156;
                        }
                        if ((temp182 == 4)) {
                            PersistentHandleReconnectTestCaseS300();
                            goto label156;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS602OpenResponseChecker4)));
                    label156:
;
                        goto label157;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S609\'.");
                label157:
;
                    goto label158;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S604\'.");
            label158:
;
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS602ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS602ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS602ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS602ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S603");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker128() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker129() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker130() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS602OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS602OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS602OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS602OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS602OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S612");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S612");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S613
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS613() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS613");
            this.Manager.Comment("reaching state \'S613\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp186;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp186);
            this.Manager.AddReturn(ReadConfigInfo, null, temp186);
            this.Manager.Comment("reaching state \'S614\'");
            int temp190 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS613ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS613ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS613ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS613ReadConfigChecker3)));
            if ((temp190 == 0)) {
                PersistentHandleReconnectTestCaseS482();
                goto label163;
            }
            if ((temp190 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label163;
            }
            if ((temp190 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label163;
            }
            if ((temp190 == 3)) {
                this.Manager.Comment("reaching state \'S615\'");
                int temp189 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker131)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker132)));
                if ((temp189 == 0)) {
                    PersistentHandleReconnectTestCaseS494();
                    goto label162;
                }
                if ((temp189 == 1)) {
                    this.Manager.Comment("reaching state \'S616\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S617\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S618\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S619\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S620\'");
                    int temp188 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker133)));
                    if ((temp188 == 0)) {
                        this.Manager.Comment("reaching state \'S621\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S622\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S623\'");
                        int temp187 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS613OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS613OpenResponseChecker1)));
                        if ((temp187 == 0)) {
                            PersistentHandleReconnectTestCaseS513();
                            goto label160;
                        }
                        if ((temp187 == 1)) {
                            PersistentHandleReconnectTestCaseS514();
                            goto label160;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS613OpenResponseChecker)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS613OpenResponseChecker1)));
                    label160:
;
                        goto label161;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S620\'.");
                label161:
;
                    goto label162;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S615\'.");
            label162:
;
                goto label163;
            }
            throw new InvalidOperationException("never reached");
        label163:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS613ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PersistentHandleReconnectTestCaseS613ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS613ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS613ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S614");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker131() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker132() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker133() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS613OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S623");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS613OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S623");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S623");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethod()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Model)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.Smb30)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory(Microsoft.Protocols.TestSuites.FileSharing.Common.Adapter.TestCategories.PersistentHandle)]
        public void PersistentHandleReconnectTestCaseS96() {
            this.Manager.BeginTest("PersistentHandleReconnectTestCaseS96");
            this.Manager.Comment("reaching state \'S96\'");
            Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig temp191;
            this.Manager.Comment("executing step \'call ReadConfig(out _)\'");
            this.IHandleAdapterInstance.ReadConfig(out temp191);
            this.Manager.AddReturn(ReadConfigInfo, null, temp191);
            this.Manager.Comment("reaching state \'S97\'");
            int temp199 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS96ReadConfigChecker)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS96ReadConfigChecker1)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS96ReadConfigChecker2)), new ExpectedReturn(PersistentHandleReconnectTestCase.ReadConfigInfo, null, new ReadConfigDelegate1(this.PersistentHandleReconnectTestCaseS96ReadConfigChecker3)));
            if ((temp199 == 0)) {
                this.Manager.Comment("reaching state \'S117\'");
                int temp195 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker134)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker136)));
                if ((temp195 == 0)) {
                    this.Manager.Comment("reaching state \'S118\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb302,PersistentBitSet,CAShare,PersistentHandle" +
                            ",NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb302, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S119\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S120\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S121\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S122\'");
                    int temp192 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker135)));
                    if ((temp192 == 0)) {
                        this.Manager.Comment("reaching state \'S123\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithoutPersistent,NoOplockOrLease,SameLeaseKey,SameClie" +
                                "nt,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S124\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S125\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker))) != -1)) {
                            PersistentHandleReconnectTestCaseS87();
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker)));
                        }
                        goto label164;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S122\'.");
                label164:
;
                    goto label167;
                }
                if ((temp195 == 1)) {
                    this.Manager.Comment("reaching state \'S126\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Share is not a CA share or Connection.ServerCapabilities does not inc" +
                            "lude SMB2_GLOBAL_CAP_PERSISTENT_HANDLES.\"");
                    this.Manager.Comment("reaching state \'S127\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S128\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: The server MUST close every Open in Session.OpenTable of the " +
                            "old session, where Open.IsDurable is FALSE and Open.IsResilient is FALSE, as spe" +
                            "cified in section 3.3.4.17. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is FALSE and Open.IsResilient is FALSE, so the open is" +
                            " closed.\"");
                    this.Manager.Comment("reaching state \'S129\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S130\'");
                    int temp194 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker137)));
                    if ((temp194 == 0)) {
                        this.Manager.Comment("reaching state \'S131\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S132\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S133\'");
                        int temp193 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker5)));
                        if ((temp193 == 0)) {
                            PersistentHandleReconnectTestCaseS134();
                            goto label165;
                        }
                        if ((temp193 == 1)) {
                            PersistentHandleReconnectTestCaseS135();
                            goto label165;
                        }
                        if ((temp193 == 2)) {
                            PersistentHandleReconnectTestCaseS136();
                            goto label165;
                        }
                        if ((temp193 == 3)) {
                            PersistentHandleReconnectTestCaseS137();
                            goto label165;
                        }
                        if ((temp193 == 4)) {
                            PersistentHandleReconnectTestCaseS138();
                            goto label165;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker1)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker2)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker3)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker4)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker5)));
                    label165:
;
                        goto label166;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S130\'.");
                label166:
;
                    goto label167;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S117\'.");
            label167:
;
                goto label171;
            }
            if ((temp199 == 1)) {
                PersistentHandleReconnectTestCaseS56();
                goto label171;
            }
            if ((temp199 == 2)) {
                PersistentHandleReconnectTestCaseS57();
                goto label171;
            }
            if ((temp199 == 3)) {
                this.Manager.Comment("reaching state \'S98\'");
                int temp198 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker138)), new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker139)));
                if ((temp198 == 0)) {
                    PersistentHandleReconnectTestCaseS109();
                    goto label170;
                }
                if ((temp198 == 1)) {
                    this.Manager.Comment("reaching state \'S99\'");
                    this.Manager.Comment("executing step \'call PrepareOpen(Smb30,PersistentBitSet,CAShare,PersistentHandle," +
                            "NoOplockOrLease)\'");
                    this.IHandleAdapterInstance.PrepareOpen(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelDialectRevision.Smb30, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.PersistentBitType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CAShareType)(0)), Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ModelHandleType.PersistentHandle, ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)));
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.10: This section applies only to servers that implement the SM" +
                            "B 3.x dialect family. \"");
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.4: The Capabilities field MUST be set to a combination of zero o" +
                            "r more of the following bit values, as specified in section 2.2.4:\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] \tSMB2_GLOBAL_CAP_PERSISTENT_HANDLES if Connection.Dialect belongs to t" +
                            "he SMB 3.x dialect family, SMB2_GLOBAL_CAP_PERSISTENT_HANDLES is set in the Capa" +
                            "bilities field of the request, and the server supports persistent handles.\"");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So SMB2_DHANDLE_FLAG_PERSISTENT bit" +
                            " is set in Connection.ServerCapabilities.\"");
                    this.Manager.Checkpoint("\"[MS-SMB2] In the \"Successful Open Initialization\" phase, the server MUST set Ope" +
                            "n.IsDurable to TRUE. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is set to TRUE.\"");
                    this.Manager.Checkpoint(@"""[MS-SMB2] 3.3.5.9.10: If the SMB2_DHANDLE_FLAG_PERSISTENT bit is set in the Flags field of the request, TreeConnect.Share.IsCA is TRUE, and Connection.ServerCapabilities includes SMB2_GLOBAL_CAP_PERSISTENT_HANDLES, the server MUST set Open.IsPersistent to TRUE.""");
                    this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met. So Open.IsPersistent is set to TRUE" +
                            ".\"");
                    this.Manager.Comment("reaching state \'S100\'");
                    this.Manager.Comment("checking step \'return PrepareOpen\'");
                    this.Manager.Comment("reaching state \'S101\'");
                    this.Manager.Comment("executing step \'call LogOff()\'");
                    this.IHandleAdapterInstance.LogOff();
                    this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.6: For all opens in Session.OpenTable where Open.IsDurable is TR" +
                            "UE or Open.IsResilient is TRUE, the server MUST set Open.Session, Open.Connectio" +
                            "n, and Open.TreeConnect to NULL. \"");
                    this.Manager.Checkpoint("\"[TestInfo] Open.IsDurable is TRUE, so Open.Session, Open.Connection is set to NU" +
                            "LL.\"");
                    this.Manager.Comment("reaching state \'S102\'");
                    this.Manager.Comment("checking step \'return LogOff\'");
                    this.Manager.Comment("reaching state \'S103\'");
                    int temp197 = this.Manager.SelectSatisfiedPreConstraint(true, new ExpectedPreConstraint(new PreConstraintDelegate1(this.PreConstraintChecker140)));
                    if ((temp197 == 0)) {
                        this.Manager.Comment("reaching state \'S104\'");
                        this.Manager.Comment("executing step \'call ReconnectOpenRequest(DurableV1ReconnectContextNotExist,Durab" +
                                "leV2ReconnectContextExistWithPersistent,NoOplockOrLease,SameLeaseKey,DifferentCl" +
                                "ient,DifferentCreateGuid)\'");
                        this.IHandleAdapterInstance.ReconnectOpenRequest(((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV1ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableV2ReconnectContext)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.OplockLeaseType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseKeyDifferentialType)(0)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.ClientIdType)(1)), ((Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.CreateGuidType)(1)));
                        this.Manager.Comment("reaching state \'S105\'");
                        this.Manager.Comment("checking step \'return ReconnectOpenRequest\'");
                        this.Manager.Comment("reaching state \'S106\'");
                        int temp196 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker7)));
                        if ((temp196 == 0)) {
                            this.Manager.Comment("reaching state \'S107\'");
                            goto label168;
                        }
                        if ((temp196 == 1)) {
                            this.Manager.Comment("reaching state \'S108\'");
                            goto label168;
                        }
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker6)), new ExpectedEvent(PersistentHandleReconnectTestCase.OpenResponseInfo, null, new OpenResponseDelegate1(this.PersistentHandleReconnectTestCaseS96OpenResponseChecker7)));
                    label168:
;
                        goto label169;
                    }
                    this.Manager.Assert(false, "reached non-accepting end state \'S103\'.");
                label169:
;
                    goto label170;
                }
                this.Manager.Assert(false, "reached non-accepting end state \'S98\'.");
            label170:
;
                goto label171;
            }
            throw new InvalidOperationException("never reached");
        label171:
;
            this.Manager.EndTest();
        }
        
        private void PersistentHandleReconnectTestCaseS96ReadConfigChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(770))), "Fail to check the assumption : v.MaxSmbVersionSupported == 770");
        }
        
        private void PreConstraintChecker134() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker135() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S125");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S125");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] All the above conditions are met."", ""[TestTag] UnexpectedFields""");
                throw;
            }
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.IsPersistent is TRUE and the SMB2_DHANDLE_FLAG_PERSISTENT bit " +
                    "is not set in the Flags field of the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Cre" +
                    "ate Context, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND." +
                    "\"");
            this.Manager.Checkpoint("\"[TestInfo] All the above conditions are met.\"");
            this.Manager.Checkpoint("\"[TestTag] UnexpectedFields\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PreConstraintChecker136() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker137() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2012R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : c.Platform == 268435463");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435463))), "Fail to check the assumption : v3.Platform == 268435463");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2012R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008R2.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : c.Platform == 268435460");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435460))), "Fail to check the assumption : v3.Platform == 268435460");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008R2.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker4(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is WindowsServer2008.""");
                throw;
            }
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : c.Platform == 268435458");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435458))), "Fail to check the assumption : v3.Platform == 268435458");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is WindowsServer2008.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker5(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S133");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open does not exist."", ""[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STATUS_OBJECT_NAME_NOT_FOUND and proceed as specified in ""Failed Open Handling"" in section 3.3.5.9."", ""[TestTag] InvalidIdentifier"", ""[TestInfo] The SUT platform is NonWindows, so the server could fail the request with other error code.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(0))), "Fail to check the assumption : c.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(0))), "Fail to check the assumption : v3.Platform == 0");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open does not exist.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If the lookup fails, the server SHOULD<276> fail the request with STAT" +
                    "US_OBJECT_NAME_NOT_FOUND and proceed as specified in \"Failed Open Handling\" in s" +
                    "ection 3.3.5.9.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Checkpoint("\"[TestInfo] The SUT platform is NonWindows, so the server could fail the request " +
                    "with other error code.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96ReadConfigChecker1(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(514))), "Fail to check the assumption : v.MaxSmbVersionSupported == 514");
        }
        
        private void PersistentHandleReconnectTestCaseS96ReadConfigChecker2(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(528))), "Fail to check the assumption : v.MaxSmbVersionSupported == 528");
        }
        
        private void PersistentHandleReconnectTestCaseS96ReadConfigChecker3(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'return ReadConfig/[out c]\'");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c, c, "c of ReadConfig, state S97");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v, this.c, "v == c");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v.Value.MaxSmbVersionSupported)))), ((object)(768))), "Fail to check the assumption : v.MaxSmbVersionSupported == 768");
        }
        
        private void PreConstraintChecker138() {
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0))), "Fail to check preconstraint : c.IsPersistentHandleSupported == 0");
        }
        
        private void PreConstraintChecker139() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.c.Value.IsPersistentHandleSupported))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !(c.IsPersistentHandleSupported == 0)");
        }
        
        private void PreConstraintChecker140() {
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)((System.Convert.ToInt32(this.c.Value.IsLeasingSupported) | 1))), ((object)(0)))) 
                            == false), "Fail to check preconstraint : !((c.IsLeasingSupported | 1) == 0)");
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker6(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(STATUS_OBJECT_NAME_NOT_FOUND,durableHandleRespo" +
                    "nseContext,leaseResponseContext,c1)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status>(this.Manager, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status.STATUS_OBJECT_NAME_NOT_FOUND, status, "status of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists."", ""[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND."", ""[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request."", ""[TestTag] InvalidIdentifier""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462)))) 
                            == false), "Fail to check the assumption : !(c.Platform == 268435462)");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(((int)(this.c.Value.Platform))))), "Fail to check the assumption : v3.Platform == c.Platform");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Checkpoint("\"[MS-SMB2] If Open.CreateGuid is not equal to the CreateGuid in the request, the " +
                    "server MUST fail the request with STATUS_OBJECT_NAME_NOT_FOUND.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open.CreateGuid is not equal to the CreateGuid in the request.\"");
            this.Manager.Checkpoint("\"[TestTag] InvalidIdentifier\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
        }
        
        private void PersistentHandleReconnectTestCaseS96OpenResponseChecker7(Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.ModelSmb2Status status, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.DurableHandleResponseContext durableHandleResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.LeaseResponseContext leaseResponseContext, Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig c) {
            this.Manager.Comment("checking step \'event OpenResponse(status,durableHandleResponseContext,leaseRespon" +
                    "seContext,c1)\'");
            try {
                TestManagerHelpers.AssertBind<int>(this.Manager, this.status, (System.Int32)status, "status of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.durableHandleResponseContext, (System.Int32)durableHandleResponseContext, "durableHandleResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<int>(this.Manager, this.leaseResponseContext, (System.Int32)leaseResponseContext, "leaseResponseContext of OpenResponse, state S106");
                TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.c1, c, "c of OpenResponse, state S106");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered ""[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Create Context"", ""[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doing a lookup with the FileId.Persistent portion of the create context."", ""[TestInfo] Open exists.""");
                throw;
            }
            this.Manager.Assert(((Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(this.status.Value)), ((object)(0)))) 
                            == false), "Fail to check the assumption : !(status == 0)");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.c.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : c.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v1, this.durableHandleResponseContext, "v1 == durableHandleResponseContext");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v2, this.leaseResponseContext, "v2 == leaseResponseContext");
            TestManagerHelpers.AssertBind<Microsoft.Protocols.TestSuites.FileSharing.SMB2Model.Adapter.Handle.HandleConfig>(this.Manager, this.v3, this.c1, "v3 == c1");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsDirectoryLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsDirectoryLeasingSupported)))), "Fail to check the assumption : v3.IsDirectoryLeasingSupported == c.IsDirectoryLea" +
                    "singSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(System.Convert.ToInt32(this.v3.Value.IsLeasingSupported))), ((object)(System.Convert.ToInt32(this.c.Value.IsLeasingSupported)))), "Fail to check the assumption : v3.IsLeasingSupported == c.IsLeasingSupported");
            this.Manager.Assert(Microsoft.SpecExplorer.Runtime.Testing.TestManagerHelpers.Equality(((object)(((int)(this.v3.Value.Platform)))), ((object)(268435462))), "Fail to check the assumption : v3.Platform == 268435462");
            TestManagerHelpers.AssertBind<int>(this.Manager, this.v4, this.status, "v4 == status");
            this.Manager.Checkpoint("\"[MS-SMB2] 3.3.5.9.12: Handling the SMB2_CREATE_DURABLE_HANDLE_RECONNECT_V2 Creat" +
                    "e Context\"");
            this.Manager.Checkpoint("\"[MS-SMB2] The server MUST look up an existing open in the GlobalOpenTable by doi" +
                    "ng a lookup with the FileId.Persistent portion of the create context.\"");
            this.Manager.Checkpoint("\"[TestInfo] Open exists.\"");
            this.Manager.Comment("Unbinding variable \'c1\'");
            this.c1.Unbind();
            this.Manager.Comment("Unbinding variable \'durableHandleResponseContext\'");
            this.durableHandleResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'leaseResponseContext\'");
            this.leaseResponseContext.Unbind();
            this.Manager.Comment("Unbinding variable \'status\'");
            this.status.Unbind();
            this.Manager.Comment("Unbinding variable \'v1\'");
            this.v1.Unbind();
            this.Manager.Comment("Unbinding variable \'v2\'");
            this.v2.Unbind();
            this.Manager.Comment("Unbinding variable \'v3\'");
            this.v3.Unbind();
            this.Manager.Comment("Unbinding variable \'v4\'");
            this.v4.Unbind();
        }
        #endregion
    }
}
